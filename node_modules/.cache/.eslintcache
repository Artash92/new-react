[{"/home/artashes/Desktop/codeex/codeex/src/index.js":"1","/home/artashes/Desktop/codeex/codeex/src/App.js":"2","/home/artashes/Desktop/codeex/codeex/src/reportWebVitals.js":"3","/home/artashes/Desktop/codeex/codeex/src/components/Wrapper.js":"4","/home/artashes/Desktop/codeex/codeex/src/components/Header.js":"5","/home/artashes/Desktop/codeex/codeex/src/pages/Home.js":"6","/home/artashes/Desktop/codeex/codeex/src/pages/JavaScript.js":"7","/home/artashes/Desktop/codeex/codeex/src/pages/About.js":"8","/home/artashes/Desktop/codeex/codeex/src/pages/Html.js":"9","/home/artashes/Desktop/codeex/codeex/src/pages/ReactJS.js":"10","/home/artashes/Desktop/codeex/codeex/src/components/AboutForm.js":"11","/home/artashes/Desktop/codeex/codeex/src/components/Navigation.js":"12","/home/artashes/Desktop/codeex/codeex/src/pages/NotFound.js":"13","/home/artashes/Desktop/codeex/codeex/src/components/Courses.js":"14","/home/artashes/Desktop/codeex/codeex/src/components/Banner.js":"15","/home/artashes/Desktop/codeex/codeex/src/components/Features.js":"16","/home/artashes/Desktop/codeex/codeex/src/pages/JavaScript5.js":"17","/home/artashes/Desktop/codeex/codeex/src/pages/JavaScript6.js":"18","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_3.js":"19","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_4.js":"20","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_5.js":"21","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_6.js":"22","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_7.js":"23","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_8.js":"24","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_9.js":"25","/home/artashes/Desktop/codeex/codeex/src/pages/JSES5_1.js":"26","/home/artashes/Desktop/codeex/codeex/src/pages/JSES5_2.js":"27","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_1.js":"28","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_1.js":"29","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_2.js":"30","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_2.js":"31","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_3.js":"32","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_3.js":"33","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_4.js":"34","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_4.js":"35","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_5.js":"36","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_5.js":"37","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_6.js":"38","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_6.js":"39","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_7.js":"40","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_7.js":"41","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_8.js":"42","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_8.js":"43","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_9.js":"44","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_9.js":"45","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs6.js":"46","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs6.js":"47","/home/artashes/Desktop/codeex/codeex/src/pages/Html_2.js":"48","/home/artashes/Desktop/codeex/codeex/src/pages/Html_3.js":"49","/home/artashes/Desktop/codeex/codeex/src/pages/Html_1.js":"50","/home/artashes/Desktop/codeex/codeex/src/lang/RuHtml_1.js":"51","/home/artashes/Desktop/codeex/codeex/src/lang/AmHtml_1.js":"52","/home/artashes/Desktop/codeex/codeex/src/lang/AmHtml_2.js":"53","/home/artashes/Desktop/codeex/codeex/src/lang/RuHtml_2.js":"54","/home/artashes/Desktop/codeex/codeex/src/lang/AmHtml_3.js":"55","/home/artashes/Desktop/codeex/codeex/src/lang/RuHtml_3.js":"56","/home/artashes/Desktop/codeex/codeex/src/pages/Jquery.js":"57","/home/artashes/Desktop/codeex/codeex/src/lang/AmJquery.js":"58","/home/artashes/Desktop/codeex/codeex/src/lang/RuJquery.js":"59","/home/artashes/Desktop/codeex/codeex/src/pages/React_1.js":"60","/home/artashes/Desktop/codeex/codeex/src/pages/React_2.js":"61","/home/artashes/Desktop/codeex/codeex/src/pages/React_3.js":"62","/home/artashes/Desktop/codeex/codeex/src/pages/React_4.js":"63","/home/artashes/Desktop/codeex/codeex/src/pages/React_5.js":"64","/home/artashes/Desktop/codeex/codeex/src/pages/React_6.js":"65","/home/artashes/Desktop/codeex/codeex/src/pages/React_7.js":"66","/home/artashes/Desktop/codeex/codeex/src/pages/React_8.js":"67","/home/artashes/Desktop/codeex/codeex/src/pages/React_9.js":"68","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_10.js":"69","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_10.js":"70","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_10.js":"71","/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_1.js":"72","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_1.js":"73","/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_2.js":"74","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_2.js":"75","/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_3.js":"76","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_3.js":"77","/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_4.js":"78","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_4.js":"79","/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_5.js":"80","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_5.js":"81","/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_6.js":"82","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_6.js":"83","/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_7.js":"84","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_7.js":"85","/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_8.js":"86","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_8.js":"87","/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_9.js":"88","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_9.js":"89","/home/artashes/Desktop/codeex/codeex/src/pages/Services.js":"90","/home/artashes/Desktop/codeex/codeex/src/pages/Weather.js":"91","/home/artashes/Desktop/codeex/codeex/src/pages/keyboard.js":"92","/home/artashes/Desktop/codeexx/src/index.js":"93","/home/artashes/Desktop/codeexx/src/App.js":"94","/home/artashes/Desktop/codeexx/src/reportWebVitals.js":"95","/home/artashes/Desktop/codeexx/src/components/Wrapper.js":"96","/home/artashes/Desktop/codeexx/src/pages/Home.js":"97","/home/artashes/Desktop/codeexx/src/pages/About.js":"98","/home/artashes/Desktop/codeexx/src/pages/NotFound.js":"99","/home/artashes/Desktop/codeexx/src/pages/JavaScript.js":"100","/home/artashes/Desktop/codeexx/src/pages/Html.js":"101","/home/artashes/Desktop/codeexx/src/pages/ReactJS.js":"102","/home/artashes/Desktop/codeexx/src/pages/JavaScript5.js":"103","/home/artashes/Desktop/codeexx/src/pages/JavaScript6.js":"104","/home/artashes/Desktop/codeexx/src/pages/JSES5_1.js":"105","/home/artashes/Desktop/codeexx/src/pages/JSES5_2.js":"106","/home/artashes/Desktop/codeexx/src/pages/JsEs5_3.js":"107","/home/artashes/Desktop/codeexx/src/pages/JsEs5_4.js":"108","/home/artashes/Desktop/codeexx/src/pages/JsEs5_5.js":"109","/home/artashes/Desktop/codeexx/src/pages/JsEs5_6.js":"110","/home/artashes/Desktop/codeexx/src/pages/JsEs5_7.js":"111","/home/artashes/Desktop/codeexx/src/pages/JsEs5_8.js":"112","/home/artashes/Desktop/codeexx/src/pages/JsEs5_9.js":"113","/home/artashes/Desktop/codeexx/src/pages/Html_2.js":"114","/home/artashes/Desktop/codeexx/src/pages/Html_3.js":"115","/home/artashes/Desktop/codeexx/src/pages/Html_1.js":"116","/home/artashes/Desktop/codeexx/src/pages/Jquery.js":"117","/home/artashes/Desktop/codeexx/src/pages/React_1.js":"118","/home/artashes/Desktop/codeexx/src/pages/React_2.js":"119","/home/artashes/Desktop/codeexx/src/pages/React_3.js":"120","/home/artashes/Desktop/codeexx/src/pages/React_4.js":"121","/home/artashes/Desktop/codeexx/src/pages/React_5.js":"122","/home/artashes/Desktop/codeexx/src/pages/React_6.js":"123","/home/artashes/Desktop/codeexx/src/pages/React_7.js":"124","/home/artashes/Desktop/codeexx/src/pages/React_8.js":"125","/home/artashes/Desktop/codeexx/src/pages/React_9.js":"126","/home/artashes/Desktop/codeexx/src/pages/JsEs5_10.js":"127","/home/artashes/Desktop/codeexx/src/pages/Services.js":"128","/home/artashes/Desktop/codeexx/src/pages/Weather.js":"129","/home/artashes/Desktop/codeexx/src/pages/keyboard.js":"130","/home/artashes/Desktop/codeexx/src/components/Header.js":"131","/home/artashes/Desktop/codeexx/src/components/Navigation.js":"132","/home/artashes/Desktop/codeexx/src/components/Features.js":"133","/home/artashes/Desktop/codeexx/src/components/Courses.js":"134","/home/artashes/Desktop/codeexx/src/components/Banner.js":"135","/home/artashes/Desktop/codeexx/src/components/AboutForm.js":"136","/home/artashes/Desktop/codeexx/src/lang/AmEs6.js":"137","/home/artashes/Desktop/codeexx/src/lang/RuEs6.js":"138","/home/artashes/Desktop/codeexx/src/lang/RuEs5_1.js":"139","/home/artashes/Desktop/codeexx/src/lang/AmEs5_1.js":"140","/home/artashes/Desktop/codeexx/src/lang/RuEs5_2.js":"141","/home/artashes/Desktop/codeexx/src/lang/AmEs5_2.js":"142","/home/artashes/Desktop/codeexx/src/lang/RuEs5_3.js":"143","/home/artashes/Desktop/codeexx/src/lang/AmEs5_3.js":"144","/home/artashes/Desktop/codeexx/src/lang/RuEs5_4.js":"145","/home/artashes/Desktop/codeexx/src/lang/AmEs5_4.js":"146","/home/artashes/Desktop/codeexx/src/lang/RuEs5_5.js":"147","/home/artashes/Desktop/codeexx/src/lang/AmEs5_5.js":"148","/home/artashes/Desktop/codeexx/src/lang/RuEs5_6.js":"149","/home/artashes/Desktop/codeexx/src/lang/AmEs5_6.js":"150","/home/artashes/Desktop/codeexx/src/lang/RuEs5_7.js":"151","/home/artashes/Desktop/codeexx/src/lang/AmEs5_7.js":"152","/home/artashes/Desktop/codeexx/src/lang/RuEs5_8.js":"153","/home/artashes/Desktop/codeexx/src/lang/AmEs5_8.js":"154","/home/artashes/Desktop/codeexx/src/lang/RuEs5_9.js":"155","/home/artashes/Desktop/codeexx/src/lang/AmEs5_9.js":"156","/home/artashes/Desktop/codeexx/src/lang/AmHtml_2.js":"157","/home/artashes/Desktop/codeexx/src/lang/RuHtml_2.js":"158","/home/artashes/Desktop/codeexx/src/lang/AmHtml_3.js":"159","/home/artashes/Desktop/codeexx/src/lang/RuHtml_3.js":"160","/home/artashes/Desktop/codeexx/src/lang/AmHtml_1.js":"161","/home/artashes/Desktop/codeexx/src/lang/RuHtml_1.js":"162","/home/artashes/Desktop/codeexx/src/lang/AmJquery.js":"163","/home/artashes/Desktop/codeexx/src/lang/RuJquery.js":"164","/home/artashes/Desktop/codeexx/src/lang/RuReact_1.js":"165","/home/artashes/Desktop/codeexx/src/lang/AmReact_1.js":"166","/home/artashes/Desktop/codeexx/src/lang/RuReact_2.js":"167","/home/artashes/Desktop/codeexx/src/lang/AmReact_2.js":"168","/home/artashes/Desktop/codeexx/src/lang/RuReact_3.js":"169","/home/artashes/Desktop/codeexx/src/lang/AmReact_3.js":"170","/home/artashes/Desktop/codeexx/src/lang/RuReact_4.js":"171","/home/artashes/Desktop/codeexx/src/lang/AmReact_4.js":"172","/home/artashes/Desktop/codeexx/src/lang/RuReact_5.js":"173","/home/artashes/Desktop/codeexx/src/lang/AmReact_5.js":"174","/home/artashes/Desktop/codeexx/src/lang/RuReact_6.js":"175","/home/artashes/Desktop/codeexx/src/lang/AmReact_6.js":"176","/home/artashes/Desktop/codeexx/src/lang/RuReact_7.js":"177","/home/artashes/Desktop/codeexx/src/lang/AmReact_7.js":"178","/home/artashes/Desktop/codeexx/src/lang/RuReact_8.js":"179","/home/artashes/Desktop/codeexx/src/lang/AmReact_8.js":"180","/home/artashes/Desktop/codeexx/src/lang/RuReact_9.js":"181","/home/artashes/Desktop/codeexx/src/lang/AmReact_9.js":"182","/home/artashes/Desktop/codeexx/src/lang/RuEs5_10.js":"183","/home/artashes/Desktop/codeexx/src/lang/AmEs5_10.js":"184"},{"size":602,"mtime":1681310444602,"results":"185","hashOfConfig":"186"},{"size":6129,"mtime":1681310337508,"results":"187","hashOfConfig":"186"},{"size":362,"mtime":1679772447841,"results":"188","hashOfConfig":"186"},{"size":473,"mtime":1679927842767,"results":"189","hashOfConfig":"186"},{"size":116,"mtime":1679774111370,"results":"190","hashOfConfig":"186"},{"size":264,"mtime":1679931704644,"results":"191","hashOfConfig":"186"},{"size":445,"mtime":1680541682934,"results":"192","hashOfConfig":"186"},{"size":805,"mtime":1681072881665,"results":"193","hashOfConfig":"186"},{"size":399,"mtime":1680448891977,"results":"194","hashOfConfig":"186"},{"size":875,"mtime":1680699333663,"results":"195","hashOfConfig":"186"},{"size":425,"mtime":1679924987220,"results":"196","hashOfConfig":"186"},{"size":2310,"mtime":1679935126643,"results":"197","hashOfConfig":"186"},{"size":419,"mtime":1679927093517,"results":"198","hashOfConfig":"186"},{"size":396,"mtime":1681220337846,"results":"199","hashOfConfig":"186"},{"size":589,"mtime":1681392728968,"results":"200","hashOfConfig":"186"},{"size":357,"mtime":1679927705840,"results":"201","hashOfConfig":"186"},{"size":958,"mtime":1680876301899,"results":"202","hashOfConfig":"186"},{"size":26747,"mtime":1680444242612,"results":"203","hashOfConfig":"186"},{"size":4617,"mtime":1680886944328,"results":"204","hashOfConfig":"186"},{"size":8948,"mtime":1680887659442,"results":"205","hashOfConfig":"186"},{"size":9169,"mtime":1680887910205,"results":"206","hashOfConfig":"186"},{"size":11854,"mtime":1680888029862,"results":"207","hashOfConfig":"186"},{"size":11779,"mtime":1680888074611,"results":"208","hashOfConfig":"186"},{"size":5218,"mtime":1680888126583,"results":"209","hashOfConfig":"186"},{"size":13216,"mtime":1680374847282,"results":"210","hashOfConfig":"186"},{"size":8366,"mtime":1681392093512,"results":"211","hashOfConfig":"186"},{"size":6128,"mtime":1680886754760,"results":"212","hashOfConfig":"186"},{"size":11370,"mtime":1680375980610,"results":"213","hashOfConfig":"186"},{"size":3051,"mtime":1680638476528,"results":"214","hashOfConfig":"186"},{"size":7963,"mtime":1680886825990,"results":"215","hashOfConfig":"186"},{"size":124,"mtime":1680362577232,"results":"216","hashOfConfig":"186"},{"size":124,"mtime":1680362582792,"results":"217","hashOfConfig":"186"},{"size":5564,"mtime":1680887103214,"results":"218","hashOfConfig":"186"},{"size":11743,"mtime":1680887223172,"results":"219","hashOfConfig":"186"},{"size":133,"mtime":1680362588196,"results":"220","hashOfConfig":"186"},{"size":12246,"mtime":1680887411631,"results":"221","hashOfConfig":"186"},{"size":124,"mtime":1680362593032,"results":"222","hashOfConfig":"186"},{"size":15555,"mtime":1680887473140,"results":"223","hashOfConfig":"186"},{"size":124,"mtime":1680362599416,"results":"224","hashOfConfig":"186"},{"size":16195,"mtime":1680887501016,"results":"225","hashOfConfig":"186"},{"size":124,"mtime":1680362603664,"results":"226","hashOfConfig":"186"},{"size":6256,"mtime":1680383957806,"results":"227","hashOfConfig":"186"},{"size":124,"mtime":1680362608500,"results":"228","hashOfConfig":"186"},{"size":17242,"mtime":1680441936210,"results":"229","hashOfConfig":"186"},{"size":124,"mtime":1680362619192,"results":"230","hashOfConfig":"186"},{"size":38852,"mtime":1680446456490,"results":"231","hashOfConfig":"186"},{"size":105,"mtime":1680442278949,"results":"232","hashOfConfig":"186"},{"size":9648,"mtime":1680526306618,"results":"233","hashOfConfig":"186"},{"size":6267,"mtime":1680726758508,"results":"234","hashOfConfig":"186"},{"size":8256,"mtime":1680726658024,"results":"235","hashOfConfig":"186"},{"size":10374,"mtime":1680529917941,"results":"236","hashOfConfig":"186"},{"size":114,"mtime":1680466121333,"results":"237","hashOfConfig":"186"},{"size":114,"mtime":1680526343183,"results":"238","hashOfConfig":"186"},{"size":13282,"mtime":1680530814187,"results":"239","hashOfConfig":"186"},{"size":119,"mtime":1680531260330,"results":"240","hashOfConfig":"186"},{"size":7991,"mtime":1680532018340,"results":"241","hashOfConfig":"186"},{"size":15283,"mtime":1680552732255,"results":"242","hashOfConfig":"186"},{"size":114,"mtime":1680552582300,"results":"243","hashOfConfig":"186"},{"size":22189,"mtime":1680555357364,"results":"244","hashOfConfig":"186"},{"size":6109,"mtime":1680983582300,"results":"245","hashOfConfig":"186"},{"size":6202,"mtime":1680986437864,"results":"246","hashOfConfig":"186"},{"size":10323,"mtime":1680984402140,"results":"247","hashOfConfig":"186"},{"size":9748,"mtime":1680984582696,"results":"248","hashOfConfig":"186"},{"size":7155,"mtime":1680984870238,"results":"249","hashOfConfig":"186"},{"size":12725,"mtime":1681068093039,"results":"250","hashOfConfig":"186"},{"size":7018,"mtime":1680985193090,"results":"251","hashOfConfig":"186"},{"size":7831,"mtime":1681069043369,"results":"252","hashOfConfig":"186"},{"size":4822,"mtime":1680985384942,"results":"253","hashOfConfig":"186"},{"size":11367,"mtime":1680958686103,"results":"254","hashOfConfig":"186"},{"size":14339,"mtime":1680958354879,"results":"255","hashOfConfig":"186"},{"size":117,"mtime":1680901949847,"results":"256","hashOfConfig":"186"},{"size":8303,"mtime":1680983895482,"results":"257","hashOfConfig":"186"},{"size":118,"mtime":1680960248084,"results":"258","hashOfConfig":"186"},{"size":7808,"mtime":1680986420944,"results":"259","hashOfConfig":"186"},{"size":118,"mtime":1680960242000,"results":"260","hashOfConfig":"186"},{"size":13367,"mtime":1680988063018,"results":"261","hashOfConfig":"186"},{"size":118,"mtime":1680960235567,"results":"262","hashOfConfig":"186"},{"size":13453,"mtime":1681066586368,"results":"263","hashOfConfig":"186"},{"size":118,"mtime":1680960227615,"results":"264","hashOfConfig":"186"},{"size":9725,"mtime":1681067210872,"results":"265","hashOfConfig":"186"},{"size":118,"mtime":1680960220707,"results":"266","hashOfConfig":"186"},{"size":18053,"mtime":1681068197613,"results":"267","hashOfConfig":"186"},{"size":118,"mtime":1680960194398,"results":"268","hashOfConfig":"186"},{"size":9323,"mtime":1681068621416,"results":"269","hashOfConfig":"186"},{"size":118,"mtime":1680960187417,"results":"270","hashOfConfig":"186"},{"size":10175,"mtime":1681069097378,"results":"271","hashOfConfig":"186"},{"size":118,"mtime":1680960180465,"results":"272","hashOfConfig":"186"},{"size":4932,"mtime":1681069475657,"results":"273","hashOfConfig":"186"},{"size":118,"mtime":1680960169301,"results":"274","hashOfConfig":"186"},{"size":391,"mtime":1681070870794,"results":"275","hashOfConfig":"186"},{"size":3607,"mtime":1681159295511,"results":"276","hashOfConfig":"186"},{"size":4424,"mtime":1681391490569,"results":"277","hashOfConfig":"186"},{"size":602,"mtime":1681310444602,"results":"278","hashOfConfig":"279"},{"size":6129,"mtime":1681310337508,"results":"280","hashOfConfig":"279"},{"size":362,"mtime":1679772447841,"results":"281","hashOfConfig":"279"},{"size":473,"mtime":1679927842767,"results":"282","hashOfConfig":"279"},{"size":264,"mtime":1679931704644,"results":"283","hashOfConfig":"279"},{"size":805,"mtime":1681072881665,"results":"284","hashOfConfig":"279"},{"size":419,"mtime":1679927093517,"results":"285","hashOfConfig":"279"},{"size":445,"mtime":1680541682934,"results":"286","hashOfConfig":"279"},{"size":399,"mtime":1680448891977,"results":"287","hashOfConfig":"279"},{"size":875,"mtime":1680699333663,"results":"288","hashOfConfig":"279"},{"size":958,"mtime":1680876301899,"results":"289","hashOfConfig":"279"},{"size":26747,"mtime":1680444242612,"results":"290","hashOfConfig":"279"},{"size":8366,"mtime":1681392093512,"results":"291","hashOfConfig":"279"},{"size":6128,"mtime":1680886754760,"results":"292","hashOfConfig":"279"},{"size":4617,"mtime":1680886944328,"results":"293","hashOfConfig":"279"},{"size":8948,"mtime":1680887659442,"results":"294","hashOfConfig":"279"},{"size":9169,"mtime":1680887910205,"results":"295","hashOfConfig":"279"},{"size":11854,"mtime":1680888029862,"results":"296","hashOfConfig":"279"},{"size":11779,"mtime":1680888074611,"results":"297","hashOfConfig":"279"},{"size":5218,"mtime":1680888126583,"results":"298","hashOfConfig":"279"},{"size":13216,"mtime":1680374847282,"results":"299","hashOfConfig":"279"},{"size":9648,"mtime":1680526306618,"results":"300","hashOfConfig":"279"},{"size":6267,"mtime":1680726758508,"results":"301","hashOfConfig":"279"},{"size":8256,"mtime":1680726658024,"results":"302","hashOfConfig":"279"},{"size":15283,"mtime":1680552732255,"results":"303","hashOfConfig":"279"},{"size":6109,"mtime":1680983582300,"results":"304","hashOfConfig":"279"},{"size":6202,"mtime":1680986437864,"results":"305","hashOfConfig":"279"},{"size":10323,"mtime":1680984402140,"results":"306","hashOfConfig":"279"},{"size":9748,"mtime":1680984582696,"results":"307","hashOfConfig":"279"},{"size":7155,"mtime":1680984870238,"results":"308","hashOfConfig":"279"},{"size":12725,"mtime":1681068093039,"results":"309","hashOfConfig":"279"},{"size":7018,"mtime":1680985193090,"results":"310","hashOfConfig":"279"},{"size":7831,"mtime":1681069043369,"results":"311","hashOfConfig":"279"},{"size":4822,"mtime":1680985384942,"results":"312","hashOfConfig":"279"},{"size":11367,"mtime":1680958686103,"results":"313","hashOfConfig":"279"},{"size":391,"mtime":1681070870794,"results":"314","hashOfConfig":"279"},{"size":3607,"mtime":1681159295511,"results":"315","hashOfConfig":"279"},{"size":4424,"mtime":1681391490569,"results":"316","hashOfConfig":"279"},{"size":116,"mtime":1679774111370,"results":"317","hashOfConfig":"279"},{"size":2310,"mtime":1679935126643,"results":"318","hashOfConfig":"279"},{"size":357,"mtime":1679927705840,"results":"319","hashOfConfig":"279"},{"size":396,"mtime":1681220337846,"results":"320","hashOfConfig":"279"},{"size":589,"mtime":1681392728968,"results":"321","hashOfConfig":"279"},{"size":425,"mtime":1679924987220,"results":"322","hashOfConfig":"279"},{"size":105,"mtime":1680442278949,"results":"323","hashOfConfig":"279"},{"size":38852,"mtime":1680446456490,"results":"324","hashOfConfig":"279"},{"size":11370,"mtime":1680375980610,"results":"325","hashOfConfig":"279"},{"size":3051,"mtime":1680638476528,"results":"326","hashOfConfig":"279"},{"size":7963,"mtime":1680886825990,"results":"327","hashOfConfig":"279"},{"size":124,"mtime":1680362577232,"results":"328","hashOfConfig":"279"},{"size":5564,"mtime":1680887103214,"results":"329","hashOfConfig":"279"},{"size":124,"mtime":1680362582792,"results":"330","hashOfConfig":"279"},{"size":11743,"mtime":1680887223172,"results":"331","hashOfConfig":"279"},{"size":133,"mtime":1680362588196,"results":"332","hashOfConfig":"279"},{"size":12246,"mtime":1680887411631,"results":"333","hashOfConfig":"279"},{"size":124,"mtime":1680362593032,"results":"334","hashOfConfig":"279"},{"size":15555,"mtime":1680887473140,"results":"335","hashOfConfig":"279"},{"size":124,"mtime":1680362599416,"results":"336","hashOfConfig":"279"},{"size":16195,"mtime":1680887501016,"results":"337","hashOfConfig":"279"},{"size":124,"mtime":1680362603664,"results":"338","hashOfConfig":"279"},{"size":6256,"mtime":1680383957806,"results":"339","hashOfConfig":"279"},{"size":124,"mtime":1680362608500,"results":"340","hashOfConfig":"279"},{"size":17242,"mtime":1680441936210,"results":"341","hashOfConfig":"279"},{"size":124,"mtime":1680362619192,"results":"342","hashOfConfig":"279"},{"size":114,"mtime":1680526343183,"results":"343","hashOfConfig":"279"},{"size":13282,"mtime":1680530814187,"results":"344","hashOfConfig":"279"},{"size":119,"mtime":1680531260330,"results":"345","hashOfConfig":"279"},{"size":7991,"mtime":1680532018340,"results":"346","hashOfConfig":"279"},{"size":114,"mtime":1680466121333,"results":"347","hashOfConfig":"279"},{"size":10374,"mtime":1680529917941,"results":"348","hashOfConfig":"279"},{"size":114,"mtime":1680552582300,"results":"349","hashOfConfig":"279"},{"size":22189,"mtime":1680555357364,"results":"350","hashOfConfig":"279"},{"size":8303,"mtime":1680983895482,"results":"351","hashOfConfig":"279"},{"size":118,"mtime":1680960248084,"results":"352","hashOfConfig":"279"},{"size":7808,"mtime":1680986420944,"results":"353","hashOfConfig":"279"},{"size":118,"mtime":1680960242000,"results":"354","hashOfConfig":"279"},{"size":13367,"mtime":1680988063018,"results":"355","hashOfConfig":"279"},{"size":118,"mtime":1680960235567,"results":"356","hashOfConfig":"279"},{"size":13453,"mtime":1681066586368,"results":"357","hashOfConfig":"279"},{"size":118,"mtime":1680960227615,"results":"358","hashOfConfig":"279"},{"size":9725,"mtime":1681067210872,"results":"359","hashOfConfig":"279"},{"size":118,"mtime":1680960220707,"results":"360","hashOfConfig":"279"},{"size":18053,"mtime":1681068197613,"results":"361","hashOfConfig":"279"},{"size":118,"mtime":1680960194398,"results":"362","hashOfConfig":"279"},{"size":9323,"mtime":1681068621416,"results":"363","hashOfConfig":"279"},{"size":118,"mtime":1680960187417,"results":"364","hashOfConfig":"279"},{"size":10175,"mtime":1681069097378,"results":"365","hashOfConfig":"279"},{"size":118,"mtime":1680960180465,"results":"366","hashOfConfig":"279"},{"size":4932,"mtime":1681069475657,"results":"367","hashOfConfig":"279"},{"size":118,"mtime":1680960169301,"results":"368","hashOfConfig":"279"},{"size":14339,"mtime":1680958354879,"results":"369","hashOfConfig":"279"},{"size":117,"mtime":1680901949847,"results":"370","hashOfConfig":"279"},{"filePath":"371","messages":"372","suppressedMessages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9ypldk",{"filePath":"374","messages":"375","suppressedMessages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"377","messages":"378","suppressedMessages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"380"},{"filePath":"385","messages":"386","suppressedMessages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"388","messages":"389","suppressedMessages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"391","messages":"392","suppressedMessages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"394","messages":"395","suppressedMessages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"397","messages":"398","suppressedMessages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"400","messages":"401","suppressedMessages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"403","messages":"404","suppressedMessages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"406","messages":"407","suppressedMessages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"380"},{"filePath":"410","messages":"411","suppressedMessages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"413","messages":"414","suppressedMessages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"416","messages":"417","suppressedMessages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"419","messages":"420","suppressedMessages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"422","messages":"423","suppressedMessages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"425","messages":"426","suppressedMessages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"380"},{"filePath":"429","messages":"430","suppressedMessages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"380"},{"filePath":"433","messages":"434","suppressedMessages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"380"},{"filePath":"437","messages":"438","suppressedMessages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"380"},{"filePath":"441","messages":"442","suppressedMessages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"380"},{"filePath":"445","messages":"446","suppressedMessages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"380"},{"filePath":"449","messages":"450","suppressedMessages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"380"},{"filePath":"453","messages":"454","suppressedMessages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"380"},{"filePath":"457","messages":"458","suppressedMessages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"460","messages":"461","suppressedMessages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"380"},{"filePath":"464","messages":"465","suppressedMessages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"467","messages":"468","suppressedMessages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"470","messages":"471","suppressedMessages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"473","messages":"474","suppressedMessages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"476","messages":"477","suppressedMessages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"479","messages":"480","suppressedMessages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"482","messages":"483","suppressedMessages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"485","messages":"486","suppressedMessages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"488","messages":"489","suppressedMessages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"491","messages":"492","suppressedMessages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"494","messages":"495","suppressedMessages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497","usedDeprecatedRules":"380"},{"filePath":"498","messages":"499","suppressedMessages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"501","messages":"502","suppressedMessages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"504","messages":"505","suppressedMessages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"507","messages":"508","suppressedMessages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"510","messages":"511","suppressedMessages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"513","messages":"514","suppressedMessages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"516","messages":"517","suppressedMessages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"519","messages":"520","suppressedMessages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"380"},{"filePath":"523","messages":"524","suppressedMessages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"526","messages":"527","suppressedMessages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"529","usedDeprecatedRules":"380"},{"filePath":"530","messages":"531","suppressedMessages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"380"},{"filePath":"534","messages":"535","suppressedMessages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"537","usedDeprecatedRules":"380"},{"filePath":"538","messages":"539","suppressedMessages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"541","usedDeprecatedRules":"380"},{"filePath":"542","messages":"543","suppressedMessages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"545","messages":"546","suppressedMessages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"548","messages":"549","suppressedMessages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"551","usedDeprecatedRules":"380"},{"filePath":"552","messages":"553","suppressedMessages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"555","messages":"556","suppressedMessages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"558","messages":"559","suppressedMessages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"561","usedDeprecatedRules":"380"},{"filePath":"562","messages":"563","suppressedMessages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"565","messages":"566","suppressedMessages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"568","usedDeprecatedRules":"380"},{"filePath":"569","messages":"570","suppressedMessages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":4,"source":"572","usedDeprecatedRules":"380"},{"filePath":"573","messages":"574","suppressedMessages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"380"},{"filePath":"577","messages":"578","suppressedMessages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"580","usedDeprecatedRules":"380"},{"filePath":"581","messages":"582","suppressedMessages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"380"},{"filePath":"585","messages":"586","suppressedMessages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"588","usedDeprecatedRules":"380"},{"filePath":"589","messages":"590","suppressedMessages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592","usedDeprecatedRules":"380"},{"filePath":"593","messages":"594","suppressedMessages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"380"},{"filePath":"597","messages":"598","suppressedMessages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"380"},{"filePath":"601","messages":"602","suppressedMessages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604","usedDeprecatedRules":"380"},{"filePath":"605","messages":"606","suppressedMessages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"380"},{"filePath":"609","messages":"610","suppressedMessages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"612","messages":"613","suppressedMessages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"615","messages":"616","suppressedMessages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"618","usedDeprecatedRules":"380"},{"filePath":"619","messages":"620","suppressedMessages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"622","messages":"623","suppressedMessages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"625","messages":"626","suppressedMessages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"628","messages":"629","suppressedMessages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"631","usedDeprecatedRules":"380"},{"filePath":"632","messages":"633","suppressedMessages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"635","messages":"636","suppressedMessages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"638","usedDeprecatedRules":"380"},{"filePath":"639","messages":"640","suppressedMessages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"642","messages":"643","suppressedMessages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"645","usedDeprecatedRules":"380"},{"filePath":"646","messages":"647","suppressedMessages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"649","messages":"650","suppressedMessages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"380"},{"filePath":"653","messages":"654","suppressedMessages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"656","messages":"657","suppressedMessages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"659","messages":"660","suppressedMessages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"662","messages":"663","suppressedMessages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"380"},{"filePath":"666","messages":"667","suppressedMessages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"669","messages":"670","suppressedMessages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"672","messages":"673","suppressedMessages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"675","messages":"676","suppressedMessages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"380"},{"filePath":"678","messages":"679","suppressedMessages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"681","messages":"682","suppressedMessages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"684","messages":"685","suppressedMessages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fkvbhv",{"filePath":"687","messages":"688","suppressedMessages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690"},{"filePath":"691","messages":"692","suppressedMessages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"694","messages":"695","suppressedMessages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384"},{"filePath":"697","messages":"698","suppressedMessages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"700","messages":"701","suppressedMessages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"703","messages":"704","suppressedMessages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"706","messages":"707","suppressedMessages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"709","messages":"710","suppressedMessages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"712","messages":"713","suppressedMessages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"715","messages":"716","suppressedMessages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"718","messages":"719","suppressedMessages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428"},{"filePath":"721","messages":"722","suppressedMessages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724"},{"filePath":"725","messages":"726","suppressedMessages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463"},{"filePath":"728","messages":"729","suppressedMessages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432"},{"filePath":"731","messages":"732","suppressedMessages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436"},{"filePath":"734","messages":"735","suppressedMessages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440"},{"filePath":"737","messages":"738","suppressedMessages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444"},{"filePath":"740","messages":"741","suppressedMessages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448"},{"filePath":"743","messages":"744","suppressedMessages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452"},{"filePath":"746","messages":"747","suppressedMessages":"748","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456"},{"filePath":"749","messages":"750","suppressedMessages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"529"},{"filePath":"752","messages":"753","suppressedMessages":"754","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533"},{"filePath":"755","messages":"756","suppressedMessages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"537"},{"filePath":"758","messages":"759","suppressedMessages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"561"},{"filePath":"761","messages":"762","suppressedMessages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":4,"source":"572"},{"filePath":"764","messages":"765","suppressedMessages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576"},{"filePath":"767","messages":"768","suppressedMessages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"580"},{"filePath":"770","messages":"771","suppressedMessages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584"},{"filePath":"773","messages":"774","suppressedMessages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"588"},{"filePath":"776","messages":"777","suppressedMessages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592"},{"filePath":"779","messages":"780","suppressedMessages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596"},{"filePath":"782","messages":"783","suppressedMessages":"784","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600"},{"filePath":"785","messages":"786","suppressedMessages":"787","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604"},{"filePath":"788","messages":"789","suppressedMessages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608"},{"filePath":"791","messages":"792","suppressedMessages":"793","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"794","messages":"795","suppressedMessages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"797","messages":"798","suppressedMessages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"800","messages":"801","suppressedMessages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"803","messages":"804","suppressedMessages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409"},{"filePath":"806","messages":"807","suppressedMessages":"808","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"809","messages":"810","suppressedMessages":"811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"812","messages":"813","suppressedMessages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"815","messages":"816","suppressedMessages":"817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"818","messages":"819","suppressedMessages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"821","messages":"822","suppressedMessages":"823","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522"},{"filePath":"824","messages":"825","suppressedMessages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","suppressedMessages":"829","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"830","messages":"831","suppressedMessages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"833","messages":"834","suppressedMessages":"835","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"836","messages":"837","suppressedMessages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"839","messages":"840","suppressedMessages":"841","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"842","messages":"843","suppressedMessages":"844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"845","messages":"846","suppressedMessages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"848","messages":"849","suppressedMessages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"851","messages":"852","suppressedMessages":"853","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"854","messages":"855","suppressedMessages":"856","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497"},{"filePath":"857","messages":"858","suppressedMessages":"859","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"860","messages":"861","suppressedMessages":"862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"863","messages":"864","suppressedMessages":"865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"866","messages":"867","suppressedMessages":"868","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"869","messages":"870","suppressedMessages":"871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"872","messages":"873","suppressedMessages":"874","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"875","messages":"876","suppressedMessages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"878","messages":"879","suppressedMessages":"880","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"881","messages":"882","suppressedMessages":"883","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"551"},{"filePath":"884","messages":"885","suppressedMessages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"887","messages":"888","suppressedMessages":"889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"890","messages":"891","suppressedMessages":"892","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"893","messages":"894","suppressedMessages":"895","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"541"},{"filePath":"896","messages":"897","suppressedMessages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"899","messages":"900","suppressedMessages":"901","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"568"},{"filePath":"902","messages":"903","suppressedMessages":"904","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"618"},{"filePath":"905","messages":"906","suppressedMessages":"907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"908","messages":"909","suppressedMessages":"910","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"911","messages":"912","suppressedMessages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"914","messages":"915","suppressedMessages":"916","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"631"},{"filePath":"917","messages":"918","suppressedMessages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"920","messages":"921","suppressedMessages":"922","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"638"},{"filePath":"923","messages":"924","suppressedMessages":"925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"926","messages":"927","suppressedMessages":"928","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"645"},{"filePath":"929","messages":"930","suppressedMessages":"931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"932","messages":"933","suppressedMessages":"934","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652"},{"filePath":"935","messages":"936","suppressedMessages":"937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"938","messages":"939","suppressedMessages":"940","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"941","messages":"942","suppressedMessages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"944","messages":"945","suppressedMessages":"946","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665"},{"filePath":"947","messages":"948","suppressedMessages":"949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"950","messages":"951","suppressedMessages":"952","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"953","messages":"954","suppressedMessages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"956","messages":"957","suppressedMessages":"958","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"959","messages":"960","suppressedMessages":"961","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/artashes/Desktop/codeex/codeex/src/index.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/App.js",["962","963","964","965","966","967","968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983"],[],"/home/artashes/Desktop/codeex/codeex/src/reportWebVitals.js",[],[],[],"/home/artashes/Desktop/codeex/codeex/src/components/Wrapper.js",["984"],[],"import React from 'react';\nimport Header from './Header';\nimport Navigation from './Navigation';\nimport Features from '../components/Features';\n//import SubFooter from './SubFooter';\n\nimport { Outlet } from 'react-router-dom';\n\n\n\nfunction Wrapper(props) {\n   \n    return (\n        <div>  \n            <Navigation />\n            <Outlet/>\n            <Features />\n           {/* <Footer /> */}\n          {/* <SubFooter />*/}\n        </div>\n    );\n}\n\nexport default Wrapper; ","/home/artashes/Desktop/codeex/codeex/src/components/Header.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/Home.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/JavaScript.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/About.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/Html.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/ReactJS.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/components/AboutForm.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/components/Navigation.js",["985","986"],[],"import React from 'react'\nimport { NavLink } from 'react-router-dom';\n\n\n\nfunction Navigation() {\n  return (\n    <div>\n      <header id=\"header\" className=\"fixed-top\">\n        <div className=\"container d-flex align-items-center justify-content-between\">\n          <h1 className=\"logo\" style={{ position: 'fixed', top: 0, left: 0, padding: '20px' }}>\n            Codeex\n          </h1>\n          <nav id=\"navbar\" className=\"navbar\" style={{ position: 'fixed', top: '20px', right: 0, padding: '20px' }}>\n            <ul>\n              <li className=\"nav-item\">\n                <NavLink to='/'>\n                  Home\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink to='/about'>\n                  About US\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink to='/services'> \n                  Services\n                </NavLink>\n              </li>\n            </ul> \n          </nav>\n        </div>\n      </header>\n    </div>\n  )\n}\n\n\n\n\n\nexport default Navigation;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{/*\nfunction Navigation() {\n  return (\n    <div>\n      {/* <!-- ======= Header ======= -->  \n      <header id=\"header\" className=\"fixed-top\">\n        <div className=\"container d-flex align-items-center justify-content-between\">\n          <h1 className=\"logo\">Codeex</h1>\n          <nav id=\"navbar\" className=\"navbar\">\n            <ul>\n              <li className=\"nav-item\">\n                <NavLink to='/'>\n                  Home\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink to='/about'>\n                  About US\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink to='/services'> \n                  Services\n                </NavLink>\n              </li>\n              {/*<li className=\"nav-item\"><a className=\"nav-link\" href=\"#\">Sections</a></li>\n              <li className=\"nav-item\"><a className=\"nav-link\" href=\"#\">Blog</a></li>\n              <li className=\"nav-item\"><a className=\"nav-link\" href=\"#\">Contact</a></li>\n            </ul> \n          </nav>*/}\n          {/* <!-- .navbar -->  \n        </div>\n      </header>\n      {/* <!-- End Header --> \n  )\n}\n\n\n\n*/}\n","/home/artashes/Desktop/codeex/codeex/src/pages/NotFound.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/components/Courses.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/components/Banner.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/components/Features.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/JavaScript5.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/JavaScript6.js",["987","988"],[],"import React,{ useState } from 'react';\nimport AmEs6 from '../lang/AmEs6';\nimport RuEs6 from '../lang/RuEs6';\n\n function JavaScript6() {\n  \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  return (\n    \n    \n    <div className='java-script'>\n\n<div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div>\n\n       \n    <h1>JavaScript ES6 (ECMAScript 2015) is the sixth version of JavaScript that introduced new features and syntax improvements to the language. Here are some key features of ES6:</h1>\n    \n    <p>1 . <b>let </b>and <b>const</b>: These are new variable declarations that replace the old var keyword. They provide better scoping rules and help avoid common mistakes that can occur with <b>var</b>.</p>\n    \n    <p>2. Arrow functions: Arrow functions provide a shorter syntax for writing function expressions. They also bind the this value lexically, making it easier to reason about function scope.</p>\n    \n    <p>3. Template literals: This feature provides a way to embed expressions inside strings using backticks instead of quotes. It makes it easier to create strings with dynamic content.</p>\n    \n    <p>4. Spread operator: The spread operator is represented by three dots (...). It allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected.</p>\n    \n    <p>5. Destructuring: Destructuring provides a way to extract data from arrays and objects into separate variables using a shorthand syntax.</p>\n    \n    <p>6. Classes: ES6 introduced a new class syntax that provides a simpler and more intuitive way to create objects and define their behavior.</p>\n    \n    <p>7. Modules: Modules are a way to organize code into separate, self-contained files that can be easily imported and exported as needed. This allows for more efficient development and maintenance of large applications. ES6 introduced a standardized module syntax using the import and export keywords, making it easier to share and reuse code across multiple files and projects.</p>\n    \n    <p>8. Classes: ES6 introduced a new syntax for creating classes, which allows for object-oriented programming in JavaScript. Classes can be used to create objects with properties and methods, and can also inherit from other classes. This syntax makes it easier to write and maintain complex code, and can improve the readability and reusability of your code.</p>\n    \n    <p>9. Promises: Promises are a way to handle asynchronous operations in JavaScript. They provide a standardized way to handle the result of an asynchronous operation, either by resolving or rejecting a value. Promises can be chained together and combined with other features like async/await to create more complex and powerful asynchronous workflows.</p>\n    \n    <p>These are just a few of the many features introduced in ES6. Learning and using these features can greatly improve your JavaScript code and make your development process more efficient and effective.</p>\n    \n    <b>ES6 Variables</b>\n    \n    <p>{'const num = 10; '}</p>\n\n    <p>{'console.log(num);// 10'}</p>\n\n    <p>{'{'}</p>\n\n    <p>{'const num2 = 20;'}</p>\n\n    <p>{'console.log(num2); // 20 '}</p>\n\n    <p>{'}'}</p>\n\n    <p>{'// num2 is not defined'}</p>\n\n    <p>{'console.log(num); // 10'}</p>\n\n    <p>This code is using ES6 variables. The first line creates a constant variable named \"num\" and assigns the value 10 to it. The second line starts a block of code using curly braces, which is a new feature in ES6.</p>\n\n    <p>Inside this block, a new variable named \"num2\" is declared using the \"const\" keyword and assigned the value 20. This variable is only accessible inside the block because it was declared using the \"const\" keyword which creates a block-scoped variable. The third line outputs the value of \"num2\" to the console, which will be 20.</p>\n\n    <p>After the block, another console.log statement is called, but this time it outputs the value of the variable \"num\", which is outside of the block and therefore accessible. Finally, the code attempts to output the value of \"num2\", but since it was declared inside the block and is not accessible outside of it, an error will occur, saying that \"num2 is not defined\".</p>\n\n    <b>ES6 Variables</b>\n\n    <p>{'const name = \"Leo\";'}</p>\n\n    <p>{'const name = \"Kevin\"; //Identifier (name) has already been declared'}</p>\n\n    <p>{'const name = \"Leo\";'}</p>\n\n    <p>{'if (true) { '}</p>\n\n    <p>{'const name = \"Mike\";'}</p>\n\n    <p>{'console.log(name); // Mike'}</p>\n\n    <p>{'}'}</p>\n    \n    <p>{'console.log(name); // Leo'}</p>\n\n    <p>This code declares a constant variable \"name\" and then tries to declare it again with a different value, which results in an error \"Identifier 'name' has already been declared\".</p>\n    \n    <p>Then the code re-declares \"name\" as \"Leo\" and creates a block scope with an if statement. Inside the block, a new variable \"name\" is declared with the value \"Mike\", which is then printed to the console. Outside the block, the original variable \"name\" with the value \"Leo\" is still in scope and is printed to the console.</p>\n    \n    <p>So the output of this code is \"Identifier 'name' has already been declared\" followed by \"Mike\" and \"Leo\".</p>\n\n    <b>ES6 Variables</b>\n\n    <p>{'if (true) {'}</p>\n\n    <p>{'// Temporal Dead Zone'}</p>\n\n    <p>{'console.log(typeof value); //value is not defined'}</p>\n\n    <p>{'let value = 10;'}</p>\n\n    <p>{'} '}</p>\n\n    <p>{'console.log(typeof value); //undefined'}</p>\n\n    <p>\n    The <b>let</b> keyword is used to declare the variable <b>value</b> within the block. However, when <b>typeof value</b> is called within the block before the declaration of <b>value</b>, the JavaScript engine throws a ReferenceError because the variable is not defined yet. This is known as the Temporal Dead Zone, which refers to the period of time between the creation of a variable and its declaration where it cannot be accessed. The <b>console.log(typeof value)</b> statement outside of the block returns <b>undefined</b> because <b>value</b> is not defined in the current scope.     \n    </p>\n\n    <p>In the second block of code:</p>\n\n    <p>{'if(true) {'}</p>\n\n    <p>{'let value = 10;'}</p>\n\n    <p>{'}'}</p>\n\n    <p>The variable <b>value</b> is declared and assigned a value of <b>10 </b> within the block. However, because the block is not in the global scope and <b>value</b> is not returned or assigned to a variable in the outer scope, the value of <b>value </b> is effectively lost once the block finishes executing.</p>\n\n    <b>ES6 Variables</b> \n\n    <p>{'for(var i = 0; i < 5; i++) {'}</p>\n    \n    <p>{'// Code here'}</p>\n\n    <p>{'}'}</p>\n\n    <p>{'console.log(i); // 5 '}</p>\n\n\n    <p>{' for(let i = 0; i < 5; i++) {'}</p>\n\n    <p>{'// Code here'}</p>\n\n    <p>{' }'}</p>\n\n    <p>{'console.log(i); // i is not defined'}</p>\n\n    <p>\n    This code demonstrates the difference in variable scoping between using var and let in \n    a for loop. In the first example, the i variable is declared using var, which has function-level scope. \n    This means that the variable exists outside of the for loop, so the value of i is 5 when it is printed to the console.\n    </p>\n\n    <p>\n    In the second example, i is declared using let, which has block-level scope. This means that the variable only exists within the for loop block, so it is not accessible outside of the loop. Therefore, when i is printed to the console outside of the loop, \n    it throws a reference error saying that i is not defined. \n    </p>\n\n    <b>ES6 Spread Operator</b>\n\n    <p>\n    The spread operator is a new feature introduced in ES6 that allows you to spread or expand an iterable object into individual elements. This iterable object could be an array, a string, or any other iterable object.  \n    </p>\n\n    <b>\n    The spread operator is represented by three dots (...) and can be used in a variety of ways. Here are some examples:  \n    </b>\n\n    <p>1. Using spread operator to concatenate arrays:</p>\n\n    <p>{'const array1 = [1, 2, 3];'}</p>\n\n    <p>{'const array2 = [4, 5, 6];'}</p>\n\n    <p>{'const newArray = [...array1, ...array2];'}</p>\n\n    <p>{'console.log(newArray); // [1, 2, 3, 4, 5, 6]'}</p>\n\n    <p>2. Using spread operator to create a copy of an array:</p>\n\n    <p>{'const array1 = [1, 2, 3];'}</p>\n\n    <p>{'const array2 = [...array1];'}</p>\n\n    <p>{'console.log(array2); // [1, 2, 3]'}</p>\n\n    <p>3. Using spread operator to pass arguments to a function:</p>\n\n    <p>{'function sum(a, b, c) { '}</p>\n\n    <p>{' return a + b + c;'}</p>\n\n    <p>{'}'}</p>\n\n    <p>{'const numbers = [1, 2, 3];'}</p>\n\n    <p>{'const result = sum(...numbers);'}</p>\n\n    <p>{'console.log(result); // 6'}</p>\n\n    <p>4. Using spread operator to merge objects: </p>\n\n    <p>{'const object1 = { x: 1, y: 2 };'}</p>\n\n    <p>{'const object2 = { z: 3 };'}</p>\n\n    <p>{'const mergedObject = { ...object1, ...object2 };'}</p>\n\n    <p>{'console.log(mergedObject); // { x: 1, y: 2, z: 3 }'}</p>\n\n    <p>\n    In all of these examples, the spread operator is used to expand an iterable object into individual elements. \n    It's a useful feature that can simplify your code and make it more readable.  \n    </p>\n\n    <b>ES6 Destructuring</b>\n\n    <p>\n    ES6 destructuring is a way of extracting values from objects \n    or arrays and assigning them to variables in a more concise and readable way. \n    </p>\n\n    <p>For example, consider the following object:</p>\n\n    <p>{'const person = { '}</p>\n\n    <p>{`name: ' John Doe ' , `}</p>\n\n    <p>{' age: 30,'}</p>\n\n    <p>{` email: 'john.doe@example.com'`}</p>\n\n    <p>{'};'}</p>\n\n    <p>Instead of accessing each property individually like this:</p>\n\n    <p>{'const name = person.name;'}</p>\n\n    <p>{'const age = person.age;'}</p>\n\n    <p>{'const email = person.email;'}</p>\n\n    <p>You can use destructuring to assign each property to a variable in a more concise way:</p>\n    \n    <p>{'const { name, age, email } = person;'}</p>\n\n    <p>This creates three variables <b>(name, age, and email)</b> and assigns them the values of their corresponding properties in the person object.</p>\n\n    <p>You can also use destructuring with arrays. For example:</p>\n\n    <p>{'const numbers = [1, 2, 3, 4, 5];'}</p>\n\n    <p>{'const [first, second, ...rest] = numbers;'}</p>\n\n    <p>{'console.log(first); // 1'}</p>\n\n    <p>{'console.log(second); // 2'}</p>\n\n    <p>{'console.log(rest); // [3, 4, 5]'}</p>\n\n    <p>\n    This creates three variables <b>(first, second, and rest) </b>and assigns them the values of the first two \n    elements in the <b>numbers</b> array and the rest of the elements, respectively.  \n    </p>\n\n    <p>\n    Destructuring can also be used with nested objects and arrays, and can even have default values assigned to variables in case the value being destructured is undefined. \n    </p>\n    \n    <p>\n    Overall, destructuring is a powerful feature in ES6 that can help make your code more readable and concise.  \n    </p>\n\n    <b>ES6 Cycle (for - of)</b>\n\n    <p>ES6 introduced a new type of loop in JavaScript called the <b>for...of</b> loop. \n      This loop is used to iterate over elements of an iterable object like arrays, strings, maps, sets, etc.</p>\n    \n    <p>Here's an example of using the <b>for...of </b> loop to iterate over an array:</p>\n\n    <p>{'const arr = [1, 2, 3, 4, 5];'}</p>\n\n    <p>{'for(let num of arr) { '}</p>\n\n    <p>{'console.log(num);'}</p>\n\n    <p>{'} '}</p>\n    \n    <p>In this example, the <b>for...of</b> loop iterates over each element in the <b>arr</b> array and logs it to the console.</p>\n\n    <p>We can also use the <b>for...of</b> loop to iterate over the characters in a string:</p>\n\n    <p>{'const str = \"Hello, world!\";'}</p>\n\n    <p>{'for(let char of str) {'}</p>\n\n    <p>{'console.log(char);'}</p>\n\n    <p>{'}'}</p>\n\n    <p>In this example, the <b>for...of</b> loop iterates over each character in the <b>str</b> string and logs it to the console.</p>\n    \n    <p>We can also use the <b>for...of</b> loop to iterate over the keys or values of a Map object:</p>\n    \n    <p>{'const map = new Map(['}</p>\n\n    <p>{`['a', 1],`}</p>\n\n    <p>{`['b', 2],`}</p>\n\n    <p>{`['c', 3]`}</p>\n    \n    <p>{']);'}</p>\n\n\n    <p>{'for(let [key, value] of map) {'}</p>\n\n    <p>{'console.log(key, value);'}</p>\n\n    <p>{'}'}</p>\n\n    <p>In this example, the <b>for...of</b> loop iterates over each key-value pair in the <b>map</b> object and logs them to the console.</p>\n\n    <p>Overall, the <b>for...of</b> loop is a useful addition to the JavaScript language that simplifies iterating over iterable objects.</p>\n    \n    <b>ES6 function rest parameter</b>\n\n    <p>The ES6 function rest parameter is a feature that allows a function to accept an indefinite number of arguments as an array. It is denoted by three dots (...) followed by the name of the parameter.</p>\n    \n    <p>Here is an example of using the rest parameter:</p>\n\n    <p>{'function sum(...numbers) {'}</p>\n\n    <p>{'let result = 0;'}</p>\n\n    <p>{'for (let number of numbers) {'}</p>\n\n    <p>{' result += number;'}</p>\n\n    <p>{' }'}</p>\n\n    <p>{'return result;'}</p>\n\n    <p>{'}'}</p>\n\n    <p>{'console.log(sum(1, 2, 3)); // Output: 6'}</p>\n\n    <p>{'console.log(sum(4, 5, 6, 7)); // Output: 22'}</p>\n\n    <p>\n    In the above example, the function sum accepts an indefinite number of arguments using the rest parameter ...numbers. It then loops through the numbers array using a for...of loop to sum up the values and returns the result.  \n    </p>\n\n    <p>\n    The rest parameter is useful when you want to write a function that can handle a variable number of arguments without having to explicitly define each argument. It is commonly used in functions that manipulate arrays or perform mathematical operations on a set of values.  \n    </p>\n\n    <p>\n    Overall, the rest parameter is a convenient feature that makes it easier to write functions that are more flexible and versatile.  \n    </p>\n    \n    <b>Arrow functions </b>\n\n    <p>\n    Arrow functions are a concise way to write functions in JavaScript, introduced in ES6 (ECMAScript 2015). They provide a more compact syntax compared to traditional function expressions, making the code easier to read and write.  \n    </p>\n\n    <p>\n    Here is an example of a traditional function expression that takes two parameters and returns their sum:  \n    </p>\n    \n    <p>{'function sum(a, b) {'}</p>\n    \n    <p>{'return a + b;'}</p>\n\n    <p>{'}'}</p>\n\n    <p>The same function can be written using an arrow function in the following way:</p>\n\n    <p>{'const sum = (a, b) => a + b;'}</p>\n\n    <p>In this example, the function is defined using the arrow syntax <b>{'=>.'}</b> \n    The parameters <b>(a, b)</b> are enclosed in parentheses, followed by the arrow <b>{'=>'}</b> and the function body <b>a + b.</b> Since the function body is a single statement, the curly braces and <b>return</b> keyword can be omitted.\n    </p>\n\n    <p>\n    Arrow functions can also be used as anonymous functions, assigned to variables, and passed as arguments to other functions. Here is an example of an arrow function that takes an array and returns a new array with each element doubled:  \n    </p>\n\n    <p>{'const doubleArray = arr => arr.map(item => item * 2);'}</p>\n\n    <p>\n    In this example, the arrow function{' (item => item * 2)'} is passed as an argument to the <b>map()</b> method, which applies the function to each element of the array and returns a new array with the modified values.  \n    </p>\n\n    <p>\n    Arrow functions also have a lexical <b>this</b> binding, meaning that this refers to the value of <b>this</b> in the enclosing scope, rather than the function's own <b>this</b>. This makes arrow functions particularly useful for working with object methods and event handlers.  \n    </p>\n\n    <p>\n    Overall, arrow functions provide a more concise and readable way to write functions in JavaScript, making code easier to understand and maintain.  \n    </p>\n\n    <b>Prototype</b>\n\n    <p>\n    In JavaScript, every object has an internal property called [[Prototype]] (sometimes referred to as \"dunder proto\"), which refers to another object or null. This property is used to implement inheritance and to allow objects to inherit properties and methods from their prototypes.  \n    </p>\n\n    <p>\n    In ES5, you can create a prototype using constructor functions and the prototype property. Here is an example:  \n    </p>\n\n    <p>{'function Person(name, age) { '}</p>\n\n    <p>{'this.name = name;'}</p>\n\n    <p>{'this.age = age;'}</p>\n\n    <p>{'} '}</p>\n\n    <p>{'Person.prototype.greet = function() { '}</p>\n\n    <p>{'console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);'}</p>\n\n    <p>{'} '}</p>\n\n    <p>{'const john = new Person(\"John\", 30);'}</p>\n\n    <p>{'john.greet(); // \"Hello, my name is John and I am 30 years old.\"'}</p>\n\n    <p>In this example, we create a constructor function called <b>Person</b> that takes a <b>name</b> and an <b>age</b> as arguments and sets them as properties on the object. \n      We then add a <b>greet</b> method to the prototype of <b>Person </b>using the <b>Person.prototype</b> object. This method logs a greeting message to the console that includes \n      the person's name and age.</p>\n\n    <p>When we create a <b>new</b> object using the new keyword and the <b>Person</b> constructor, \n      the new object's [[Prototype]] property will point to the <b>Person.prototype</b> object. \n      This allows the new object to inherit the <b>greet</b> method from its prototype.</p>\n\n      <p>\n      In ES6, you can use the <b>class</b> syntax to define a class and its prototype. Here is the same example using ES6 classes:\n      </p>\n\n      <p>{'class Person { '}</p>\n\n      <p>{'constructor(name, age) {'}</p>\n\n      <p>{'this.name = name;'}</p>\n\n      <p>{'this.age = age;'}</p>\n\n      <p>{'}'}</p>\n\n      <p>{'greet() { '}</p>\n\n      <p>{'console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);'}</p>\n\n      <p>{'  }'}</p>\n\n      <p>{'}'}</p>\n\n      <p>{`const john = new Person(\"John\", 30);`}</p>\n\n      <p>{`john.greet(); // \"Hello, my name is John and I am 30 years old.\"`}</p>\n\n      <p>\n      In this example, we define a class called <b>Person</b> with a constructor that takes a <b>name </b>and an <b>age</b> and sets them as properties on the object. We then define a <b>greet</b> method directly on the class. Under the hood, the <b>class</b> syntax creates a constructor function and sets its prototype to the class's prototype.  \n      </p>\n\n      <p>\n      Both ES5 and ES6 use the concept of prototypes to implement inheritance in JavaScript, but the syntax for defining prototypes is different. ES6 classes provide a more concise and intuitive syntax for creating classes and defining their prototypes, while ES5 prototypes provide more flexibility and control over how prototypes are defined.   \n      </p>\n\n      <b> Class (static methods)</b>\n\n      <p>\n      In ES6, classes were introduced as a way to create object blueprints. Classes are a template for creating objects that encapsulate data and functionality. One feature of classes is the ability to define static methods, which are methods that are called on the class itself rather than on an instance of the class.\n      </p>\n\n      <p>\n      A static method is a method that belongs to the class itself, rather than to any instance of the class. It can be called on the class without having to create an instance of the class first.    \n      </p>\n\n      <p>\n      Here's an example of a class with a static method:  \n      </p>\n\n      <p>{'class Car {'}</p>\n\n      <p>{'constructor(make, model) {'}</p>\n\n      <p>{'this.make = make;'}</p>\n\n      <p>{'this.model = model;'}</p>\n\n      <p>{'}'}</p>\n\n      <p>{'static compare(car1, car2) {'}</p>\n\n      <p>{'if (car1.make === car2.make) {'}</p>\n\n      <p>{' return \"Same make\";'}</p>\n      \n      <p>{' } else {'}</p>\n\n      <p>{'return \"Different make\";'}</p>\n\n      <p>  {' }'}</p>\n\n      <p>{' }'}</p>\n\n      <p>{' }'}</p>\n\n      <p>{'let car1 = new Car(\"Honda\", \"Civic\");'}</p>\n\n      <p>{'let car2 = new Car(\"Toyota\", \"Corolla\");'}</p>\n\n      <p>{'console.log(Car.compare(car1, car2)); // \"Different make\"'}</p>\n\n      <p>\n      In the example above, the Car class has a static method called compare. This method takes two Car objects as parameters and returns a string indicating whether they have the same make or not. The compare method can be called on the Car class itself, rather than on an instance of the class.  \n      </p>\n\n      <p>\n      Note that in the compare method, the this keyword is not used, since the method is not called on an instance of the class. Instead, the method takes two Car objects as parameters and compares their make properties.  \n      </p>\n\n      <p>\n      In ES5, static methods can be defined on a constructor function using the constructor function's prototype property. Here's an example of how the above ES6 class might look in ES5:  \n      </p>\n\n      <p>{'function Car(make, model) {'}</p>\n\n      <p>{'this.make = make;'}</p>\n\n      <p>{'this.model = model;'}</p>\n\n      <p>{'} '}</p>\n\n      <p>{'Car.compare = function(car1, car2) {'}</p>\n\n      <p>{'if (car1.make === car2.make) {  '}</p>\n\n      <p>{'return \"Same make\"; '}</p>\n\n      <p>{'} else { '}</p>\n\n      <p>{' return \"Different make\";'}</p>\n\n      <p>{'}'}</p>\n\n      <p>{'}; '}</p>\n\n      <p>{'let car1 = new Car(\"Honda\", \"Civic\"); '}</p>\n\n      <p>{'let car2 = new Car(\"Toyota\", \"Corolla\");'}</p>\n\n      <p>{'console.log(Car.compare(car1, car2)); // \"Different make\"'}</p>\n\n      <p>\n      In the ES5 example, the compare method is defined directly on the Car constructor function, rather than on its prototype property. This allows the method to be called on the Car constructor function itself.  \n      </p>\n\n      <b>Symbol</b>\n\n      <p>\n      In ES6, Symbol is a new primitive data type that represents a unique identifier. Unlike strings or numbers, symbols are guaranteed to be unique and immutable, which makes them useful for creating object keys or properties that are meant to be completely unique.  \n      </p>\n\n      <p>To create a symbol, you can use the <b>Symbol()</b> function, like this:</p>\n\n      <p>{'const mySymbol = Symbol();'}</p>\n\n      <p>You can also add a description to a symbol to make it easier to identify it later on, like this:</p>\n\n      <p>{\"const mySymbol = Symbol('My Symbol'); \"}</p>\n\n      <p>Symbols can be used as object keys or properties, like this:</p>\n\n      <p>{\"const mySymbol = Symbol('My Symbol'); \"}</p>\n\n      <p>{'const obj = {}; '}</p>\n\n      <p>{\"obj[mySymbol] = 'Hello, World!'; \"}</p>\n\n      <p>{\"console.log(obj[mySymbol]); // Output: Hello, World! \"}</p>\n\n      <p>\n      One of the main benefits of using symbols is that they cannot be accessed or modified accidentally, because they are unique and cannot be replicated. This makes them ideal for creating private or internal properties in objects.   \n      </p>\n      <p>\n      Another benefit of symbols is that they can be used to define well-known symbols, which are built-in symbols that have a specific meaning or behavior in the language. For example, the Symbol.iterator symbol is used to define the default iterator for an object.   \n      </p>\n      \n      <p>\n      Overall, symbols provide a powerful and flexible way to create unique identifiers and define custom behavior for objects in JavaScript.   \n      </p>\n\n      <b>Promise</b>\n\n      <p>A Promise is a feature introduced in ES6 that \n      allows you to handle asynchronous operations more easily and in a more organized way.\n      </p>\n\n      <p>\n      In simple terms, a Promise is an object that represents a value that might not be available yet, but will be at some point in the future. It provides a way to handle the results of asynchronous operations (such as API requests or database queries) without blocking the main thread of execution  \n      </p>\n\n      <p>\n      A Promise has three states: pending, fulfilled, or rejected. When a Promise is pending, it means that the operation it represents hasn't completed yet. When a Promise is fulfilled, it means that the operation was successful and the result is available. When a Promise is rejected, it means that the operation failed and an error is available.  \n      </p>\n\n      <p>\n      Here is an example of how to use a Promise to fetch data from an API:   \n      </p>\n\n      <p>{\"fetch('https://jsonplaceholder.typicode.com/todos/1')\"}</p>\n\n      <p>{'.then(response => response.json())'}</p>\n\n      <p>{'.then(data => console.log(data))'}</p>\n\n      <p>{'.catch(error => console.error(error))'}</p>\n\n      <p>\n      In this example, <b>fetch</b> is a function that returns a Promise that resolves with the response from the API. The <b>then</b> method is called on the Promise, \n      which takes a callback function that is executed when the Promise is fulfilled. The first <b>then</b> callback parses the response as JSON and returns it. \n      The second then callback logs the parsed data to the console. The <b>catch</b> method is called to handle any errors that occur during the operation.   \n      </p>\n\n      <p>Promises can also be created manually using the <b>Promise</b> constructor:</p>\n\n      <p>{\"const promise = new Promise((resolve, reject) => { \"}</p>\n\n      <p>{\"setTimeout(() => { \"}</p>\n\n      <p>{\" resolve('Success!') \"}</p>\n\n      <p>{\" }, 1000) \"}</p>\n\n      <p>{\"}) \"}</p>\n\n      <p>{\" promise.then(result => console.log(result)) // Output: Success! \"}</p>\n\n      <p>\n      In this example, the Promise is created with a function that takes two parameters: <b>resolve and reject.</b> The <b>resolve</b> function is called after one second with the argument <b>'Success!'</b>. The <b>then</b> method is called on the Promise, which takes a callback function that is executed when the Promise is fulfilled. The callback logs the result to the console.  \n      </p>\n\n      </div>\n      )}\n      {language === 'ru' && (\n        <div>\n          <RuEs6 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmEs6 />\n        </div>\n      )}\n    </div>\n  )\n}\n\n\n\nexport default JavaScript6;","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_3.js",["989","990"],[],"import React,{useState} from 'react';\nimport RuEs5_3 from '../lang/RuEs5_3';\nimport AmEs5_3 from '../lang/AmEs5_3';\n\n function JsEs5_3() {\n \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n \n \n  return (\n    <div className='java-script'>\n      <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div>\n\n      <h3>Function Concept</h3>\n      <p>\n      A function is a block of code that can be defined and executed at a later time. It is used to perform a specific task, and \n      it can be called from any part of the program where it is accessible. Functions make the code more organized, reusable and \n      easier to understand.\n      </p>\n      <h3>Creating a Function</h3>\n      <p>\n      In JavaScript ES5, a function can be created using the function keyword, \n      followed by the function name, and a set of parentheses. Inside the parentheses, we can define one or more parameters, and inside the curly braces, we define the code to be executed when the function is called.\n      </p>\n      <b>Example:</b>\n      <pre>\n  <code>\n    {'   function sum(a, b) {\\n    return a + b;\\n  }'}\n  </code>\n</pre>\n<b>Function Arguments:</b>\n<p>\nFunction arguments are the values that are passed to a function when it is called. We can define one or more parameters inside the parentheses when creating a function. When the function is called, we pass the actual values as arguments.\n</p>\n<b>Example:</b>\n<pre>\n  <code>\n    {'  function sum(a, b) {\\n    return a + b;\\n  }\\n  var result = sum(5, 10);\\n  // Output: 15'}\n  </code>\n</pre>\n<b>Variable scopes:</b>\n<p>Variables can have different scopes depending on where they are declared. Here's an example of a variable declared \n  inside a function, which is not accessible outside of that function:</p>\n  <b>Example:</b>\n  \n  <p>{\"function showMessage() { \"}</p>\n\n  <p>{\" var message = 'Hello, World!' ;\"}</p>\n\n  <p>{\"console.log(message); \"}</p>\n\n  <p>{\"} \"}</p>\n\n  <p>{\" showMessage(); //Output:Hello,World! \"}</p>\n\n  <p>{\" console.log(message); //Output:Uncaught ReferenceError: message is not defined \"}</p>\n\n<b>Function expressions:</b>\n<p>A function expression is a function that is assigned to a variable. Here's an example:</p>\n \n  <code>\n    {' var multiply = function(a, b) {\\n  return a * b;\\n};\\n\\nvar result = multiply(3, 4);\\nconsole.log(result); // Output: 12'}\n  </code>\n \n<b>Anonymous functions:</b>\n<p>An anonymous function is a function without a name. Here's an example of an anonymous function that is immediately \n  invoked:</p>\n  \n  <code>\n    {'(function() {\\n  console.log(\\'Hello, World!\\');\\n})();'}\n  </code>\n\n<b>Closures</b>\n<p>Closures are a feature of JavaScript that allows a function to access and manipulate variables that are outside of its own scope. In other words, a closure is formed when a function is defined inside another function and has access to the parent function's variables.\n\nHere's an example of a closure in JavaScript ES5:</p>\n \n  <code>\n    {'function outerFunction() {\\n  var outerVariable = \"I am outside!\";\\n\\n  function innerFunction() {\\n    console.log(outerVariable);\\n  }\\n\\n  return innerFunction;\\n}\\n\\nvar closureExample = outerFunction();\\nclosureExample(); // Output: \"I am outside!\"'}\n  </code>\n \n<p>\nIn this example, the outerFunction defines a variable outerVariable and a function innerFunction that logs the value of outerVariable. The innerFunction is returned from outerFunction and assigned to the closureExample variable.\n\nWhen closureExample() is called, it logs the value of outerVariable, which is \"I am outside!\". This is possible because innerFunction has access to outerVariable through closure, even though outerVariable is not defined within innerFunction.\n\nThis is just a simple example of closures in JavaScript ES5, but it demonstrates how powerful and useful they can be. Closures are often used to create private variables and methods in JavaScript, among other things.\n</p>\n</div>\n      )}\n      {language === 'ru' && (\n        <div>\n          <RuEs5_3 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmEs5_3 />\n        </div>\n      )}\n    </div>\n  )\n}\n\n\n\nexport default JsEs5_3;","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_4.js",["991","992"],[],"import React,{useState} from 'react';\nimport RuEs5_4 from '../lang/RuEs5_4';\nimport AmEs5_4 from '../lang/AmEs5_4';\n\n function JsEs5_4() {\n  \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n  \n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  return (\n    <div className='java-script'>\n      <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div>\n     \n      <h3>Recursion </h3>\n\n      <p>\n      Recursion is a programming technique where a function calls itself until it reaches a base case. It is often used to solve problems that can be broken down into smaller, similar sub-problems.\n\n      In JavaScript ES5, recursion can be used to traverse through a tree or a nested structure, to perform certain calculations or to generate all possible combinations of a set of elements.\n\n      Here's an example of a function that uses recursion to calculate the factorial of a given number:\n      </p>\n    \n  <code>\n    {'function factorial(num) {\\n  if (num <= 1) {\\n    return 1;\\n  } else {\\n    return num * factorial(num - 1);\\n  }\\n}\\n\\nconsole.log(factorial(5)); // Output: 120'}\n  </code>\n \n \n<p>In this example, the factorial() function calls itself with a smaller</p>\n<p>number until it reaches the base case of  {'num <='} , at which point it</p>\n<p>returns 1. The final result is calculated by multiplying all the returned values together. </p> \n  \n<p>\nIt's important to note that recursion can be memory-intensive, especially for large inputs, so it's important to design your recursive functions carefully and ensure they have a base case to prevent infinite loops.\n</p>\n<b>Example</b>\n \n  <code>\n    {'function factorial(num) {\\n  if (num === 0 || num === 1) {\\n    return 1;\\n  } else {\\n    return num * factorial(num - 1);\\n  }\\n}\\n\\nvar result = factorial(5);\\nconsole.log(result); // Output: 120'}\n  </code>\n \n<p>\nIn the updated example, we've defined a function factorial that takes a single parameter num. The function first checks if the given number is 0 or 1, in which case it immediately returns 1. Otherwise, it calculates the factorial of the number recursively by calling the same function factorial with a decremented value of num and multiplying it with the current value of num.\n\nWhen we call the factorial function with the argument 5, it recursively calculates the factorial by calling itself with decreasing values until it reaches the base case of num === 1, at which point it returns 1 and the recursion unwinds, returning the final result of 5 * 4 * 3 * 2 * 1 = 120.\n</p>\n<h3>Object</h3>\n<p>\nAn object is a data structure in JavaScript that allows you to store collections of related data and functionality. It is a key concept in JavaScript and is used extensively throughout the language. Objects are defined using curly braces {} and consist of key-value pairs, where the key is a string and the value can be any data type, including other objects or functions.\n\nObjects are used in JavaScript for a wide variety of purposes, including creating complex data structures, organizing code, and providing a way to encapsulate related data and behavior. They are an important part of object-oriented programming in JavaScript and are a fundamental building block for many of the language's advanced features and libraries\n</p>\n<b>Explame</b>\n \n  <code>\n    {'// Creating an object\\nvar car = {\\n  make: \"Toyota\",\\n  model: \"Camry\",\\n  year: 2021,\\n  start: function() {\\n    console.log(\"Starting the car...\");\\n  }\\n};\\n\\n// Accessing object properties\\nconsole.log(car.make); // Toyota\\nconsole.log(car.year); // 2021\\n\\n// Invoking object methods\\ncar.start(); // Starting the car...'}\n  </code>\n \n<b>Properties of an object</b>\n \n  <code>\n    {'var person = {\\n  name: \"John\",\\n  age: 30,\\n  gender: \"male\"\\n};\\n\\nperson.email = \"john@example.com\";\\n\\nconsole.log(person.name); // John\\nconsole.log(person.email); // john@example.com'}\n  </code>\n \n<b>Methods of an object</b>\n \n  <code>\n    {'var calculator = {\\n  add: function(a, b) {\\n    return a + b;\\n  },\\n  subtract: function(a, b) {\\n    return a - b;\\n  }\\n};\\n\\nconsole.log(calculator.add(5, 3)); // 8\\nconsole.log(calculator.subtract(5, 3)); // 2'}\n  </code>\n \n<b>Object-oriented type - array</b>\n \n  <code>\n    {'// Creating an array\\nvar colors = [\"red\", \"green\", \"blue\"];\\n\\n// Accessing array elements\\nconsole.log(colors[0]); // red\\nconsole.log(colors[2]); // blue\\n\\n// Adding a new element to the array\\ncolors.push(\"yellow\");\\n\\n// Looping through the array\\nfor(var i = 0; i < colors.length; i++) {\\n  console.log(colors[i]);\\n}'}\n  </code>\n \n<b>Properties and methods of a function</b>\n\n<p>{'function greeting(name) {'}</p>\n\n<p>{'console.log(\"Hello \" + name);'}</p>\n\n<p>{'}'}</p>\n\n<p>{'console.log(greeting.length); // 1 (the number of expected arguments)'}</p>\n\n<p>{'// Adding a new property to the function'}</p>\n\n<p>{'greeting.language = \"English\";'}</p>\n\n<p>{'// Accessing function properties'}</p>\n\n<p>{'console.log(greeting.language); // English'}</p>\n\n<p>{'// Invoking function\\ngreeting(\"John\"); // Hello John'}</p>\n\n\n<h3>this</h3>\n\n<p>\nIn JavaScript ES5, this is a keyword that refers to the current object or context in which the code is being executed. It can refer to different objects depending on how and where it is used.\n\nWhen this is used inside a function that is called as a method of an object, it refers to the object itself. For example:\n</p>\n<p>{'var myObject = {'}</p>\n\n<p>{'name: \"John\",'}</p>\n\n<p>{'sayHello: function() {'}</p>\n\n<p>{'console.log(\"Hello, my name is \" + this.name);'}</p>\n\n<p>{' }'}</p>\n\n<p>{'};'}</p>\n\n<p>{'myObject.sayHello(); // Output: \"Hello, my name is John\"'}</p>\n\n<p>\nIn this example, this refers to the myObject object because sayHello() is being called as a method of myObject.\n</p>\n<p>\nHowever, when this is used inside a regular function (i.e. not called as a method of an object), it refers to the global object (window in the browser or global in Node.js) by default. For example:\n</p>\n\n<p>{'function sayHello() {'}</p>\n\n<p>{'console.log(\"Hello, my name is \" + this.name);'}</p>\n\n<p>{'}'}</p>\n\n<p>{'var name = \"John\";'}</p>\n\n<p>{'sayHello(); // Output: \"Hello, my name is undefined\"'}</p>\n\n<p>\nIn this case, this refers to the global object because sayHello() is not being called as a method of an object. Since the global object does not have a name property, this.name is undefined.\n\nIt's important to note that the value of this can be explicitly set using methods like call(), apply(), and bind(). These methods allow you to call a function with a specific this value, regardless of how it is being called.\n</p>\n<h3>Function as an object</h3>\n\n<p>{'var user = {'}</p>\n\n<p>{'name: \"John\",'}</p>\n\n<p>{'age: 20'}</p>\n\n<p>{'};'}</p>\n\n<p>{'function foo(a, b) {'}</p>\n\n<p>{'console.log(this.name);'}</p>\n\n<p>{'console.log(a + b);'}</p>\n\n<p>{'}'}</p>\n\n<p>{'//Using the call method to set \\'this\\' to the user object foo.call(user, 3, 5);'}</p>\n\n<p>{'// Accessing the length property of the function\\nconsole.log(foo.length);'}</p>\n\n<h3>Object arguments</h3>\n<p>arguments object is a local variable that's available within all functions. It contains an array-like list of the arguments passed to the function.\n\nHere's an example of how to use the arguments object:</p>\n \n  <code>\n    {'function sum() {\\n  var result = 0;\\n  for (var i = 0; i < arguments.length; i++) {\\n    result += arguments[i];\\n  }\\n  return result;\\n}\\n\\nvar total = sum(1, 2, 3, 4);\\nconsole.log(total); // Output: 10'}\n  </code>\n \n<p>\nIn the example above, the sum function accepts any number of arguments, and the arguments object is used to loop through each argument and add them together. The function then returns the total sum.\n</p>\n<p>Another example of using the arguments object is to create a function that concatenates all the arguments passed in</p>\n\n<p>{'function concatenate() {'}</p>\n\n<p>{' var result = \" \";'}</p>\n\n<p>{'for (var i = 0; i < arguments.length; i++) {'}</p>\n\n<p>{'result += arguments[i];'}</p>\n\n<p>{'}'}</p>\n\n<p>{'return result;'}</p>\n\n<p>{'}'}</p>\n\n<p>{'var str = concatenate(\"Hello\", \" \", \"world\", \"!\");'}</p>\n\n<p>{'console.log(str); // Output: \"Hello world!\"'}</p>\n\n<p>\nIn this example, the concatenate function accepts any number of arguments and concatenates them together into a single string, which is returned.\n</p>\n</div>\n      )}\n       {language === 'ru' && (\n        <div>\n          <RuEs5_4 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmEs5_4 />\n        </div>\n      )}\n    </div>\n  )\n}\n\n\n\nexport default JsEs5_4;","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_5.js",["993","994"],[],"import React , {useState }from 'react';\nimport RuEs5_5 from '../lang/RuEs5_5';\nimport AmEs5_5 from '../lang/AmEs5_5';\n\n function JsEs5_5() {\n \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n \n \n \n  return (\n    <div className='java-script'>\n     \n     <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div>\n     \n      <h1>Array</h1>\n      \n      <p>\n        In JavaScript, an array is a data structure that allows you to store multiple values in a single variable. An array is declared using square brackets, \n        and its elements are separated by commas.\n      </p>\n      \n      <b>Example</b>\n     \n  <code>\n    {' // An array of numbers\\nvar numbers = [1, 2, 3, 4, 5];\\n\\n// An array of strings\\nvar fruits = [\"apple\", \"banana\", \"orange\"];'}\n  </code>\n \n\n<b>Array Length</b>\n\n<p>The length property of an array returns the number of elements in the array.</p>\n\n<b>Example</b>\n \n  <code>\n    {'var numbers = [1, 2, 3, 4, 5];\\nconsole.log(numbers.length); // Output: 5'}\n  </code>\n \n\n<b>Array Methods</b>\n\n<p>Arrays in JavaScript have built-in methods that can be used to manipulate the array data. Some commonly used array methods are:\n\n</p>\n\n<div>\n\n<b>push(): adds one or more elements to the end of an array</b><br/>\n\n<b>pop(): removes the last element from an array</b><br/>\n\n<b>shift(): removes the first element from an array</b><br/>\n\n<b>unshift(): adds one or more elements to the beginning of an array</b><br/>\n\n<b>splice(): adds or removes elements from an array at a specified index</b><br/>\n\n<b>slice(): returns a new array that contains a portion of an existing array</b><br/>\n\n<b>join(): joins all elements of an array into a string</b><br/>\n\n<b>concat(): concatenates two or more arrays</b> \n\n</div>\n\n<b>Example:</b>\n\n<p>{'var numbers = [1, 2, 3, 4, 5];'}</p>\n\n<p>{'numbers.push(6); // adds 6 to the end of the array'}</p>\n\n<p>{'console.log(numbers); // Output: [1, 2, 3, 4, 5, 6]'}</p>\n\n<hr/>\n\n<p>{'var fruits = [\"apple\", \"banana\", \"orange\"];'}</p>\n\n<p>{'fruits.pop(); // removes the last element from the array'}</p>\n\n<p>{'console.log(fruits); // Output: [\"apple\", \"banana\"]'}</p>\n\n<hr />\n\n<p>{'var colors = [\"red\", \"green\", \"blue\"];'}</p>\n\n<p>{'colors.shift(); // removes the first element from the array'}</p>\n\n<p>{'console.log(colors); // Output: [\"green\", \"blue\"]'}</p>\n\n<hr/>\n\n<p>{'var cars =[\"BMW\",\"Audi\",\"Mercedes\"];'}</p>\n\n<p>{'cars.unshift(\"Toyota\",\"Honda\"); //adds two elements to the beginning of the array'}</p>\n\n<p>{'console.log(cars);//Output:[\"Toyota\",\"Honda\",\"BMW\",\"Audi\",\"Mercedes\"]'}</p>\n\n<hr/>\n\n<p>{'var animals = [\"dog\",\"cat\",\"elephant\",\"lion\"];'}</p>\n\n<p>{'animals.splice(2,0,\"bear\",\"zebra\"); // adds\"bear\"and\"zebra\" at index 2'}</p>\n\n<p>{'console.log(animals); // Output:[\"dog\",\"cat\",\"bear\",\"zebra\",\"elephant\",\"lion\"]'}</p>\n\n<hr/>\n\n<p>{'var letters = [\"a\", \"b\", \"c\", \"d\", \"e\"];'}</p>\n\n<p>{'var slice1 = letters.slice(0, 2); // returns [\"a\", \"b\"]'}</p>\n\n<p>{'var slice2 = letters.slice(2); // returns [\"c\", \"d\", \"e\"]'}</p>\n\n<p>{'console.log(slice1);'}</p>\n\n<p>{'console.log(slice2);'}</p>\n\n<hr/>\n\n<p>{'var fruits = [\"apple\", \"banana\", \"orange\"];'}</p>\n\n<p>{'var fruitString = fruits.join(\",\"); // joins array elements with a comma'}</p>\n\n<p>{'console.log(fruitString); // Output: \"apple,banana,orange\"'}</p>\n\n<hr />\n\n<p>{'var nums1 = [1, 2, 3];'}</p>\n\n<p>{'var nums2 = [4, 5, 6];'}</p>\n\n<p>{'var nums3 = nums1.concat(nums2); // concatenates nums1 and nums2'}</p>\n\n<p>{'console.log(nums3); // Output: [1, 2, 3, 4, 5, 6]'}</p>\n\n\n<b>Array Methods | Combining Arrays</b>\n\n<p>\nYou can combine two or more arrays in JavaScript using the concat() method. This method returns a new array that contains all the elements of the original arrays\n</p>\n\n<h3>forEach and map </h3>\n\n<b>\nforEach is used to iterate over each element of an array and perform a function on each element. It takes a function as an argument and passes each element of the array as an argument to that function.\n</b>\n<p>Here is an example of using forEach to print out each element of an array:</p>\n \n  <code>\n    {'var arr = [1, 2, 3, 4, 5];\\n\\narr.forEach(function(element) {\\n  console.log(element);\\n});'}\n  </code>\n \n<p>This will print out:</p>\n\n<p>1<br/> 2 <br/>3<br/>4<br/> 5</p>\n\n<p>\nmap, on the other hand, is used to create a new array with the results of calling a function on each element in the original array. It also takes a function as an argument and passes each element of the array as an argument to that function. The function should \nreturn a new value to be added to the new array.\n</p>\n<p>\nHere is an example of using map to create a new array with each element of the original array doubled:\n</p>\n <p>{'var arr = [1, 2, 3, 4, 5];'}</p>\n\n <p>{'var doubledArr = arr.map(function(element) {'}</p>\n\n  <p>{' return element * 2;'}</p>\n\n  <p>{'});'}</p>\n\n  <p>{'console.log(doubledArr);'}</p>\n   \n<p>This will print out</p>\n\n<p>[2, 4, 6, 8, 10 ]</p>\n\n<p>\nIn summary, forEach is used to perform an operation on each element of an array, while map is used to create a new array with the results of calling a function on each element of the original array\n</p>\n\n<h3>apply method</h3>\n\n<p>\nIn JavaScript, the apply() method is used to call a function with a given this value and arguments provided as an array (or an array-like object).\n</p>\n\n<p>The syntax for using the apply() method is:</p>\n \n  <p>{'functionName.apply(thisValue, [argumentsArray]) '}</p>\n \n<b>Where</b>\n\n<p>functionName is the name of the function that you want to call.</p>\n\n<p>thisValue is the value that you want to use as the this value inside the function. This parameter is optional. If you omit it, the global object will be used.</p>\n\n<p>argumentsArray is an array or an array-like object that contains the arguments that you want to pass to the function. This parameter is also optional. If you don't need to pass any arguments, you can omit it.</p>\n\n<p>Here's an example of using the apply() method with an array:</p>\n    \n  <code>\n    {'var numbers = [1, 2, 3, 4, 5];\\n\\nfunction sumArray() {\\n  var sum = 0;\\n  for (var i = 0; i < this.length; i++) {\\n    sum += this[i];\\n  }\\n  return sum;\\n}\\n\\nvar result = sumArray.apply(numbers);\\nconsole.log(result); // Output: 15'}\n  </code>\n \n<p>In this example, we have an array of numbers and a function sumArray() that calculates the sum of all the elements in an array. We call the apply() method on the sumArray() function with the numbers array as the this value. The apply() method passes the array as the this value and the sumArray() function calculates \n  the sum of all the elements in the array and returns it.</p>\n  <p>\n  Note that the apply() method is similar to the call() method. The only difference is that the call() method accepts the arguments as a comma-separated list, while the apply() method accepts the arguments as an array.\n  </p>\n  <h3>Self-Invoking Function</h3>\n  <p>\n  A self-invoking function is a JavaScript function that runs automatically when it's defined. It's also known as an immediately invoked function expression (IIFE). This function is wrapped in parentheses and then immediately called using the opening and closing parentheses.\n  </p>\n  <p>Here's an example of a self-invoking function:</p>\n \n  <code>\n    {'(function() {\\n  console.log(\"Hello, World!\");\\n})();'}\n  </code>\n \n<p>\nIn this example, the function is defined and then immediately called using the opening and closing parentheses. This will output \"Hello, World!\" to the console.\n</p>\n<p>\nSelf-invoking functions are commonly used to create a private scope in which variables and functions can be defined without polluting the global namespace. Here's an example:\n</p>\n \n  <code>\n    {'(function() {\\n  var x = 10;\\n  \\n  function foo() {\\n    console.log(x);\\n  }\\n  \\n  foo(); // Outputs 10\\n})();'}\n  </code>\n \n<p>\nIn this example, the variables x and the function foo are defined inside the self-invoking function. They are not accessible from outside the function, which helps to prevent naming conflicts with other code.\n</p>\n<p>\nSelf-invoking functions can also take arguments, like regular functions. Here's an example:\n</p>\n \n  <code>\n    {'(function(x, y) {\\n  console.log(x + y);\\n})(10, 20); // Outputs 30'}\n  </code>\n \n<p>\nIn this example, the self-invoking function takes two arguments (x and y) and outputs their sum to the console.\n</p>\n<p>\nSelf-invoking functions are a powerful tool in JavaScript for creating private scopes, preventing naming conflicts, and managing global variables.\n</p>\n</div>\n      )}\n       {language === 'ru' && (\n        <div>\n          <RuEs5_5 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmEs5_5 />\n        </div>\n      )}\n    </div>\n\n  )\n}\n\n\n\nexport default JsEs5_5;","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_6.js",["995","996","997","998"],[],"import React,{ useState } from 'react';\nimport RuEs5_6 from '../lang/RuEs5_6';\nimport AmEs5_6 from '../lang/AmEs5_6';\n\n function JsEs5_6() {\n  \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  \n  return (\n    <div className='java-script'>\n     \n     <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div>\n     \n     \n      <h3>Global object in JavaScript</h3>\n      <p>\n      Global object in JavaScript is a built-in object that is available everywhere in the code. It provides properties and methods that are used by \n      various parts of the language and can also be extended with custom functionality.\n      </p>\n      <div>\n    <p>Some of the properties and methods of the global object in JavaScript include:</p>\n    <p>1. Infinity - represents the mathematical infinity value</p>\n    <p>Example: console.log(Infinity);</p>\n    <p>2. NaN - represents the \"Not a Number\" value.</p>\n    <p>Example: console.log(NaN);</p>\n    <p>3. console - provides methods for logging information to the console.</p>\n    <p>Example: console.log('Hello, world!');</p>\n    <p>4. parseInt() - parses a string and returns an integer.</p>\n    <p>Example: console.log(parseInt('10'));</p>\n    <p>5. parseFloat() - parses a string and returns a floating-point number.</p>\n    <p>Example: console.log(parseFloat('3.14'));</p>\n    <p>6. encodeURIComponent() - encodes a URI component.</p>\n    <p>7. Date - provides methods for working with dates and times.</p>\n    <p>Example: console.log(new Date());</p>\n    <p>8. Math - provides mathematical functions and constants.</p>\n    <p>Example: console.log(Math.PI);</p>\n    </div>\n    <p>\n    Global object methods can be called from anywhere in the code, without the need to create an instance of the object. However, care should be taken when extending the global object with custom methods, \n    as they can potentially conflict with built-in methods or other custom methods.\n    </p>\n    <p>\n    It is important to note that in modern JavaScript environments, the global object is not always available in all contexts, such as in module-based code or in strict mode.\n    </p>\n\n    <h3>String manipulation in JavaScript ES5</h3>\n    <p>\n    In JavaScript ES5, a string is a sequence of characters and can be manipulated using various methods. Two methods for extracting substrings from a string are slice() and substring().\n    </p>\n    <p>\n    The slice() method extracts a section of a string and returns it as a new string, without modifying the original string. It takes two parameters: the starting index and the ending index (optional). If the ending index is not provided, the method will extract to the end of the string. If the starting index is negative, it counts from the end of the string.\n    </p>\n    <p>\n    The substring() method is similar to slice(), but does not accept negative indices. If the starting index is greater than the ending index, the two indices are swapped to prevent an error.\n    </p>\n    <p>Here are some examples</p>\n\n    <p>{'// Get the substring \"is\"'}</p>\n\n    <p>{'str.slice(5, 7); //\"is\"'}</p>\n\n    <p>{'str.substring(5, 7); //\"is\"'}</p>\n\n    <hr/>\n    <p>{'// Get the substring \"is\"'}</p>\n\n    <p>{'console.log(str.slice(5, 7)); //\"is\"'}</p>\n\n    <p>{'console.log(str.substring(5, 7)); //\"is\"'}</p>\n\n    <p>{'// Get the substring \"is my text\"'}</p>\n\n    <p>{'console.log(str.slice(5)); //\"is my text\"'}</p>\n\n    <p>{'console.log(str.substring(5)); //\"is my text\"'}</p>\n\n    <hr/>\n\n    <p>{'// Get the substring \" \"'}</p>\n\n    <p>{'console.log(str.slice(7, 5)); //\" \"'}</p>\n\n    <p>{'console.log(str.substring(7, 5)); //\"is\"'}</p>\n\n    <hr/>\n\n    <p>{' // Get the substring \"my\"'}</p>\n\n    <p>{'console.log(str.slice(-7, -5)); //\"my\"'}</p>\n\n    <p>{'console.log(str.substring(7, 5)); //\" \"'}</p>\n\n<p>\nIn the examples above, slice() and substring() are used to extract substrings from the str variable. The first example extracts the substring \"is\", while the second example extracts \"is my text\". The third and fourth examples show how slice() and substring() handle cases where the indices are out of order. Finally, the fifth example shows how slice() can be used with negative indices to extract a substring from the end of the string.\n</p>\n<h3>The topic is \"String Searching\" in JavaScript ES5.</h3>\n<p>In JavaScript, you can search for a specific substring within a string using various \n  methods. Here are some commonly used methods:\n</p>\n<p>1. The topic is \"String Searching\" in JavaScript ES5.\n\nIn JavaScript, you can search for a specific substring within a string using various methods. Here are some commonly used methods:\n\nindexOf(substring, start): This method searches for a substring within \na string and returns the index of the first occurrence of the substring. You can also specify the starting position of the search by passing an optional start parameter. If the substring is not found, it returns -1.</p>\n   \n   <b>Example</b>\n   \n  <code>\n    {'var message = \"Hello world\";\\nvar index = message.indexOf(\"world\");\\nconsole.log(index); // 6'}\n  </code>\n \n<p>\n 2. lastIndexOf(substring, end): This method works the same way as indexOf, but it searches for the last occurrence of the substring within the string, searching backwards from the end of the string. You can also specify the ending position of the search by passing an optional end parameter.\n</p>\n<b>Example</b>\n\n<p>{'var message = \"Hello world, hello!\";'}</p>\n\n<p>{'var index = message.lastIndexOf(\"hello\");'}</p>\n\n<p>{'console.log(index); // 13'}</p>\n\n<p>\n  Note that the case of the substring matters when using these methods. For example, searching for \"hello\" when the string only contains \"Hello\" will not find the substring.\n</p>\n\n<p>3.includes(substring): This method checks whether the given substring is present in the string or not, and returns a boolean value indicating the result.</p>\n    \n    <b>Example</b>\n    \n  <code>\n    {'var found = message.includes(\"world\");\\nconsole.log(found); // true'}\n  </code>\n \n<p>4. search(regex): This method searches for a regular expression within the string and returns the index of the first match. If there is no match, it returns -1.</p>\n    \n    <b>Example</b>\n\n    <p>{'var message = \"Hello world, hello!\";'}</p>\n\n    <p>{'var index = message.search(/hello/i);//the \"i\" flag makes it case-insensitive'}</p>\n\n    <p>{'console.log(index);// 0'}</p>\n\n<p>In your example, the variable str contains the string \"This is my text\". The following lines of code demonstrate the usage of the string searching methods described above:</p>\n\n<p>{'var str = \"This is my text\";'}</p>\n\n<p>{'console.log(str.indexOf(\"is\")); //2'}</p>\n\n<p>{'console.log(str.indexOf(\"is\", 3)); //5'}</p>\n\n<p>{'console.log(str.lastIndexOf(\"is\")); //5'}</p>\n\n<p>{'console.log(str.lastIndexOf(\"is\", 4)); //2'}</p>\n\n<p>{'console.log(str.indexOf(\"some\")); //-1'}</p>\n\n<p>These lines of code search for the substring \"is\" and \"some\" within the str string, and return their indexes using the indexOf and lastIndexOf methods. The second parameter of indexOf specifies the starting position of the search, while the second parameter of lastIndexOf specifies the ending position of the search.</p>\n    \n    <h3>RegEx</h3>\n\n    <p>RegExp is a built-in object that provides a way to create regular expressions. Regular expressions are patterns used to match character combinations in strings.\n</p>\n    <b>Here is an example of creating a regular expression object using the constructor function:</b>\n    \n  <code>\n    {'var regex = new RegExp(\"some\", \"long\");'}\n  </code>\n \n<p>Here, some is the regular expression flag, and long are optional flags that modify the behavior of the regular expression.</p>\n<p>\nHere is an example of using the test() method of the RegExp object to test if a string matches a regular expression:\n</p>\n\n<p>{'var str = \"The quick brown fox jumps over the lazy dog\";'}</p>\n\n<p>{'var regex = /fox/i;'}</p>\n\n<p>{'var result = regex.test(str);'}</p>\n\n<p>{'console.log(result); // true '}</p>\n \n<p>In this example, /fox/i is a regular expression pattern that matches the word \"fox\" in a case-insensitive manner. The test() method returns a boolean value indicating whether or not the regular expression pattern matches the string str.</p>\n    \n  <p>\n  Here is another example of using the match() method of the String object with a regular expression to extract matched values:\n  </p>\n\n  <p>{'var str = \" The quick brown fox jumps over the lazy dog \";'}</p>\n\n  <p>{'var regex = /fox/i;'}</p>\n\n  <p>{'var result = str.match(regex);'}</p>\n\n  <p>{'console.log(result); // [\"fox\"]'}</p>\n\n  <hr/>\n\n  <p>In this example, the match() method returns an array containing the matched substring(s) if the regular expression pattern is found in the string.\n\n</p>\n    <b>And here are some commonly used special characters in regular expressions:</b>\n    <p>.- Matches any character except newline \\n</p>\n    <p>\\w - Matches any ASCII word character [a-zA-Z0-9_]</p>\n    <p>\\W - Matches any non-word character [^a-zA-Z0-9_]</p>\n    <p>\\d - Matches any ASCII digit [0-9]</p>\n    <p>\\D - Matches any non-digit character [^0-9]</p>\n    <p>\\s - Matches any Unicode whitespace character</p>\n    <p>\\S - Matches any non-whitespace character</p>\n    <pre>\n  <code>\n    {'var myStr = \"awesome Text\";\\nvar myRegExp = /[a-zA-Z0-9]/;\\nvar result = myRegExp.test(myStr);\\nconsole.log(result); //true'}\n  </code>\n</pre>\n<b>^ - Matches the beginning of a string</b><br/>\n\n<b>$ - Matches the end of a string</b>\n\n<p>Flags:</p>\n\n<b>i - ignoreCase</b>\n \n  <p>{'var exp = /a/i // searches for both uppercase and lowercase letters'}</p>  \n  \n<b>g - global</b><br/>\n<b>Searches for all occurrences of a pattern in a string</b>\n\n\n<p>{'var str = \"Borobudur\";'}</p>\n\n<p>{'var pattern = /[ou]/g;'}</p>\n\n<p>{'console.log(str.replace(pattern, \"a\")); //\"Barabadar\"\";'}</p>\n\n\n<b>m - multiline</b><br/>\n\n<b>Searches for all occurrences of a pattern in all lines of a string</b>\n\n<p>{'var str = \"Some text And some more\\r\\nAnd yet\\rThis is the end\";'}</p>\n\n<p>{'var pattern = /(\\w+)\\s/g;'}</p>\n\n<p>{'console.log(str.match(pattern)); // [\"Some \", \"text\\n\", \"And \", \"some \", \"more\\r\\n\", \"And \", \"yet\\r\", \"This \", \"is \", \"the \", \"end\"]'}</p>\n\n \n   <p>\n   Here, we define a string str with the value \"this is my text\". We then define a regular \n   expression pattern that matches the beginning of the string (^) followed by one or more lowercase letters ([a-z]+) \n   separated by spaces, and the end of the string ($). We use parentheses to capture each group of letters as a separate subpattern.\n   </p>\n   <p>\n   Finally, we use the replace() method on the string, passing in the pattern and a replacement string that uses the $ symbol to reference the captured subpatterns in the order they were defined. In this case, we swap the first and second groups of letters, leaving the third and fourth groups in place.\n   </p>\n   <p>Here's the code:</p>\n\n   <p>{'var str = \"this is my text\";'}</p>\n\n   <p>{'var pattern = /^([a-z]+) ([a-z]+) ([a-z]+) ([a-z]+)$/;'}</p>\n\n   <p>{'var res = str.replace(pattern, \"$2 $1 $3 $4\");'}</p>\n\n   <p>{'console.log(res); // \"is this my text\"'}</p>\n   \n   </div>\n      )}\n       {language === 'ru' && (\n        <div>\n          <RuEs5_6 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmEs5_6 />\n        </div>\n      )}\n    \n    </div>\n\n\n  )\n}\n\n\n\nexport default JsEs5_6;\n\n\n\n//106","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_7.js",["999","1000"],[],"import React,{ useState } from 'react';\nimport RuEs5_7 from '../lang/RuEs5_7';\nimport AmEs5_7 from '../lang/AmEs5_7';\n\n function JsEs5_7() {\n  \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n\n  \n  \n  return (\n    <div className='java-script'>\n      \n      <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div>\n      \n      \n      <h1>Object-Oriented Programming, or OOP</h1>\n     \n      <p>Object-Oriented Programming, or OOP, is a programming paradigm that emphasizes objects, classes, and encapsulation. In JavaScript ES5, \n        OOP is implemented through the use of constructor functions and prototypes.</p>\n     \n      <p>\n      A constructor function is a special function that is used to create and initialize objects. Constructor functions are defined using the function keyword, and their names usually start with a capital letter to distinguish them from regular functions. The this keyword is used inside the constructor \n      function to refer to the object being created. Here's an example:\n      </p>\n\n      <p>{'function Person(name, age) {'}</p>\n\n      <p>{'this.name = name;'}</p>\n\n      <p>{'this.age = age;'}</p>\n\n      <p>{'}'}</p>\n\n      <p>{'var person1 = new Person(\"Alice\", 25);'}</p>\n\n      <p>{'var person2 = new Person(\"Bob\", 30);'}</p>\n\n      <p>{'console.log(person1.name); // \"Alice\"'}</p>\n\n      <p>{'console.log(person2.age); // 30'}</p>\n\n<p>In this example, the Person function is used as a constructor function to create two \n  Person objects, person1 and person2. The name and age properties are set using the this keyword inside the constructor function.\n</p>\n<p>\nIn addition to constructor functions, prototypes are used to implement inheritance and share methods and properties between objects. Every object in JavaScript has a prototype, which is another object that the object inherits from. Properties and methods can be added to an object's prototype using the prototype property. Here's an example:\n</p>\n\n<p>{'function Person(name, age) {'}</p>\n\n<p>{'this.name = name;'}</p>\n\n<p>{' this.age = age;'}</p>\n\n<p>{'}'}</p>\n\n<p>{'Person.prototype.greet = function() {'}</p>\n\n<p>{'console.log(\"Hello, my name is\" + this.name + \"and I am\" + this.age + \"years old.\");'}</p>\n\n<p>{'}'}</p>\n\n<p>{'var person1 = new Person(\"Alice\", 25);'}</p>\n\n<p>{'var person2 = new Person(\"Bob\", 30);'}</p>\n\n<p>{'person1.greet(); // \"Hello, my name is Alice and I am 25 years old.\"'}</p>\n\n<p>{'person2.greet(); // \"Hello, my name is Bob and I am 30 years old.\"'}</p>\n\n<p>\nIn this example, a greet method is added to the Person prototype using the prototype property. This method can then be called on any Person object, as demonstrated by the person1.greet() and person2.greet() calls. \n</p>\n<p>\nAnother OOP concept in JavaScript ES5 is encapsulation, which refers to the practice of hiding implementation details and exposing only the necessary interfaces to the outside world. This can be achieved using closures, which allow functions to access variables in their outer scope even after the outer function has returned. Here's an example: \n</p>\n \n  <code>\n    {'function Counter() {\\n  var count = 0;\\n\\n  this.increment = function() {\\n    count++;\\n    console.log(count);\\n  };\\n\\n  this.decrement = function() {\\n    count--;\\n    console.log(count);\\n  };\\n}\\n\\nvar counter1 = new Counter();\\nvar counter2 = new Counter();\\n\\ncounter1.increment(); // 1\\ncounter1.increment(); // 2\\ncounter1.decrement(); // 1\\n\\ncounter2.increment(); // 1 '}\n  </code>\n \n<p>\nIn this example, the Counter constructor function creates objects with increment and decrement methods, which access a private count variable using closures. This ensures that the count variable is hidden from the outside world and can only be accessed through the methods provided by the Counter object. \n</p>\n<b>Object-Oriented Programming (OOP) with primitive values in JavaScript ES5</b>\n\n<p>{'function Person(name, age, gender) {'}</p>\n\n<p>{'this.name = name;'}</p>\n\n<p>{' this.age = age;'}</p>\n\n<p>{'this.gender = gender;'}</p>\n\n<p>{' this.printDetails = function() {'}</p>\n\n<p>{'console.log(\"Name: \" + this.name);'}</p>\n\n<p>{'console.log(\"Age: \" + this.age);'}</p>\n\n<p>{'console.log(\"Gender: \" + this.gender);'}</p>\n\n<p>{'}'}</p>\n\n<p>{'}'}</p>\n\n<p>{'var person1 = new Person(\"John\", 25, \"male\");'}</p>\n\n<p>{'var person2 = new Person(\"Jane\", 30, \"female\");'}</p>\n\n<p>{'person1.printDetails();'}</p>\n\n<p>{'person2.printDetails();'}</p>\n\n<p>{'var bool = new Boolean(true);'}</p>\n\n<p>{'console.log(bool.valueOf()); // true'}</p>\n\n<p>{'var str = new String(\"Hello\");'}</p>\n\n<p>{'console.log(str.concat(\" World\")); // \"Hello World\"'}</p>\n\n<p>{'var num = new Number(10);'}</p>\n\n<p>{'console.log(num.valueOf() + 5); // 15'}</p>\n\n<p>\nIn this example, we define a Person constructor function to create person objects with name, age, and gender properties. We also define a printDetails method on the Person object to print out the person's details.  \n</p>\n<p>\nWe then create two Person objects using the constructor function and call the printDetails method for each object.\n</p>\n<p>\nNext, we create Boolean, String, and Number objects using their respective constructor functions and demonstrate some of their methods, such as valueOf, concat, and basic arithmetic operation  \n</p>\n<b>In JavaScript ES5, we can create objects using the constructor functions Object and Array. \n  This is a form of OOP called constructor-based object creation.\n</b>\n<p>\nTo create an object using a constructor function, we use the new keyword followed by the function name. For example, to create an object using the Object constructor function, we can do:\n</p>\n\n<p>{'var person = new Object();'}</p>\n\n<p>{'person.name = \"John\";'}</p>\n\n<p>{'person.age = 30;'}</p>\n\n<p>{'person.job = \"Developer\";'}</p>\n\n<p>\nIn the above example, we create a new object person using the Object constructor function. We then add properties to this object using dot notation.  \n</p>\n<p>\nSimilarly, we can create an array using the Array constructor function:  \n</p>\n\n<p>{'var arr = [];'}</p>\n\n<p>{'arr.push(1);'}</p>\n\n<p>{'narr.push(2);'}</p>\n\n<p>{'arr.push(3);'}</p>\n\n<p>{'console.log(arr); // [1, 2, 3]'}</p>\n\n\n<p>\nIn the above example, we create a new array arr using the Array constructor function. We then add elements to this array using the push method.  \n</p>\n<p>\nConstructor-based object creation is useful when we need to create multiple objects of the same type. We can define a constructor function that sets the initial values of the object properties, and then create new objects using this constructor.  \n</p>\n<p>\nFor example, suppose we want to create objects representing cars. We can define a constructor function like this:  \n</p>\n\n<p>{'function Car(make, model, year) {'}</p>\n\n<p>{' this.make = make;'}</p>\n\n<p>{' this.model = model;'}</p>\n\n<p>{' this.year = year;'}</p>\n\n<p>{'}'}</p>\n\n<p>{'var car1 = new Car(\"Honda\", \"Civic\", 2020);'}</p>\n\n<p>{'var car2 = new Car(\"Toyota\", \"Corolla\", 2021);'}</p>\n\n<p>\nIn the above example, we define a constructor function Car that takes three parameters (make, model, and year) and sets the corresponding properties of the object using the this keyword. We then create two car objects (car1 and car2) using this constructor.  \n</p>\n<b>OOP I new RegExp()</b>\n\n<p>{'var str = \"Hello, world!\";'}</p>\n\n<p>{'var regex = new RegExp(\\'\\\\\\\\w\\', \\'g\\');'}</p>\n\n<p>{'var matches = str.match(regex);'}</p>\n\n<p>{'console.log(matches); // [\"H\", \"e\", \"l\", \"l\", \"o\", \"w\", \"o\", \"r\", \"l\", \"d\"]'}</p>\n\n<p>\nIn the example above, we create a regular expression that matches any word character (\\w) and use the g flag to perform a global search. We then use the match() method to find all the matches in the string str. Finally, we log the array of matches to the console.\n</p>\n<p>\nNote that we need to escape the backslash character when passing the regular expression pattern as a string to the RegExp constructor. This is because the backslash character is used to escape special characters in regular expressions, and we need to escape it in the string as well.  \n</p>\n<b>Prototype __proto__</b>\n<p>\nPrototype-based programming is a fundamental concept in JavaScript that allows objects to inherit properties and methods from other objects. Every object in JavaScript has a prototype, which is another object that it inherits properties and methods from.  \n</p>\n<p>\nIn ES5, you can create a prototype by using the Object.create() method, which takes an object as its parameter and creates a new object with its prototype set to that object. You can then add properties and methods to the prototype object, which will be inherited by any objects that are created with it as their prototype.  \n</p>\n<p>\nHere's an example of creating a prototype for a Person object  \n</p>\n\n<p>{'var personPrototype = {'}</p>\n\n<p>{'greeting: function() {'}</p>\n\n<p>{'console.log(\"Hello, my name is \" + this.name);'}</p>\n\n<p>{'} ,'}</p>\n\n<p>{'farewell: function() {'}</p>\n\n<p>{'console.log(\"Goodbye!\");'}</p>\n\n<p>{'}'}</p>\n\n<p>{'};'}</p>\n\n<p>{'var john = Object.create(personPrototype);'}</p>\n\n<p>{'john.name = \"John\";'}</p>\n\n<p>{'john.greeting(); // outputs: \"Hello, my name is John\"'}</p>\n\n<p>\nIn this example, we first define a personPrototype object with a greeting() method and a farewell() method. Then, we create a new Person object john by calling Object.create(personPrototype) and setting its name property to \"John\". Since john is created with personPrototype as its prototype, it inherits the greeting() method from the prototype object and can call it using john.greeting().  \n</p>\n<b>instanceof</b>\n<p>\nIn JavaScript ES5, instanceof is an operator that is used to check whether an object belongs to a particular class or not. It returns a boolean value indicating whether an object is an instance of a specified class or its subclasses.  \n</p>\n<p>\nThe syntax for instanceof is as follows:  \n</p>\n<p>\nobject instanceof constructor  \n</p>\n<p>\nHere, object is the name of the object to be checked and constructor is the name of the constructor function or class. The instanceof operator checks the prototype chain of the object and returns true if the object is an instance of the constructor function or class, otherwise it returns false.  \n</p>\n<p>\nHere is an example:  \n</p>\n\n<p>{'function Animal(name) {'}</p>\n\n<p>{'this.name = name;'}</p>\n\n<p>{'}'}</p>\n\n<p>{'function Dog(name) {'}</p>\n\n<p>{'Animal.call(this, name);'}</p>\n\n<p>{' }'}</p>\n\n<p>{'Dog.prototype = Object.create(Animal.prototype);'}</p>\n\n<p>{'var myDog = new Dog(\"Buddy\");'}</p>\n\n<p>{'console.log(myDog instanceof Dog);  // true'}</p>\n\n<p>{'console.log(myDog instanceof Animal); // true'}</p>\n\n<p>\nIn this example, we define two classes Animal and Dog. Dog inherits from Animal. We create a new Dog object and check if it is an instance of both Dog and Animal using the instanceof operator. Both checks return true, because myDog is an instance of both classes.  \n</p>\n<p>\nIn summary, instanceof is used to determine whether an object is an instance of a particular class or its subclasses by checking its prototype chain.  \n</p>\n</div>\n      )}\n  \n  {language === 'ru' && (\n        <div>\n          <RuEs5_7 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmEs5_7 />\n        </div>\n      )}\n    </div>\n  )\n}\n\n\n\nexport default JsEs5_7;","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_8.js",["1001","1002"],[],"import React,{useState} from 'react';\nimport RuEs5_8 from '../lang/RuEs5_8';\nimport AmEs5_8 from '../lang/AmEs5_8';\n\n\n function JsEs5_8() {\n  \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n\n\n  return (\n    <div className='java-script'>\n     \n     <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div>\n     \n      <h4>Date - object</h4>\n      <p>\n      In JavaScript, the Date object is used to work with dates and times. It allows you to create, manipulate, and format dates and times in various ways. The Date object represents a single moment in time, and is initialized with the current date and time by default.   \n      </p>\n      <p>\n      Here are a few examples of how to use the Date object in JavaScript:   \n      </p>\n      <p>\n      1. Creating a Date object with a specific date and time:     \n      </p>\n\n      <p>{'var date = new Date(2022, 0, 1, 12, 0, 0);'}</p>\n\n      <p>{'console.log(date); // Sat Jan 01 2022 12:00:00 GMT+0200 (Eastern European Standard Time)'}</p>\n    \n<p>\nIn this example, a new Date object is created with the specified year (2022), month (0 for January), day (1), hour (12), minute (0), and second (0). The output shows the resulting date and time in a human-readable format.  \n</p>\n<p>\n 2. Creating a Date object with the current date and time: \n</p>\n\n<p>{'var date = new Date();'}</p>\n\n<p>{'console.log(date); // Sat Mar 27 2023 13:28:17 GMT+0200 (Eastern European Standard Time)'}</p>\n \n<p>\nIn this example, a new Date object is created with the current date and time. The output shows the resulting date and time in a human-readable format.  \n</p>\n<p>\n 3. Getting the current year, month, and day: \n</p>\n\n<p>{'var date = new Date();'}</p>\n\n<p>{'var year = date.getFullYear();'}</p>\n\n<p>{'var month = date.getMonth();'}</p>\n\n<p>{'var day = date.getDate();'}</p>\n\n<p>{'console.log(year + \"-\" + month + \"-\" + day); // 2023-2-27'}</p>\n \n<p>In this example, a new Date object is created with the current date and time. The getFullYear(), getMonth(), and getDate() methods are then used to extract the year, month (where 0 represents January), and day from the Date object. The output shows the resulting date in a formatted string.</p>\n   \n<p> 4.  Converting a date to a string: </p>\n   \n\n  <p>{'var date = new Date();'}</p>\n\n  <p>{'var dateString = date.toDateString();'}</p>\n\n  <p>{'console.log(dateString); // Sat Mar 27 2023'}</p>\n\n<p>\nIn this example, a new Date object is created with the current date and time. The toDateString() method is then used to convert the date to a human-readable string format. The output shows the resulting string representation of the date  \n</p>\n<p>\nThese are just a few examples of the many ways you can use the Date object in JavaScript to work with dates and times. \n</p>\n<b>Error - object</b>\n<p>\nIn JavaScript, an Error object is used to represent runtime errors. When an error occurs in a program, JavaScript generates an Error object and throws it. The Error object contains information about the error such as the error message and the name of the error. \n</p>\n<p>\nHere's an example of using a try-catch block to catch a ReferenceError: \n</p>\n\n<p>{'try {'}</p>\n\n<p>{'console.log(variable);'}</p>\n\n<p>{'} catch(err) {'}</p>\n\n<p>{'console.log(err); //ReferenceError: variable is not defined'}</p>\n\n<p>{'console.log(err.name); //ReferenceError'}</p>\n\n<p>{' console.log(err.message); //variable is not defined'}</p>\n\n<p>{'}'}</p>\n \n<p>\nIn this example, the try block attempts to log a variable that has not been defined, resulting in a ReferenceError. The catch block catches the error and logs the error object along with its name and message properties.  \n</p>\n<p>\nHere's another example of using a try-catch block to throw a custom Error object: \n</p>\n\n<p>{'var num1 = 10;'}</p>\n\n<p>{'var num2 = 0;'}</p>\n\n<p>{'try {'}</p>\n\n<p>{'if (num2 == 0) {'}</p>\n\n<p>{' throw new Error(\"Cannot divide by zero.\");'}</p>\n\n<p>{'}'}</p>\n\n<p>{'console.log(num1 / num2);'}</p>\n\n<p>{'} catch (err) {'}</p>\n\n<p>{' console.log(err.name, \" : \", err.message) ; '}</p>\n\n<p>{'}'}</p>\n\n<p>\nIn this example, the try block attempts to divide num1 by num2. If num2 is zero, a new Error object is thrown with a custom error message. The catch block catches the error and logs the error object along with its name and message properties. \n</p>\n<p>\nUsing Error objects and try-catch blocks is an important part of handling runtime errors in JavaScript programs. It allows developers to gracefully handle errors and provide useful feedback to users.  \n</p>\n</div>\n      )}\n  \n  {language === 'ru' && (\n        <div>\n          <RuEs5_8 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmEs5_8 />\n        </div>\n      )}\n    </div>\n  )\n}\n\n\n\nexport default JsEs5_8;","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_9.js",["1003","1004"],[],"import React,{useState} from 'react';\nimport RuEs5_9 from '../lang/RuEs5_9';\nimport AmEs5_9 from '../lang/AmEs5_9';\n\n function JsEs5_9() {\n  \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  return (\n    <div className='java-script'>\n      <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div>\n    \n    \n    <h1>Pseudo protocol javascript </h1> \n    <p>\n    example of using the \"pseudo protocol\" javascript: in the href attribute of an anchor {'(<a>)'} tag. When the user clicks the link, it will execute the JavaScript code specified in the href attribute.  \n    </p>\n    <p>\n    Here's an alternative way to write the same code without using the javascript: protocol: \n    </p>\n\n    <p>{'<a href=\"#\" onclick=\"myFunction(); return false;\">Click</a>'}</p>\n\n    <p>{'<script>'}</p>\n\n    <p>{'function myFunction() {'}</p>\n\n    <p>{'console.log(\"Hello\");'}</p>\n\n    <p>{'}'}</p>\n\n    <p>{'</script>'}</p>\n\n<p>\nIn this example, we use an empty anchor href attribute and the onclick event handler to call the myFunction() function when the user clicks the link. The return false statement prevents the link from navigating to a new page. \n</p>\n<p>\nBoth examples achieve the same result of logging \"Hello\" to the console when the link is clicked. However, the second example is considered better practice because it separates the JavaScript code from the HTML markup, making it easier to maintain and debug the code. \n</p>\n<h2>Browser Object Model (BOM)</h2>\n<p>\nIn JavaScript ES5, the Document Object Model (DOM) represents the HTML elements of a web page as a structured tree, allowing JavaScript code to interact with and manipulate the content of the web page dynamically. The following are some commonly used objects in the browser window object: \n</p>\n<p>\n1 . <b>window: </b>The top-level object in the browser's JavaScript hierarchy, representing the browser window. All global JavaScript objects, functions, and variables automatically become members of the window object.  \n</p>\n<p>\n 2. <b>history:</b> The history object allows JavaScript to interact with the browser's history, allowing you to go back and forward between pages. \n</p>\n<p>Example</p>\n<p>{' window.history.back(); // Go back one page '}</p>\n<p>\n3. <b>navigator:</b> The navigator object provides information about the web browser and operating system running on the user's computer. \n</p>\n<p>Example</p>\n<p>{'console.log(navigator.userAgent); // Outputs the user agent string for the browser'}</p>\n<p>\n4. <b>screen:</b> The screen object provides information about the user's screen resolution and color depth. \n</p>\n<p>Example:</p>\n<p>{'console.log(screen.width); // Outputs the width of the user s screen'}</p>\n<p>\n 5. <b>location:</b> The location object provides information about the current URL of the web page and allows you to navigate to new URLs. \n</p>\n<p>Example:</p>\n<p>{'console.log(location.href); // Outputs the current URL  location.href = \"https://www.example.com\"; // Navigates to a new URL'}</p>\n\n<p>\n 6.document: The document object represents the HTML content of the current web page and allows JavaScript code to interact with and manipulate the content of the page. \n</p>\n<p>Example:</p>\n<p>{'document.getElementById(\"myDiv\").innerHTML = \"New content\"; // Changes the HTML content of an element with the ID \"myDiv\"'}\n</p>\n<p>\n 7. <b>methods:</b> There are many other methods available in the browser window object, such as alert(), prompt(), confirm(), setInterval(), and setTimeout(), which allow you to display dialog boxes, set timers, and more. \n</p>\n<p>Example:</p>\n<p>alert(\"Hello, world!\"); // Displays an alert dialog box with the message \"Hello, world!\"\n</p>\n<h5>\nThe Browser Object Model (BOM) is a JavaScript API that provides access to the web browser's window object and its properties. One of the properties of the window object is the history object, which contains the user's browsing histor \n</h5>\n<p>\nThe history object provides several methods to navigate through the browsing history. \n</p>\n<p>\n<b>history.go()</b> method can be used to navigate to a specific page in the browsing history. This method accepts a positive or negative integer as an argument. If the argument is a positive integer, it navigates forward in the history, and if it's negative, it navigates backward in the history. For example, history.go(-1) would navigate back one page in the browsing history, and history.go(2) would navigate forward two pages.  \n</p>\n<p>\n<b>history.back()</b> method is used to navigate back one page in the browsing history, equivalent to <b>history.go(-1)</b>.  \n</p>\n<p>\n<b>history.forward()</b> method is used to navigate forward one page in the browsing history, equivalent to <b>history.go(1)</b>. \n</p>\n<p><b>history.length </b>property returns the number of pages in the browsing history.</p>\n<p>\nHere is an example of how to use the history object: \n</p>\n<p>\n{ '// Navigate back one page in the browsing history  history.back();'} </p>\n\n<p>{'// Navigate forward one page in the browsing history  history.forward();'}</p>\n\n<p>{'// Navigate to the third page in the browsing history  history.go(2);' } </p>\n\n<p> { '// Get the number of pages in the browsing history  console.log(history.length); '} </p>\n\n<h4>\nThe Browser Object Model (BOM) is a part of the JavaScript API that provides access to the browser's window and its properties. The Navigator object is a part of the BOM and represents the browser itself. It provides information about the browser that is currently being used. \n</h4>\n<p>\nHere are some of the properties of the Navigator object and their explanations: \n</p>\n<p>\nnavigator.appCodeName: Returns the code name of the browser. \n</p>\n<p>\nnavigator.appName: Returns the name of the browser.\n</p>\n<p>\nnavigator.appVersion: Returns the version information of the browser. \n</p>\n<p>\nnavigator.language: Returns the language that the browser is set to. \n</p>\n<p>\nnavigator.platform: Returns the operating system platform that the browser is running on.\n</p>\n<p>\nnavigator.userAgent: Returns the user agent string for the browser \n</p>\n<p>Here's an example of how to use the Navigator object:</p>\n<p>{'console.log(navigator.appName); // Outputs the name of the browser'}</p>\n<p>\n{'console.log(navigator.userAgent); // Outputs the user agent string for the browser'}\n</p>\n<p>\nBy using the properties of the Navigator object, you can write JavaScript code that behaves differently depending on the browser that the user is running. \n</p>\n\n<h3>\nThe Browser Object Model (BOM) in JavaScript provides a way to interact with the browser window and its properties. The window.screen object is part of the BOM and provides information about the user's screen. \n</h3>\n<p>\nHere's a breakdown of the properties of <b> window.screen:</b> \n</p>\n<p><b>screen.height:</b> returns the total height of the user's screen in pixels.</p>\n\n<p><b>screen.width:</b> returns the total width of the user's screen in pixels.</p>\n\n<p><b>screen.availHeight:</b> returns the available height of the user's screen in pixels, excluding the Windows taskbar and other system elements.</p>\n\n<p><b>screen.availWidth:</b> returns the available width of the user's screen in pixels, excluding the Windows taskbar and other system elements.</p>\n\n<p>Here's an example of how to use these properties:</p>\n\n<p>{'console.log(\"Total screen height: \" + window.screen.height + \" pixels\");'}</p>\n\n<p>{'console.log(\"Total screen width: \" + window.screen.width + \" pixels\");'}</p>\n\n<p>{'console.log(\"Available screen height: \" + window.screen.availHeight + \" pixels\");'}</p>\n\n<p>{'console.log(\"Available screen width: \" + window.screen.availWidth + \" pixels\");'}</p>\n\n<p>This code will log the screen height and width, as well as the available screen height and width, to the console.</p>\n\n<p>Note that the screen object is read-only and cannot be modified.</p>\n\n<h3>\nThe Browser Object Model (BOM) is a set of JavaScript objects provided by web browsers to interact with the browser window. One of the objects in the BOM is the location object, which represents the current URL of the browser window. The location object has several properties that can be accessed and modified to interact with the URL. \n</h3>\n\n<p>Here are the explanations of the properties of the <b>location</b> object:</p>\n\n<p>location.protocol: This property specifies the protocol used in the URL, such as \"http:\" or \"https:\".</p>\n\n<p><b>location.host:</b> This property specifies the domain name and port number in the URL, such as \"www.site.com:8080\".</p>\n\n<p><b>location.hostname: </b>This property specifies the domain name in the URL, such as \"www.site.com\".</p>\n\n<p><b>location.href:</b> This property specifies the entire URL, such as \"http://www.site.com/about/?name=javascript#content\".</p>\n\n<p><b>location.port:</b> This property specifies the port number in the URL, such as \"8080\".</p>\n\n<p><b>location.pathname:</b> This property specifies the path of the URL, such as \"/about/\".</p>\n\n<p><b>location.search:</b> This property specifies the query string in the URL, such as \"?name=javascript\".</p>\n\n<p><b>location.hash:</b> This property specifies the fragment identifier in the URL, such as \"#content\".</p>\n\n<p>By accessing and modifying these properties of the <b>location</b> object, you can interact with the current URL of the browser window, such as redirecting the user to a different page or modifying the query string.</p>\n\n<p>The <b>setTimeout()</b> method is a built-in JavaScript function that executes a specified function or piece of code after a specified amount of time has passed. It takes two arguments: a function to execute, and a time delay in milliseconds.</p>\n\n<p>In the example code you provided, a variable called <b>timer</b> is declared and assigned the return value of the <b>setTimeout()</b>function. The function being executed here is a simple <b>console.log()</b> statement that prints out \"Hello, World!\" to the console after a delay of 2000 milliseconds (or 2 seconds).</p>\n \n <p>The <b>clearTimeout()</b> method is then called with the timer variable as its argument. This method cancels the timeout set by <b>setTimeout()</b>, which means that the <b>console.log()</b> statement will not be executed after the specified delay.</p>\n    \n <p>So, in summary, the code sets a timer to execute a function after 2 seconds, but then immediately cancels that timer before it can complete. This is a simple example of how to use the <b>setTimeout()</b> and <b>clearTimeout()</b> methods in JavaScript.</p>   \n   \n  <p>example code using <b>setTimeout:</b></p> \n   \n  <pre>\n  <code>\n    {'function sayHello() {\\n  console.log(\"Hello, World!\");\\n}\\n\\n// Call the function after 2 seconds\\nvar timer = setTimeout(sayHello, 2000);\\n\\n// Cancel the timer before it executes\\nclearTimeout(timer);'}\n  </code>\n</pre>\n\n<p>In this example, the <b>setTimeout</b> function is used to delay the execution of the <b>sayHello</b> function for 2 seconds. The function is passed as a parameter to setTimeout along with the time delay in milliseconds. The <b>setTimeout </b>function returns a timer ID which is used to cancel the timer before it executes using the <b>clearTimeout</b> function.</p>\n\n<h3>Events</h3>\n\n<p>The Document Object Model (DOM) is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content. Events are actions or occurrences that happen in the browser, such as clicking a button, scrolling the page, or pressing a key on the keyboard.</p>\n\n<p>onclick</p>\n   \n<p>onmousedown</p>\n\n<p>onmouseup</p>\n   \n<p>onmousemove</p>\n\n<p>onmouseover</p>\n\n<p>onmouseout</p>\n\n<p>onkeydown</p>\n\n<p>onkeyup</p>\n\n<p>onkeypress</p>\n\n<p>onfocus</p>\n\n<p>onblur</p>\n\n<p>onsubmit</p>\n\n<p>onreset</p>\n\n<p>onselect</p>\n\n<p>onchange</p>\n\n<p>onscroll</p>\n\n<p>onload</p>\n\n<p>onunload</p>\n\n<p>The listed events are event handlers, which are functions that are executed when a specific event occurs on a web page. For example, the \"onclick\" event handler is executed when a user clicks on an element on a web page. Similarly, the \"onload\" event handler is executed when the page has finished loading in the browser.</p>\n   \n\n<p>These event handlers can be added to HTML elements using the \"on\" prefix followed by the event name, such as \"onclick\" or \"onload\". When the specified event occurs, the function assigned to the event handler is executed. This allows developers to create interactive web pages that respond to user actions.</p>   \n</div>\n      )}\n    \n    {language === 'ru' && (\n        <div>\n          <RuEs5_9 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmEs5_9 />\n        </div>\n      )}\n   \n    </div>\n\n\n\n  )\n}\n\n\n\nexport default JsEs5_9;","/home/artashes/Desktop/codeex/codeex/src/pages/JSES5_1.js",["1005","1006"],[],"/home/artashes/Desktop/codeex/codeex/src/pages/JSES5_2.js",["1007","1008"],[],"import React , { useState } from 'react'\nimport RuEs5_2 from '../lang/RuEs5_2';\nimport AmEs5_2 from '../lang/AmEs5_2';\n\n function JsEs5_2() {\n \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  \n  return (\n    <div className='java-script'>\n       <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n\n      {language === 'en' && (\n        <div>\n        <h3>JavaScript Loops and Conditionals</h3>\n  <b>1. The while loop</b>\n  <p>The while loop is used to execute a block of code repeatedly while a specified condition is true.</p>\n\n<p>Here is an example:</p>\n  \n   <p>{'var i = 0; // initialize the counter variable'}</p> \n\n   <p>{'while (i < 5) { // set the condition'}</p>\n\n   <p>{'console.log(i); // execute the code block'}</p>\n\n   <p>{'i++; // update the counter variable'}</p>\n\n   <p>{'}'}</p>\n   \n  <p>\n  In this example, the loop will run as long as the value of i is less than 5. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 until it reaches 5.\nThe output of this code will be:\n<br/>0<br/>1<br/>2<br/>3<br/>4\n  </p>\n  <b>2. The for loop</b>\n  <p>The for loop is used to execute a block of code a specified number of times.\nHere is an example:</p>\n<pre>\n    <code>\n      {'for (var i = 0; i < 5; i++) {\\n  console.log(i);\\n}'}\n    </code>\n  </pre>\n  <p>\n  In this example, the loop will run 5 times, since the condition specifies that i must be less than 5. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 each time.\n\nThe output of this code will be the same as the previous example:\n<br/>0<br/>1<br/>2<br/>3<br/>4\n  </p>\n  <b>3. The do-while loop</b>\n  <p>\n  The do-while loop is similar to the while loop, but it executes the code block at least once, even if the condition is initially false.\nHere is an example:\n  </p>\n  <p>{'var i = 0; // initialize the counter variable'}</p>\n\n  <p>{'do {'}</p>\n\n  <p>{'console.log(i); // execute the code block'}</p>\n\n  <p>{'i++; // update the counter variable'}</p>\n\n  <p>{'}'}</p>\n\n  <p>{'while (i < 5); // set the condition'}</p>\n\n  <p>\n  In this example, the loop will run at least once, since the condition is checked after the code block is executed. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 each time, until it reaches 5.\nThe output of this code will be the same as the previous examples:\n<br/>0<br/>1<br/>2<br/>3<br/>4\n  </p>\n  <b>4. The ++ and -- operators</b>\n  <p>\n  The ++ and -- operators are used to increment or decrement a variable by 1.\n  Here are some examples:\n  </p>\n  <pre>\n    <code>\n      {'var i = 0; // initialize a variable\\ni++; // increment the variable\\nconsole.log(i); // output: 1\\n\\nvar j = 2; // initialize another variable\\nj--; // decrement the variable\\nconsole.log(j); // output: 1'}\n    </code>\n  </pre>\n  <p>These operators are often used in loops to keep track of the current iteration.</p>\n  <b>5. The if, else, and else if statements</b>\n  <p>\n  The if statement is used to execute a block of code if a specified condition is true. The else statement is used to execute a block of code if the condition is false. The else if statement is used to test multiple conditions.\nHere is an example:\n  </p>\n  <pre>\n    <code>\n      {'var x = 10; // initialize a variable\\nif (x > 10) { // check the condition\\n  console.log(\"x is greater than 10\")'}\n    </code>\n  </pre>\n  <h3>Conditional (ternary) Operator</h3>\n  <p>\n  The Conditional (ternary) Operator is a shorthand way of writing an if-else statement in JavaScript. It takes three operands: a condition, a value to return if the condition is true, and a value to return if the condition is false.\n\nThe syntax for the conditional operator is: (condition) ? true-value : false-value\n\nHere are some examples of using the conditional operator in JavaScript:\n  </p>\n \n  <b>Example 1:</b>\n  <code>\n  <p>{'var a = 5;'}</p>\n\n  <p>{'var result = (a == 5) ? \"true\" : \"false\";'}</p>\n\n  <p>{'document.getElementById(\"example1\"). innerHTML = result;'}</p>\n  </code>\n   \n<p>\nOutput: true\n\nExplanation: In this example, we set the value of variable a to 5, and then we use the conditional operator to check if a is equal to 5. Since it is true, the value \"true\" is returned and assigned to the variable result, which is then printed in the HTML div element.\n</p>\n<b>Example 2:</b>\n\n<p>{' var a = 10;'}</p>\n\n<p>{'var result = (a == 5) ? \"true\" : \"false\";'}</p>\n\n<p>{'document.getElementById(\"example2\"). innerHTML = result;'}</p>\n\n<p>\nOutput: false\n\nExplanation: In this example, we set the value of variable a to 10, and then we use the conditional operator to check if a is equal to 5. Since it is false, the value \"false\" is returned and assigned to the variable result, which is then printed in the HTML div element.\n</p>\n<b>Example 3:</b>\n\n<p>{'var a = 7;'}</p>\n\n<p>{'var result = ( a > 10) ? \"greater than10\":(a < 5) ? \"less than 5\":\"between5and10\";'}</p>\n\n<p>{'document.getElementById(\"example3\"). innerHTML = result;'}</p>\n\n\n<p>\nOutput: between 5 and 10\n\nExplanation: In this example, we set the value of variable a to 7, and then we use the conditional operator to check if a is greater than 10. Since it is false, we move to the second condition which checks if a is less than 5. Since this is also false, we move to the third condition which returns the value \"between 5 and 10\" since it is the only option left. The result is then printed in the HTML div element.\n</p>\n</div>\n\n)}\n\n{language === 'ru' && (\n        <div>\n          <RuEs5_2 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmEs5_2 />\n        </div>\n      )}\n    </div>\n  )\n}\n\n\n\nexport default JsEs5_2;","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_1.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_1.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_2.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_2.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_3.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_3.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_4.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_4.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_5.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_5.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_6.js",["1009","1010"],[],"import React from 'react'\n\n function RuEs5_6() {\n\n  return (\n\n<div>\n\n    <h3>Глобальный объект в JavaScript</h3>\n\n<p>\nГлобальный объект в JavaScript - это встроенный объект, который доступен везде в коде. Он предоставляет свойства и методы, используемые различными частями языка, и может также быть расширен с помощью пользовательских функций.\n</p>\n\n<div>\n\n    <p>Некоторые из свойств и методов глобального объекта в JavaScript:</p>\n\n    <p>1. Infinity - представляет математическое значение бесконечности</p>\n\n    <p>Пример: console.log(Infinity);</p>\n\n    <p>2. NaN - представляет значение \"не число\".</p>\n\n    <p>Пример: console.log(NaN);</p>\n\n    <p>3. console - предоставляет методы для записи информации в консоль.</p>\n\n    <p>Пример: console.log('Привет, мир!');</p>\n\n    <p>4. parseInt() - преобразует строку в целое число.</p>\n\n    <p>Пример: console.log(parseInt('10'));</p>\n\n    <p>5. parseFloat() - преобразует строку в число с плавающей точкой.</p>\n\n    <p>Пример: console.log(parseFloat('3.14'));</p>\n\n    <p>6. encodeURIComponent() - кодирует компонент URI.</p>\n\n    <p>7. Date - предоставляет методы для работы с датами и временем.</p>\n\n    <p>Пример: console.log(new Date());</p>\n\n    <p>8. Math - предоставляет математические функции и константы.</p>\n\n    <p>Пример: console.log(Math.PI);</p>\n\n</div>\n\n<p>\nМетоды глобального объекта могут быть вызваны откуда угодно в коде, без необходимости создавать экземпляр объекта. Однако необходимо быть осторожным при расширении глобального объекта с помощью пользовательских методов, так как они могут потенциально конфликтовать с встроенными методами или другими пользовательскими методами. \n</p>\n\n<p>\nВажно отметить, что в современных средах JavaScript глобальный объект не всегда доступен во всех контекстах, таких как код на основе модулей или в строгом режиме.\n</p>\n\n<h3>Работа со строками в JavaScript ES5</h3>\n\n<p>\nВ JavaScript ES5 строка представляет собой последовательность символов и может быть обработана с помощью различных методов. Два метода для извлечения подстрок из строки - это slice() и substring().\n</p>\n\n<p>\nМетод slice() извлекает секцию строки и возвращает ее в виде новой строки, не изменяя исходную строку. Он принимает два параметра: начальный индекс и конечный индекс (необязательный). Если конечный индекс не предоставлен, метод извлечет до конца строки. Если начальный индекс отрицательный, он считает с конца строки.\n</p>\n\n<p>\nМетод substring() похож на slice(), но не принимает отрицательные индексы. Если начальный индекс больше конечного индекса, два индекса меняются местами, чтобы избежать ошибки.\n</p>\n\n<p>Вот несколько примеров</p>\n\n<p>{'// Получение подстроки \"is\"'}</p>\n\n<p>{'str.slice(5, 7); //\"is\"'}</p>\n\n<p>{'str.substring(5, 7); //\"is\"'}</p>\n\n<hr/>\n\n<p>{'// Получение подстроки \"is\"'}</p>\n\n<p>{'console.log(str.slice(5, 7)); //\"is\"'}</p>\n\n<p>{'console.log(str.substring(5, 7)); //\"is\"'}</p>\n\n<p>{'// Получение подстроки \"is my text\"'}</p>\n\n<p>{'console.log(str.slice(5)); //\"is my text\"'}</p>\n\n<p>{'console.log(str.substring(5)); //\"is my text\"'}</p>\n\n<hr/>\n\n<p>{'// Получить подстроку \" \"'}</p>\n\n<p>{'console.log(str.slice(7, 5)); //\" \"'}</p>\n\n<p>{'console.log(str.substring(7, 5)); //\"is\"'}</p>\n\n<hr/>\n\n<p>{' // Получить подстроку \"my\"'}</p>\n\n<p>{'console.log(str.slice(-7, -5)); //\"my\"'}</p>\n\n<p>{'console.log(str.substring(7, 5)); //\" \"'}</p>\n\n<p>В приведенных выше примерах функции slice() и substring() используются для извлечения подстрок из переменной str. В первом примере извлекается подстрока \"is\", а во втором примере - \"is my text\". Третий и четвертый примеры показывают, как функции slice() и substring() обрабатывают случаи, когда индексы выходят за границы строки. Наконец, пятый пример показывает, как функция slice() может использоваться с отрицательными индексами для извлечения подстроки с конца строки.</p>\n\n<h3>Тема: \"Поиск подстроки\" в JavaScript ES5.</h3>\n\n<p>В JavaScript можно искать определенную подстроку в строке с помощью различных методов. Вот некоторые из наиболее распространенных:</p>\n\n<p>1. Тема: \"Поиск подстроки\" в JavaScript ES5.\nВ JavaScript можно искать определенную подстроку в строке с помощью различных методов. Вот некоторые из наиболее распространенных:</p>\n\n<p>indexOf(substring, start): Этот метод ищет подстроку в строке и возвращает индекс первого вхождения подстроки. Вы также можете указать начальную позицию поиска, передав необязательный параметр start. Если подстрока не найдена, возвращается -1.</p>\n\n<b>Пример</b>\n\n \n  <code>\n    {'var message = \"Привет, мир\";\\nvar index = message.indexOf(\"мир\");\\nconsole.log(index); // 8'}\n  </code>\n \n\n<p>\n 2. lastIndexOf(substring, end): Этот метод работает так же, как и indexOf, но ищет последнее вхождение подстроки в строку, ища задом наперед от конца строки. Вы также можете указать конечную позицию поиска, передав необязательный параметр end.\n</p>\n\n<b>Пример</b>\n\n<p>{'var message = \"Привет, мир, привет!\";'}</p>\n\n<p>{'var index = message.lastIndexOf(\"привет\");'}</p>\n\n<p>{'console.log(index); // 13'}</p>\n<p>\n  Обратите внимание, что регистр подстроки имеет значение при использовании этих методов. Например, поиск \"мир\" в строке \"Привет, мир\" не найдет подстроку, так как она написана с заглавной буквы.\n</p>\n\n<p>3.includes(substring): Этот метод проверяет, присутствует ли заданная подстрока в строке, и возвращает логическое значение, указывающее на результат.</p>\n\n    <b>Пример</b>\n\n     \n  <code>\n    {'var found = message.includes(\"мир\");\\nconsole.log(found); // true'}\n  </code>\n \n<p>4. search(regex): Этот метод ищет регулярное выражение в строке и возвращает индекс первого совпадения. Если совпадение не найдено, он возвращает -1.</p>\n   \n<b>Пример</b>\n\n<p>{'var message = \"Привет мир, привет!\";'}</p>\n\n<p>{'var index = message.search(/привет/i);//флаг \"i\" делает поиск без учета регистра'}</p>\n\n<p>{'console.log(index);// 0'}</p>\n\n<p>В вашем примере переменная str содержит строку \"This is my text\". Следующие строки кода демонстрируют использование методов поиска строк, описанных выше:</p>\n\n<p>{'var str = \"This is my text\";'}</p>\n\n<p>{'console.log(str.indexOf(\"is\")); //2'}</p>\n\n<p>{'console.log(str.indexOf(\"is\", 3)); //5'}</p>\n\n<p>{'console.log(str.lastIndexOf(\"is\")); //5'}</p>\n\n<p>{'console.log(str.lastIndexOf(\"is\", 4)); //2'}</p>\n\n<p>{'console.log(str.indexOf(\"some\")); //-1'}</p>\n\n<p>Эти строки кода ищут подстроки \"is\" и \"some\" в строке str и возвращают их индексы, используя методы indexOf и lastIndexOf. Второй параметр indexOf указывает начальную позицию поиска, а второй параметр lastIndexOf указывает конечную позицию поиска.</p>\n\n<h3>RegEx</h3>  \n\n<p>RegExp - это встроенный объект, который предоставляет способ создания регулярных выражений. Регулярные выражения - это шаблоны, используемые для сопоставления комбинаций символов в строках.</p>\n\n<b>Вот пример создания объекта регулярного выражения с использованием конструктора:</b>\n\n \n  <code>\n    {'var regex = new RegExp(\"some\", \"long\");'}\n  </code>\n \n\n<p>Здесь some является флагом регулярного выражения, а long - необязательным флагом, который изменяет поведение регулярного выражения.</p>\n\n<p>Вот пример использования метода test() объекта RegExp для проверки, соответствует ли строка регулярному выражению:</p>\n\n<p>{'var str = \"The quick brown fox jumps over the lazy dog\";'}</p>\n\n<p>{'var regex = /fox/i;'}</p>\n\n<p>{'var result = regex.test(str);'}</p>\n\n<p>{'console.log(result); // true '}</p>\n\n<p>В этом примере /fox/i - это шаблон регулярного выражения, который соответствует слову \"fox\" без учета регистра. Метод test() возвращает логическое значение, указывающее, соответствует ли шаблон регулярного выражения строке str.</p>\n\n<p>Вот еще один пример использования метода match() объекта String с регулярным выражением для извлечения соответствующих значений:</p>\n\n<p>{'var str = \" The quick brown fox jumps over the lazy dog \";'}</p>\n\n<p>{'var regex = /fox/i;'}</p>\n\n<p>{'var result = str.match(regex);'}</p>\n\n<p>{'console.log(result); // [\"fox\"]'}</p>\n\n<hr/>\n\n<p>В этом примере метод match() возвращает массив, содержащий найденную подстроку(и), если шаблон регулярного выражения найден в строке.</p>\n\n<b>А вот некоторые часто используемые специальные символы в регулярных выражениях:</b>\n\n<p>.- Соответствует любому символу, кроме перевода строки \\n</p>\n\n<p>\\w - Соответствует любому ASCII-символу слова [a-zA-Z0-9_]</p>\n\n<p>\\W - Соответствует любому не-ASCII-символу слова [^a-zA-Z0-9_]</p>\n\n<p>\\d - Соответствует любой ASCII-цифре [0-9]</p>\n\n<p>\\D - Соответствует любому не-цифровому символу [^0-9]</p>\n\n<p>\\s - Соответствует любому символу Unicode пробела</p>\n\n<p>\\S - Соответствует любому не-пробельному символу</p>\n\n \n  <code>\n    {'var myStr = \"awesome Text\";\\nvar myRegExp = /[a-zA-Z0-9]/;\\nvar result = myRegExp.test(myStr);\\nconsole.log(result); //true'}\n  </code>\n \n\n<b>^ - Соответствует началу строки</b><br/>\n\n<b>$ - Соответствует концу строки</b>\n\n<p>Флаги:</p>\n\n<b>i - ignoreCase</b>\n\n<p>{'var exp = /a/i // ищет буквы в верхнем и нижнем регистре'}</p>  \n\n<b>g - global</b><br/>\n\n<b>Ищет все вхождения шаблона в строке</b>\n\n<p>{'var str = \"Borobudur\";'}</p>\n\n<p>{'var pattern = /[ou]/g;'}</p>\n\n<p>{'console.log(str.replace(pattern, \"a\")); //\"Barabadar\"\";'}</p>\n\n<b>m - multiline</b><br/>\n\n<b>Ищет все вхождения шаблона во всех строках строки</b>\n\n<p>{'var str = \"Some text And some more\\r\\nAnd yet\\rThis is the end\";'}</p>\n\n<p>{'var pattern = /(\\w+)\\s/g;'}</p>\n\n<p>{'console.log(str.match(pattern)); // [\"Some \", \"text\\n\", \"And \", \"some \", \"more\\r\\n\", \"And \", \"yet\\r\", \"This \", \"is \", \"the \", \"end\"]'}</p>\n\n   <p>\n   Здесь мы определяем строку str со значением \"это мой текст\". Затем мы определяем шаблон регулярного выражения, \n   который соответствует началу строки (^), за которым следует одна или несколько строчных букв ([a-z]+), \n   разделенных пробелами, и конец строки ($). Мы используем скобки для захвата каждой группы букв в качестве отдельного подшаблона.\n   </p>\n\n   <p>\n   Наконец, мы используем метод replace() на строке, передавая шаблон и строку замены, которая использует символ $ для ссылки на захваченные подшаблоны в порядке их определения. В этом случае мы меняем местами первую и вторую группы букв, оставляя третью и четвертую группы на месте.\n   </p>\n\n   <p>Вот код:</p>\n\n<p>{'var str = \"this is my text\";'}</p>\n\n<p>{'var pattern = /^([a-z]+) ([a-z]+) ([a-z]+) ([a-z]+)$/;'}</p>\n\n<p>{'var res = str.replace(pattern, \"$2 $1 $3 $4\");'}</p>\n\n<p>{'console.log(res); // \"is this my text\"'}</p>   \n\n    </div>\n  )\n}\n\n\n\nexport default RuEs5_6;\n\n\n\n","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_6.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_7.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_7.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_8.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_8.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_9.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_9.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuEs6.js",["1011","1012"],[],"import React from 'react'\n\nfunction RuEs6() {\n  return (\n    <div>\n  <h1>JavaScript ES6 (ECMAScript 2015) - это шестая версия JavaScript, которая внесла новые возможности и улучшения синтаксиса в язык. Вот некоторые ключевые особенности ES6:</h1>\n\n<p>1. <b>let</b> и <b>const</b>: это новые объявления переменных, которые заменяют старое ключевое слово <b>var</b>. Они обеспечивают лучшие правила области видимости и помогают избежать распространенных ошибок, которые могут возникнуть с <b>var</b>.</p>\n\n<p>2. Стрелочные функции: стрелочные функции обеспечивают более короткий синтаксис для записи выражений функций. Они также лексически привязывают значение <b>this</b>, что упрощает рассуждение о области действия функции.</p>\n\n<p>3. Шаблонные литералы: этот функционал обеспечивает способ вставки выражений внутрь строк, используя обратные кавычки вместо кавычек. Это упрощает создание строк с динамическим содержимым.</p>\n\n<p>4. Оператор расширения: оператор расширения представлен тремя точками (...). Он позволяет расширять итерируемые объекты, такие как выражения массивов или строк, в местах, где ожидаются ноль или более аргументов (для вызовов функций) или элементов (для литералов массивов).</p>\n\n<p>5. Деструктурирование: деструктурирование обеспечивает способ извлечения данных из массивов и объектов в отдельные переменные с использованием краткой записи синтаксиса.</p>\n\n<p>6. Классы: ES6 представил новый синтаксис классов, который обеспечивает более простой и интуитивно понятный способ создания объектов и определения их поведения.</p>      \n\n<p>7. Модули: Модули - это способ организации кода в отдельные, самодостаточные файлы, которые могут легко импортироваться и экспортироваться по мере необходимости. Это позволяет более эффективно разрабатывать и поддерживать большие приложения. ES6 ввел стандартизированный синтаксис модуля с использованием ключевых слов import и export, что упрощает совместное использование кода в нескольких файлах и проектах.</p>\n\n<p>8. Классы: ES6 ввел новый синтаксис для создания классов, который позволяет использовать объектно-ориентированное программирование в JavaScript. Классы могут использоваться для создания объектов с свойствами и методами, а также могут наследовать другие классы. Этот синтаксис упрощает написание и поддержку сложного кода, а также может улучшить читаемость и повторное использование вашего кода.</p>\n\n<p>9. Промисы: Промисы - это способ обработки асинхронных операций в JavaScript. Они предоставляют стандартизированный способ обработки результата асинхронной операции, либо ее разрешения, либо отклонения значения. Промисы могут объединяться и комбинироваться с другими функциями, такими как async/await, чтобы создавать более сложные и мощные асинхронные потоки.</p>\n\n<p>Это лишь некоторые из многих функций, введенных в ES6. Изучение и использование этих функций могут значительно улучшить ваш код JavaScript и сделать ваш процесс разработки более эффективным и эффективным.</p>\n\n<b>Переменные ES6</b>\n\n<p>{'const num = 10; '}</p>\n\n<p>{'console.log(num);// 10'}</p>\n\n<p>{'{'}</p>\n\n<p>{'const num2 = 20;'}</p>\n\n<p>{'console.log(num2); // 20 '}</p>\n\n<p>{'}'}</p>\n\n<p>{'// num2 не определено'}</p>\n\n<p>{'console.log(num); // 10'}</p>\n\n<p>Этот код использует переменные ES6. Первая строка создает константную переменную с именем \"num\" и присваивает ей значение 10. Вторая строка начинает блок кода, используя фигурные скобки, которые являются новой функцией в ES6.</p>\n\n<p>Внутри этого блока объявляется новая переменная с именем \"num2\" с использованием ключевого слова \"const\" и присваивается значение 20. Эта переменная доступна только внутри блока, потому что она была объявлена с использованием ключевого слова \"const\", которое создает переменную с областью видимости блока. Третья строка выводит значение \"num2\" в консоль, которое будет равно 20.</p>\n\n<p>После блока вызывается еще один оператор console.log, но на этот раз выводится значение переменной \"num\", которая находится за пределами блока и, следовательно, доступна. Наконец, код пытается вывести значение \"num2\", но так как оно было объявлено внутри блока и не доступно за его пределами, возникнет ошибка, сообщающая, что \"num2 не определен\".</p>\n\n<b>Переменные ES6</b>\n\n<p>{'const name = \"Leo\";'}</p>\n\n<p>{'const name = \"Kevin\"; //Идентификатор (name) уже был объявлен'}</p>\n\n<p>{'const name = \"Leo\";'}</p>\n\n<p>{'if (true) { '}</p>\n\n<p>{'const name = \"Mike\";'}</p>\n\n<p>{'console.log(name); // Mike'}</p>\n\n<p>{'}'}</p>\n\n<p>{'console.log(name); // Leo'}</p>\n\n <p>Этот код объявляет константную переменную \"name\", а затем пытается ее переопределить с другим значением, что приводит к ошибке \"Идентификатор 'name' уже был объявлен\".</p>\n\n<p>Затем код переопределяет \"name\" как \"Leo\" и создает область видимости блока с помощью оператора if. Внутри блока объявляется новая переменная \"name\" со значением \"Mike\", которое затем выводится в консоль. За пределами блока в области видимости остается исходная переменная \"name\" со значением \"Leo\", которая также выводится в консоль.</p>\n\n<p>Таким образом, вывод этого кода состоит из сообщения об ошибке \"Идентификатор 'name' уже был объявлен\", за которым следуют \"Mike\" и \"Leo\".</p>\n\n<b>Переменные ES6</b>\n\n<p>{'if (true) {'}</p>\n\n<p>{'// Темпоральная зона до объявления'}</p>\n\n<p>{'console.log(typeof value); // value не определена'}</p>\n\n<p>{'let value = 10;'}</p>\n\n<p>{'} '}</p>\n\n<p>{'console.log(typeof value); // undefined'}</p>\n\n<p>\nКлючевое слово <b>let</b> используется для объявления переменной <b>value</b> внутри блока. Однако, когда вызывается <b>typeof value</b> внутри блока до объявления <b>value</b>, движок JavaScript выбрасывает ошибку ReferenceError, потому что переменная еще не определена. Это называется Темпоральной зоной до объявления, которая относится к периоду времени между созданием переменной и ее объявлением, когда к ней нельзя получить доступ. Оператор <b>console.log(typeof value)</b> за пределами блока возвращает <b>undefined</b>, потому что <b>value</b> не определена в текущей области видимости.     \n</p>\n\n<p>Во втором блоке кода:</p>\n\n<p>{'if(true) {'}</p>\n\n<p>{'let value = 10;'}</p>\n\n<p>{'}'}</p>\n\n<p>Переменная <b>value</b> объявляется и присваивается значение <b>10</b> внутри блока. Однако, поскольку блок не находится в глобальной области видимости, и <b>value</b> не возвращается или не присваивается переменной во внешней области видимости, значение <b>value</b> фактически теряется после завершения выполнения блока.</p>\n\n<b>Переменные ES6</b>   \n\n<p>Этот код демонстрирует разницу в области видимости переменных при использовании var и let в цикле for.</p>\n\n<pre>\n    <code>\n    <p>{'for(var i = 0; i < 5; i++) {'}</p>\n        <p>{'// Код здесь'}</p>\n    <p>{'}'}</p>\n    <p>{'console.log(i); // 5 '}</p>\n    \n    <p>{'for(let i = 0; i < 5; i++) {'}</p>\n        <p>{'// Код здесь'}</p>\n    <p>{'}'}</p>\n    <p>{'console.log(i); // i не определен'}</p>\n</code>\n</pre>\n<p>\nВ первом примере переменная i объявляется с использованием var, которая имеет область видимости на уровне функции. Это означает, что переменная существует за пределами цикла for, и поэтому значение i равно 5 при выводе в консоль.\n</p>\n<p>\nВо втором примере i объявляется с использованием let, которая имеет область видимости на уровне блока. Это означает, что переменная существует только внутри блока цикла for и не доступна за его пределами. Поэтому при выводе i в консоль за пределами цикла возникает ошибка ссылки, говорящая о том, что i не определена.\n</p>\n<b>Оператор расширения ES6 (Spread Operator)</b>\n\n<p>\nОператор расширения - это новая функция, введенная в ES6, которая позволяет расширять или разворачивать итерируемые объекты в отдельные элементы. Этим итерируемым объектом может быть массив, строка или любой другой итерируемый объект.\n</p>    \n\n<b>\n    Оператор расширения (spread operator) представлен тремя точками (...) и может использоваться в различных контекстах. Вот несколько примеров:\n</b>\n\n<p>1. Использование оператора расширения для объединения массивов:</p>\n\n<p>{'const array1 = [1, 2, 3];'}</p>\n\n<p>{'const array2 = [4, 5, 6];'}</p>\n\n<p>{'const newArray = [...array1, ...array2];'}</p>\n\n<p>{'console.log(newArray); // [1, 2, 3, 4, 5, 6]'}</p>\n\n<p>2. Использование оператора расширения для создания копии массива:</p>\n\n<p>{'const array1 = [1, 2, 3];'}</p>\n\n<p>{'const array2 = [...array1];'}</p>\n\n<p>{'console.log(array2); // [1, 2, 3]'}</p>\n\n<p>3. Использование оператора расширения для передачи аргументов в функцию:</p>\n\n<p>{'function sum(a, b, c) { '}</p>\n\n<p>{' return a + b + c;'}</p>\n\n<p>{'}'}</p>\n\n<p>{'const numbers = [1, 2, 3];'}</p>\n\n<p>{'const result = sum(...numbers);'}</p>\n\n<p>{'console.log(result); // 6'}</p>\n\n<p>4. Использование оператора расширения для объединения объектов: </p>\n\n<p>{'const object1 = { x: 1, y: 2 };'}</p>\n\n<p>{'const object2 = { z: 3 };'}</p>\n\n<p>{'const mergedObject = { ...object1, ...object2 };'}</p>\n\n<p>{'console.log(mergedObject); // { x: 1, y: 2, z: 3 }'}</p>\n\n<p>\n    Во всех этих примерах оператор распространения используется для раскрытия итерируемого объекта в отдельные элементы. \n    Это полезная функция, которая может упростить ваш код и сделать его более читабельным.  \n</p>\n\n<b>Деструктуризация в ES6</b>\n\n<p>\nДеструктуризация в ES6 является способом извлечения значений из объектов или массивов \nи присваивания их переменным более кратким и читаемым способом. \n</p>\n\n<p>Например, рассмотрим следующий объект:</p>\n\n<p>{'const person = { '}</p>\n\n<p>{`name: ' John Doe ' , `}</p>\n\n<p>{' age: 30,'}</p>\n\n<p>{` email: 'john.doe@example.com'`}</p>\n\n<p>{'};'}</p>\n\n<p>Вместо доступа к каждому свойству по отдельности, как здесь:</p>\n\n<p>{'const name = person.name;'}</p>\n\n<p>{'const age = person.age;'}</p>\n\n<p>{'const email = person.email;'}</p>\n\n<p>Вы можете использовать деструктуризацию, чтобы присвоить каждому свойству переменную более кратким способом:</p>\n\n<p>{'const { name, age, email } = person;'}</p>\n\n<p>Это создает три переменные <b>(name, age и email)</b> и присваивает им значения соответствующих свойств объекта person.</p>\n\n<p>Также можно использовать деструктуризацию с массивами. Например:</p>\n<p>{'const numbers = [1, 2, 3, 4, 5];'}</p>\n<p>{'const [first, second, ...rest] = numbers;'}</p>\n<p>{'console.log(first); // 1'}</p>\n<p>{'console.log(second); // 2'}</p>\n<p>{'console.log(rest); // [3, 4, 5]'}</p>\n<p>\n    Этот код создает три переменные <b>(first, second и rest)</b> и присваивает им значения первых двух элементов в массиве <b>numbers</b>, а также оставшихся элементов соответственно.\n</p>\n<p>\n    Деструктуризация также может использоваться с вложенными объектами и массивами, и даже может иметь значения по умолчанию, присваиваемые переменным в случае, если значение, которое деструктурируется, не определено. \n</p>\n<p>\n    В целом, деструктуризация - это мощная функция в ES6, которая может помочь сделать ваш код более читаемым и кратким.\n</p>\n<b>Цикл ES6 (for - of)</b>\n\n<p>ES6 представил новый тип цикла в JavaScript, называемый циклом <b>for...of</b>. \n    Этот цикл используется для перебора элементов итерируемого объекта, таких как массивы, строки, карты, множества и т.д.</p>\n<p>Вот пример использования цикла <b>for...of</b> для перебора массива:</p>\n\n<p>{'const arr = [1, 2, 3, 4, 5];'}</p>\n\n<p>{'for(let num of arr) { '}</p>\n\n<p>{'console.log(num);'}</p>\n\n<p>{'} '}</p>\n\n<p>В этом примере цикл <b>for...of</b> перебирает каждый элемент в массиве <b>arr</b> и выводит его в консоль.</p>\n\n<p>Мы также можем использовать цикл <b>for...of</b> для перебора символов в строке:</p>\n\n<p>{'const str = \"Hello, world!\";'}</p>\n\n<p>{'for(let char of str) {'}</p>\n\n<p>{'console.log(char);'}</p>\n\n<p>{'}'}</p>\n\n<p>В этом примере цикл <b>for...of</b> перебирает каждый символ в строке <b>str</b> и выводит его в консоль.</p>\n\n <p>Также мы можем использовать цикл <b>for...of</b> для перебора ключей или значений объекта Map:</p>\n\n<p>{'const map = new Map(['}</p>\n\n<p>{`['a', 1],`}</p>\n\n<p>{`['b', 2],`}</p>\n\n<p>{`['c', 3]`}</p>\n\n<p>{']);'}</p>\n\n\n<p>{'for(let [key, value] of map) {'}</p>\n\n<p>{'console.log(key, value);'}</p>\n\n<p>{'}'}</p>\n\n<p>В этом примере цикл <b>for...of</b> перебирает каждую пару ключ-значение в объекте <b>map</b> и выводит их в консоль.</p>\n\n<p>В целом, цикл <b>for...of</b> - это полезное дополнение к языку JavaScript, которое упрощает перебор итерируемых объектов.</p>\n\n<b>Параметр остаточных значений функции ES6</b>\n\n<p>Параметр остаточных значений функции ES6 - это функциональность, которая позволяет функции принимать неопределенное количество аргументов в виде массива. Его обозначают тремя точками (...) и именем параметра.</p>\n\n<p>Вот пример использования параметра остаточных значений:</p>\n\n<p>{'function sum(...numbers) {'}</p>\n\n<p>{'let result = 0;'}</p>\n\n<p>{'for (let number of numbers) {'}</p>\n\n<p>{' result += number;'}</p>\n\n<p>{' }'}</p>\n\n<p>{'return result;'}</p>\n\n<p>{'}'}</p>\n\n<p>{'console.log(sum(1, 2, 3)); // Вывод: 6'}</p>\n\n<p>{'console.log(sum(4, 5, 6, 7)); // Вывод: 22'}</p>\n\n<p>\nВ приведенном выше примере функция sum принимает неопределенное количество аргументов, используя параметр остаточных аргументов ...numbers. Затем она проходит по массиву чисел, используя цикл for...of, чтобы сложить значения и вернуть результат.  \n</p>\n\n<p>\nПараметр остаточных аргументов полезен, когда вы хотите написать функцию, которая может обрабатывать переменное количество аргументов, не задавая каждый аргумент явно. Он часто используется в функциях, которые манипулируют массивами или выполняют математические операции над набором значений.  \n</p>\n\n<p>\nВ целом, параметр остаточных аргументов - это удобная функция, которая облегчает написание более гибких и универсальных функций.  \n</p>\n\n<b>Стрелочные функции(Arrow functions)</b>\n\n<p>\n    Стрелочные функции - это краткий способ написания функций в JavaScript, введенный в ES6 (ECMAScript 2015). Они обеспечивают более компактный синтаксис по сравнению с традиционными выражениями функций, что упрощает чтение и написание кода.  \n</p>\n\n<p>\nВот пример традиционного выражения функции, которая принимает два параметра и возвращает их сумму:  \n</p>\n\n<p>{'function sum(a, b) {'}</p>\n\n<p>{'return a + b;'}</p>\n\n<p>{'}'}</p>\n\n<p>Ту же функцию можно написать, используя стрелочную функцию, следующим образом:</p>\n\n<p>{'const sum = (a, b) => a + b;'}</p>\n\n<p>В этом примере функция определена с помощью синтаксиса стрелки <b>{'=>.'}</b>. Параметры <b>(a, b)</b> заключены в скобки, за которыми следует стрелка <b>{'=>'}</b> и тело функции <b>a + b.</b> Поскольку тело функции состоит из одного оператора, фигурные скобки и ключевое слово <b>return</b> могут быть опущены.\n</p>\n\n<p>\nСтрелочные функции также могут использоваться как анонимные функции, назначаться переменным и передаваться в качестве аргументов другим функциям. Вот пример стрелочной функции, которая принимает массив и возвращает новый массив, в котором каждый элемент удвоен:  \n</p>\n\n<p>{'const doubleArray = arr => arr.map(item => item * 2);'}</p>\n\n<p>\nВ этом примере стрелочная функция{' (item => item * 2)'} передается в качестве аргумента методу <b>map()</b>, который применяет функцию к каждому элементу массива и возвращает новый массив с измененными значениями.  \n</p>\n\n<p>\nУ стрелочных функций также есть лексическое привязывание <b>this</b>, что означает, что <b>this</b> относится к значению <b>this</b> в замыкающей области видимости, а не собственному <b>this</b> функции. Это делает стрелочные функции особенно полезными для работы с методами объектов и обработчиками событий.  \n</p> \n\n<p>\nВ целом, стрелочные функции предоставляют более краткий и читаемый способ написания функций на JavaScript, упрощая понимание и поддержку кода.  \n </p>\n\n <b>Прототип(Prototype)</b>\n\n<p>\nВ JavaScript каждый объект имеет внутреннее свойство, называемое [[Prototype]] (иногда называемое \"dunder proto\"), которое ссылается на другой объект или null. Это свойство используется для реализации наследования и позволяет объектам наследовать свойства и методы от своих прототипов.  \n</p>\n\n<p>\nВ ES5 вы можете создавать прототип с помощью конструкторов функций и свойства prototype. Вот пример:  \n</p>\n\n<p>{'function Person(name, age) { '}</p>\n\n<p>{'this.name = name;'}</p>\n\n<p>{'this.age = age;'}</p>\n\n<p>{'} '}</p>\n\n<p>{'Person.prototype.greet = function() { '}</p>\n\n<p>{'console.log(`Привет, меня зовут ${this.name} и мне ${this.age} лет.`);'}</p>\n\n<p>{'} '}</p>\n\n<p>{'const john = new Person(\"John\", 30);'}</p>\n\n<p>{'john.greet(); // \"Привет, меня зовут John и мне 30 лет.\"'}</p>\n\n<p>В этом примере мы создаем конструктор функции с именем <b>Person</b>, который принимает <b>name</b> и <b>age</b> в качестве аргументов и устанавливает их как свойства объекта. Затем мы добавляем метод <b>greet</b> в прототип <b>Person</b> с помощью объекта <b>Person.prototype</b>. Этот метод записывает приветственное сообщение в консоль, которое включает имя и возраст человека.</p>\n\n<p>При создании нового объекта с помощью ключевого слова <b>new</b> и конструктора <b>Person</b>, свойство [[Prototype]] нового объекта будет указывать на объект <b>Person.prototype</b>. Это позволяет новому объекту наследовать метод <b>greet</b> от его прототипа.</p>\n\n<p>В ES6 вы можете использовать синтаксис <b>class</b>, чтобы определить класс и его прототип. Вот тот же пример, используя классы ES6:</p>\n\n<p>{'class Person {'}</p>\n\n<p>{'constructor(name, age) {'}</p>\n\n<p>{'this.name = name;'}</p>\n\n<p>{'this.age = age;'}</p>\n\n<p>{'}'}</p>\n\n<p>{'greet() {'}</p>\n\n<p>{'console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);'}</p>\n\n<p>{'}'}</p>\n\n<p>{'}'}</p>\n\n<p>{`const john = new Person(\"John\", 30);`}</p>\n\n<p>{`john.greet(); // \"Hello, my name is John and I am 30 years old.\"`}</p>\n\n<p>В этом примере мы определяем класс <b>Person</b> с конструктором, который принимает <b>name</b> и <b>age</b> и устанавливает их в качестве свойств объекта. Затем мы определяем метод <b>greet</b> непосредственно в классе. Под капотом синтаксис <b>class</b> создает конструктор функции и устанавливает его прототип на прототип класса.</p>\n \n<p>\nКонцепция прототипов используется как в ES5, так и в ES6 для реализации наследования в JavaScript, но синтаксис определения прототипов различен. Классы ES6 предоставляют более краткий и интуитивно понятный синтаксис для создания классов и определения их прототипов, в то время как прототипы ES5 предоставляют большую гибкость и контроль над тем, как определяются прототипы.   \n</p>\n\n<b>Класс (статические методы)</b>\n\n<p>\nВ ES6 были введены классы как способ создания шаблонов объектов. Классы являются шаблоном для создания объектов, которые инкапсулируют данные и функциональность. Одной из особенностей классов является возможность определения статических методов, которые вызываются на самом классе, а не на экземпляре класса.\n</p>\n\n<p>\nСтатический метод - это метод, принадлежащий самому классу, а не какому-либо экземпляру класса. Его можно вызвать на классе, не создавая сначала экземпляр класса.   \n</p>\n\n<p>\nВот пример класса с статическим методом:  \n</p>\n\n<p>{'class Car {'}</p>\n\n<p>{'constructor(make, model) {'}</p>\n\n<p>{'this.make = make;'}</p>\n\n<p>{'this.model = model;'}</p>\n\n<p>{'}'}</p>\n\n<p>{'static compare(car1, car2) {'}</p>\n\n<p>{'if (car1.make === car2.make) {'}</p>\n\n<p>{' return \"Same make\";'}</p>\n\n<p>{' } else {'}</p>\n\n<p>{'return \"Different make\";'}</p>\n\n<p>  {' }'}</p>\n\n<p>{' }'}</p>\n\n<p>{' }'}</p>\n\n<p>{'let car1 = new Car(\"Honda\", \"Civic\");'}</p>\n\n<p>{'let car2 = new Car(\"Toyota\", \"Corolla\");'}</p>\n\n<p>{'console.log(Car.compare(car1, car2)); // \"Different make\"'}</p> \n\n<p>\nВ приведенном выше примере класс Car имеет статический метод compare. Этот метод принимает два объекта Car в качестве параметров и возвращает строку, указывающую, имеют ли они одинаковый make (производитель автомобиля) или нет. Метод compare может быть вызван на самом классе Car, а не на экземпляре класса.\n</p>\n<p>\nОбратите внимание, что в методе compare ключевое слово this не используется, поскольку метод не вызывается на экземпляре класса. Вместо этого метод принимает два объекта Car в качестве параметров и сравнивает их свойства make.\n</p>\n<p>\nВ ES5 статические методы могут быть определены на функции-конструкторе с использованием свойства prototype функции-конструктора. Вот пример того, как вышеуказанный класс ES6 может выглядеть в ES5:\n</p>\n<p>{'function Car(make, model) {'}</p>\n\n<p>{'this.make = make;'}</p>\n\n<p>{'this.model = model;'}</p>\n\n<p>{'} '}</p>\n\n<p>{'Car.compare = function(car1, car2) {'}</p>\n\n<p>{'if (car1.make === car2.make) {  '}</p>\n\n<p>{'return \"Same make\"; '}</p>\n\n<p>{'} else { '}</p>\n\n<p>{' return \"Different make\";'}</p>\n\n<p>{'}'}</p>\n\n<p>{'}; '}</p>\n\n<p>{'let car1 = new Car(\"Honda\", \"Civic\"); '}</p>\n\n<p>{'let car2 = new Car(\"Toyota\", \"Corolla\");'}</p>\n\n<p>{'console.log(Car.compare(car1, car2)); // \"Different make\"'}</p>\n\n<p>\nВ примере ES5 метод compare определяется непосредственно на функции-конструкторе Car, а не на ее свойстве прототипа. Это позволяет вызывать метод на самой функции-конструкторе Car.\n</p>\n\n<b>Символ (Symbol) </b> \n\n<p>\n  В ES6 символ (Symbol) - это новый примитивный тип данных, который представляет уникальный идентификатор. В отличие от строк или чисел, символы гарантированно уникальны и неизменяемы, что делает их полезными для создания ключей или свойств объектов, которые должны быть абсолютно уникальными.  \n  </p>\n\n  <p>Для создания символа можно использовать функцию <b>Symbol()</b>, например:</p>\n\n  <p>{'const mySymbol = Symbol();'}</p>\n\n  <p>Также можно добавить описание символа, чтобы легче идентифицировать его позже, например:</p>\n\n  <p>{\"const mySymbol = Symbol('Мой символ'); \"}</p>\n\n  <p>Символы можно использовать в качестве ключей или свойств объектов, например:</p>\n\n  <p>{\"const mySymbol = Symbol('Мой символ'); \"}</p>\n\n  <p>{'const obj = {}; '}</p>\n\n  <p>{\"obj[mySymbol] = 'Привет, Мир!'; \"}</p>\n\n  <p>{\"console.log(obj[mySymbol]); // Вывод: Привет, Мир! \"}</p>\n\n  <p>\n  Одно из главных преимуществ использования символов заключается в том, что они не могут быть случайно доступны или изменены, потому что они уникальны и не могут быть скопированы. Это делает их идеальными для создания частных или внутренних свойств объектов.   \n  </p>\n  <p>\n  Еще одно преимущество символов заключается в том, что они могут использоваться для определения известных символов (well-known symbols), которые являются встроенными символами, имеющими определенный смысл или поведение в языке. Например, символ Symbol.iterator используется для определения итератора по умолчанию для объекта.   \n  </p>\n  \n  <p>\n  В целом, символы предоставляют мощный и гибкий способ создания уникальных идентификаторов и определения пользовательского поведения для объектов в JavaScript.   \n  </p>\n  \n  <b>Promise (Обещание)</b>\n\n  <p>Объект Promise - это функциональность, введенная в ES6, которая позволяет обрабатывать асинхронные операции более легко и организованно. </p>\n\n<p>\nВ простых терминах, Promise - это объект, который представляет значение, которое может быть недоступно в настоящее время, но будет доступно в будущем. Он предоставляет способ обработки результатов асинхронных операций (таких как запросы API или запросы к базе данных) без блокирования основного потока выполнения. \n</p>\n\n<p>\nPromise имеет три состояния: ожидание (pending), выполнено (fulfilled) или отклонено (rejected). Когда Promise находится в состоянии ожидания, это означает, что операция, которую он представляет, еще не завершена. Когда Promise выполняется, это означает, что операция была успешной и результат доступен. Когда Promise отклонен, это означает, что операция завершилась неудачно, и доступна ошибка.\n</p>\n\n<p>\nВот пример использования Promise для получения данных из API:   \n</p>\n\n<p>{\"fetch('https://jsonplaceholder.typicode.com/todos/1')\"}</p>\n\n<p>{'.then(response => response.json())'}</p>\n\n<p>{'.then(data => console.log(data))'}</p>\n\n<p>{'.catch(error => console.error(error))'}</p>\n\n<p>\nВ этом примере, <b>fetch</b> - это функция, которая возвращает Promise, который разрешается ответом от API. На Promise вызывается метод <b>then</b>, который принимает обратный вызов, который выполняется, когда Promise выполняется. Первый обратный вызов <b>then</b> разбирает ответ как JSON и возвращает его. Второй обратный вызов <b>then</b> выводит разобранные данные в консоль. Вызывается метод <b>catch</b> для обработки любых ошибок, которые могут возникнуть во время операции.\n</p>\n<p>Промисы могут также создаваться вручную, используя конструктор <b>Promise</b>:</p>\n\n<p>{\"const promise = new Promise((resolve, reject) => { \"}</p>\n\n<p>{\"setTimeout(() => { \"}</p>\n\n<p>{\" resolve('Success!') \"}</p>\n\n<p>{\" }, 1000) \"}</p>\n\n<p>{\"}) \"}</p>\n\n<p>{\" promise.then(result => console.log(result)) // Вывод: Success! \"}</p>\n\n<p>\nВ этом примере промис создается с помощью функции, принимающей два параметра: <b>resolve и reject.</b> Функция <b>resolve</b> вызывается через одну секунду с аргументом <b>'Success!'</b>. Метод <b>then</b> вызывается на промисе, принимая функцию обратного вызова, которая будет выполнена, когда промис будет выполнен. Функция обратного вызова записывает результат в консоль.  \n</p>\n\n    \n    </div>\n\n  )\n}\n\nexport default RuEs6;","/home/artashes/Desktop/codeex/codeex/src/lang/AmEs6.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/Html_2.js",["1013","1014","1015"],[],"import React,{useState} from 'react';\nimport AmHtml_2 from '../lang/AmHtml_2';\nimport RuHtml_2 from '../lang/RuHtml_2';\n\nfunction Html_2() {\n  \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  \n  \n  return (\n    <div className='java-script'>\n\n       <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div> \n     \n     \n      <h1>HTML tags and their descriptions:</h1>\n\n      <p>1. <b>{'<html> '}</b>Defines an HTML document.</p>\n\n      <p>2. <b>{'<head> '}</b>Contains metadata information about the document, such as the title and links to CSS stylesheets.</p>\n\n      <p>3. <b>{'<title>'}</b>Defines the title of the document, which appears in the browser's title bar or tab.</p>\n\n      <p>4. <b>{'<body>'}</b>Contains the visible content of the document.</p>\n\n      <p>5. <b>{'<h1> - <h6>'}</b> Defines headings of different levels of importance, with {'<h1>'}being the most important and{'<h6>'}being the least. </p>\n\n      <p>6. <b>{'<p>'}</b>Defines a paragraph of text.</p>\n\n      <p>7. <b>{'<a> '}</b>Defines a hyperlink to another web page or a specific location within the same page.</p>\n\n      <p>8. <b>{'<img>'}</b>Inserts an image into the document.</p>\n\n      <p>9. <b>{'<ul>'}</b> Defines an unordered list, typically marked with bullet points.</p>\n\n      <p>10. <b>{'<ol>'}</b>Defines an ordered list, typically marked with numbers or letters.</p>\n\n      <p>11. <b>{'<li>'}</b>Defines a list item within an ordered or unordered list.</p>\n\n      <p>12. <b>{'<div>'}</b>Defines a container for HTML elements, which can be used for styling and positioning.</p>\n\n      <p>13. <b>{'<span>'}</b> Defines a small container for inline HTML elements, which can be used for styling and positioning.</p>\n\n      <p>14. <b>{'<form>'}</b>Defines a form for user input, which can contain various input fields and submit buttons.</p>\n\n      <p>15. <b>{'<input>'}</b>Defines an input field for user input, such as a text box or a checkbox.</p>\n\n      <p>16. <b>{'<button>'}</b>Defines a clickable button element, which can be used for various user interactions.</p>\n\n      <p>17. <b>{'<select>'}</b>Defines a dropdown list, which allows users to select one or more options.</p>\n\n      <p>14. <b>{'<option>'}</b>Defines an option within a dropdown list.</p>\n\n       <p>15. <b>{'<textarea>'}</b>Defines a multi-line text input field.</p>\n\n       <p>16. <b>{'<hr>'}</b>tag: The {'<hr>'} tag stands for \"horizontal rule\". It is used to insert a horizontal line in the HTML page. The line can be used to separate content visually.</p>\n\n       <p>17. <b>{'<br>'}</b>tag: The {'<br>'} tag stands for \"line break\". It is used to insert a line break or a new line in the HTML content. Unlike the {'<p>'} tag which creates a new paragraph, the {'<br>'} tag only creates a new line.</p>\n\n       <p>18. <b>{'<small>'}</b>tag: The {'<small>'} tag defines smaller text (like copyright and other side-comments).</p> \n      \n       <p><a href=\"https://www.w3schools.com/tags/\" target='_blank' > <b>More tags can be found here 👉🏼 W3Schools</b></a></p>\n\n\n      <h2>HTML Table Tags and Attributes</h2>\n\n      \n       <p>1.<b>{'<table>'}</b>tag: The {'<table>'} ag is used to define the start and end of an HTML table. All table-related tags are contained within the {'<table>'} element.</p>\n\n       <p>2. <b>{'<caption>'}</b>tag: The {'<caption>'} tag is used to provide a title or caption for the table. It should be placed immediately after the opening {'<table>'} tag.</p>\n\n       <p>3. <b>{'<frame>'}</b> attribute: The {'<frame>'} attribute specifies how the table borders should be displayed. It has three possible values: void, above, and below.</p>\n\n       <p>4. <b>{'<rules>'}</b>attribute: The {'<rules>'} attribute specifies the visibility of the table's borders. It can be set to \"none\" to hide the borders, \"groups\" to display borders between row groups and column groups, or \"rows\" to display borders between rows.</p>\n\n       <p>5. <b>{'<border>'}</b>attribute: The {'<border>'} attribute specifies the width of the table's borders in pixels.</p>\n\n       <p>6. <b>{'<cellspacing>'}</b> attribute: The {'<cellspacing>'} attribute specifies the amount of space between adjacent cells in the table. It is specified in pixels.</p>\n\n       <p>7. <b>{'<cellpadding>'}</b>attribute: The {'<cellpadding> '} attribute specifies the amount of space between the cell content and the cell borders. It is also specified in pixels.</p>\n\n       <p>8. <b>{'<tr>'}</b>tag: The {'<tr>'} tag defines a table row.</p>\n\n       <p>9. <b>{'<th>'}</b>tag: The {'<th>'} tag defines a table header cell. This is typically used to provide headings for each column in the table.</p>\n\n       <p>10. <b>{'<td>'}</b>tag: The {'<td>'}tag defines a table data cell. This is where the actual content of the table is placed.</p>\n\n\n        <h2>Links or Hypertext references</h2>\n\n       <p>Links or hypertext references in HTML are used to create clickable elements on a web page that allow users to navigate to other pages, sections of the same page, or other online resources. The basic structure of a link consists of an anchor tag {'(<a>)'} and an href attribute that specifies the destination of the link.</p> \n\n      <p>Here's an example of a basic link in HTML</p>\n\n      <p>{'<a href=\"https://www.example.com\">Click here to visit Example.com</a>'}</p>\n\n      <p>In this example, the text \"Click here to visit Example.com\" is the clickable part of the link, while the href attribute specifies the URL of the destination. When the user clicks on the link, they will be taken to the website at the specified URL.</p>\n\n      <p>Links can also be used to create anchor points within a single web page. This allows users to quickly jump to a specific section of the page by clicking on a link. To create an anchor point, you would add an <b>id</b> attribute to the element that you want to link to, and then create a link with a <b>#</b>symbol followed by the <b>id</b> value as the destination</p>\n\n      <p>{'<h2 id=\"section1\">Section 1</h2>'}</p>\n\n      <p>{'<p>This is the first section of the page.</p>'}</p>\n\n      <p>{'<h2 id=\"section2\">Section 2</h2>'}</p>\n\n      <p>{'<p>This is the second section of the page.</p>'}</p>\n\n      <p>{'<a href=\"#section1\">Go to Section 1</a>'}</p>\n\n      <p>{'<a href=\"#section2\">Go to Section 2</a>'}</p>\n\n      <p>In this example, we've added <b>id</b> attributes to the two <b>h2</b> tags to create anchor points for each section. The two links at the bottom of the page use the <b>href</b> attribute to link to these anchor points, allowing users to quickly jump to a specific section of the page.</p>\n\n      <p>There are many other options and attributes that can be used with links in HTML, including target, download, rel, and more. By using links effectively, you can create a more interactive and engaging user experience on your web pages.</p>\n\n      <p>To create a link for a phone number or Skype, you can use the {'<a>'} tag with the href attribute set to <b>\"tel:\"</b> or <b>\"skype:\"</b> followed by the phone number or Skype username.</p>\n\n      <p>For example, to create a link for a phone number, you can use the following code:</p>\n\n      <p>{'<a href=\"tel:+1234567890\">Call us at +1 (234) 567-890</a>'}</p>\n\n      <p>In this example, <b>\"tel:\"</b> is used as the protocol for phone numbers, and \"+1234567890\" is the phone number. When a user clicks on this link on a mobile device, it will automatically launch the phone app with the number pre-populated.</p>\n\n      <p>To create a link for Skype, you can use the following code</p>\n\n      <p>{'<a href=\"skype:username?call\">Call us on Skype</a>'}</p>\n\n      <p>In this example, <b>\"skype:\"</b> is used as the protocol for Skype links, \"username\" is the username of the person or company you want to call, and \"?call\" is added to initiate a call. When a user clicks on this link, it will launch the Skype app and initiate a call to the specified username.</p>\n\n      <b>The {'<img>'} tag in HTML is used to display images on a web page. Here is an example of how to use the {'<img>'} tag:</b>\n\n      <p>{'<img src=\"image.jpg\" alt=\"Description of image\">'}</p>\n\n      <p>Let's break down the different parts of this tag:</p>\n\n      <p>The \"src\" attribute specifies the URL of the image file you want to display.</p>\n\n      <p>The \"alt\" attribute provides a description of the image for screen readers and other assistive technologies.</p>\n\n      <p>Here is an example of how to use the {'<img>'} tag to display an image with a specific width and height:</p>\n\n       <p>{'<img src=\"image.jpg\" alt=\"Description of image\" width=\"500\" height=\"300\">'}</p>\n\n       <p>In this example, the <b>\"width\"</b> and <b>\"height\" </b> attributes specify the dimensions of the image in pixels.</p>\n\n      <p>You can also add other attributes to the {'<img>'} tag to further customize the image display, such as <b>\"class\"</b> and <b>\"id\"</b> for CSS styling purposes.</p>\n\n      </div>\n      )}\n      {language === 'ru' && (\n        <div>\n          <RuHtml_2 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmHtml_2 />\n        </div>\n      )}   \n\n\n    </div>\n  )\n}\n\nexport default Html_2","/home/artashes/Desktop/codeex/codeex/src/pages/Html_3.js",["1016","1017"],[],"import React,{ useState } from 'react';\nimport AmHtml_3 from '../lang/AmHtml_3';\nimport RuHtml_3 from '../lang/RuHtml_3';\n\nfunction Html_3() {\n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n \n \n  return (\n    <div className='java-script'>\n\n<div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div> \n\n\n     \n      <h1>Understanding Meta Tags in HTML - A Guide for Beginners</h1>\n\n    <p>1. <b>charset:</b> The charset attribute specifies the character encoding for the HTML document. It is important to ensure that the encoding is set correctly to ensure that special characters are displayed correctly.</p>\n\n    <p>Example:</p>\n\n    <p>{ '<meta charset=\"UTF-8\">' }</p>\n\n    <p>2. <b>name:</b> The name attribute is used to define the type of metadata being provided, such as keywords, description, or author.</p>\n\n    <p>Example:</p>\n\n    <p>{'<meta name=\"description\" content=\"This is a description of my web page.\">'}</p>\n\n    <p>3. <b>content:</b> The content attribute is used to specify the value of the metadata being provided.</p>\n\n    <p>Example:</p>\n\n    <p>{'<meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">'}</p>\n\n    <p>4. <b>http-equiv:</b> The http-equiv attribute is used to define an HTTP header for the HTML document, such as refresh or content-type</p>\n\n    <p>Example:</p>\n\n    <p>{'<meta http-equiv=\"refresh\" content=\"5\">'}</p>\n  \n    <p>5. <b>viewport:</b> The viewport attribute is used to control the layout and scaling of a web page on different devices, such as mobile phones or tablets.</p>\n\n    <p>Example:</p>\n\n    <p>{'<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">'}</p>\n\n    <h2>How to Use Colors in HTML: A Beginner's Guide.</h2>\n\n    <p>Colors in HTML can be defined using a variety of methods, including color names, hexadecimal values, RGB values, and HSL values.</p>\n\n    <b>1. Color Names:</b>\n\n    <p>HTML provides a set of predefined color names that can be used to specify the color of an element. Some examples of color names include \"red\", \"green\", \"blue\", \"yellow\", \"purple\", and \"black\".</p>\n\n    \n    <b>2. Hexadecimal Values:</b>\n\n    <p>A hexadecimal color value is a six-digit code that represents a color. The first two digits represent the amount of red in the color, the next two digits represent the amount of green in the color, and the last two digits represent the amount of blue in the color. For example, #FF0000 represents pure red, #00FF00 represents pure green, and #0000FF represents pure blue.</p>\n\n     <b>3. RGB Values:</b>\n\n     <p>An RGB color value is a set of three numbers that represent the amount of red, green, and blue in a color. Each value ranges from 0 to 255. For example, rgb(255, 0, 0) represents pure red, rgb(0, 255, 0) represents pure green, and rgb(0, 0, 255) represents pure blue.</p>\n\n    <b>4. HSL Values:</b>\n\n    <p>An HSL color value is a set of three numbers that represent the hue, saturation, and lightness of a color. Hue is a degree on the color wheel (from 0 to 360), saturation is a percentage value (from 0% to 100%), and lightness is also a percentage value (from 0% to 100%). For example, hsl(0, 100%, 50%) represents pure red, hsl(120, 100%, 50%) represents pure green, and hsl(240, 100%, 50%) represents pure blue.</p>\n\n    <h2>CSS Basics for Beginners: An Introduction to Cascading Style Sheets</h2>\n\n    <p>CSS stands for Cascading Style Sheets and it is a language used to style HTML documents. CSS allows you to change the colors, fonts, layout, and other aspects of your webpage. It works by selecting HTML elements and applying styles to them.</p>\n\n    <p>CSS styles are created using selectors, properties, and values. Selectors target specific HTML elements and can be used to apply styles to multiple elements at once. Properties define what styles you want to apply and can include things like font size, color, and padding. Values specify the specific settings for the property, such as a specific color or size.</p>\n\n    <p>To link a CSS file to an HTML document, you can use the {'<link>'} tag in the {'<head>'} section of your HTML document.</p>\n\n    <p>Here's an example of how to link a CSS file called \"styles.css\" to your HTML document:</p>\n\n    <code>\n<p>{'<!DOCTYPE html>'}</p>\n\n<p>{'<html>'}</p>\n\n<p>{'<head>'}</p>\n\n<p>{'<link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">'}</p>\n\n<p>{'</head>'}</p>\n\n<p>{'<body>'}</p>\n\n<p>{'<!-- your HTML content here -->'}</p>\n\n<p>{'</body>'}</p>\n\n<p>{'</html>'}</p>\n    </code>\n\n\n    \n    <p>Here's an example of CSS code:</p>\n\n   <code>\n   <p>{'h1 {'}</p>\n\n<p>{'color: red;'}</p>\n\n<p>{'font-size: 36px;'}</p>\n\n<p>{'text-align: center;'}</p>\n\n<p>{'}'}</p>\n\n<p>{'p {'}</p>\n\n<p>{'color: blue;'}</p>\n\n<p>{'font-size: 16px;'}</p>\n\n<p>{'line-height: 1.5;'}</p>\n\n<p>{'}'}</p>\n   </code>\n\n    <p>In this code, we have two selectors <b>(h1 and p)</b> and several properties and values applied to each. The <b>h1</b> selector applies a red color, 36px font size, and centered text alignment to all <b>h1</b> elements on the page. The <b>p</b> selector applies a blue color, 16px font size, and 1.5 line height to all <b>p</b> elements on the page.</p>\n\n    <p>CSS can be applied to HTML documents in several ways, including in-line, embedded, and external stylesheets. In-line styles are applied directly to the HTML element using the <b>style</b> attribute. Embedded styles are placed in the <b>head</b> section of the HTML document using the style tag. External stylesheets are stored in separate CSS files and linked to the HTML document using the <b>link</b> tag.</p>\n    </div>\n      )}\n      {language === 'ru' && (\n        <div>\n          <RuHtml_3 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmHtml_3 />\n        </div>\n      )}  \n\n    </div>\n  )\n}\n\nexport default Html_3;","/home/artashes/Desktop/codeex/codeex/src/pages/Html_1.js",["1018","1019","1020","1021"],[],"import React,{ useState } from 'react';\nimport AmHtml_1 from '../lang/AmHtml_1';\nimport RuHtml_1 from '../lang/RuHtml_1';\n\nfunction Html_1() {\n  \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  return (\n    <div className='java-script'>\n        \n        <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div>\n\n        <h1>HTML</h1>\n     \n     <p>\n     HTML, which stands for HyperText Markup Language, is a markup language used to create and structure content on the web. It is the backbone of every website and serves as the building blocks of web pages. HTML is a declarative language, meaning it is used to describe the content and structure of a web page, but not necessarily its appearance.    \n    </p>   \n    <p>\n    HTML was created by Tim Berners-Lee in the early 1990s while working at CERN, the European Organization for Nuclear Research. Berners-Lee was looking for a way to share and organize information among researchers, and HTML was the solution he came up with. HTML was designed to be a simple language that could be easily understood and used by anyone, regardless of their technical background.    \n    </p>\n\n    <p>\n    HTML is made up of a series of elements, which are represented by tags. Tags are enclosed in angle brackets and are used to define the structure and content of a web page. For example, the {'<head>'} tag is used to define the head section of a web page, which typically contains information such as the title of the page and links to external stylesheets and scripts. The {'<body>'} tag is used to define the body section of a web page, which contains the main content of the page.     \n    </p>\n\n    <p>\n    HTML is a constantly evolving language, with new versions being released periodically. The current version of HTML is HTML5, which was released in 2014. HTML5 introduced many new features and capabilities, such as video and audio tags, canvas elements for drawing graphics, and semantic tags for better accessibility and SEO.     \n    </p>\n\n    <p>\n    In summary, HTML is a markup language used to create and structure content on the web. It was created by Tim Berners-Lee in the early 1990s and is the backbone of every website. HTML is made up of a series of elements represented by tags, and it is a constantly evolving language with new versions being released periodically.     \n    </p>\n\n    <p>1. Simple web page with a title and paragraph:</p>\n    <code>\n   <p><b>{'<!DOCTYPE html>'}</b></p>\n\n   <p><b>{'<html>'}</b></p> \n\n   <p><b>{'<head>'}</b></p> \n\n    <p><b>{'<title>My Web Page</title>'}</b></p> \n\n   <p><b>{'</head>'}</b></p> \n\n   <p><b>{'<body>'}</b></p>\n\n   <p><b>{'<h1>Welcome to My Web Page</h1>'}</b></p>\n\n   <p><b>{'<p>This is my first web page.</p>'}</b></p>\n\n   <p><b>{'</body>'}</b></p>\n\n   <p><b>{'</html>'}</b></p>\n\n   </code>\n\n   <p>\n   This is an example of a simple web page that consists of a title and a paragraph. The title is represented by the \"title\" tag, and the paragraph by the \"p\" tag. The page title is displayed in the browser's title bar and in search engine results.  \n   </p>\n\n    <p>2. Image with alternative text and a link to another page:</p>\n\n \n     <code>\n     <p><b>{'<!DOCTYPE html>'}</b></p>\n       \n       <p><b>{'<html>'}</b></p> \n       \n       <p><b>{'<head>'}</b></p>  \n       \n       <p><b>{'<title>My Web Page</title>'}</b></p> \n       \n       <p><b>{'</head>'}</b></p> \n       \n       <p><b>{'<body>'}</b></p> \n       \n       <p><b>{'<h1>Welcome to My Web Page</h1>'}</b></p> \n       \n       <p><b>{'<p>This is a picture of a cat:</p>'}</b></p> \n       \n       <p><b>{'<img src=\"cat.jpg\" alt=\"A cute cat\">'}</b></p> \n\n       <p><b>{'<p>Click <a href=\"http://www.google.com\">here</a> to go to Google.</p>'}</b></p> \n\n       <p><b>{'</body>'}</b></p> \n\n       <p><b>{'</html>'}</b></p>\n     </code>\n\n    \n\n    <p>This example includes an image of a cat, represented by the \"img\" tag, with alternative text displayed in case the image cannot be loaded. The link to Google is represented by the \"a\" tag with the \"href\" attribute pointing to the URL of the destination page.</p>\n\n    <p>3. Form for entering a name and submitting data to a server:</p>\n\n  \n    <code>\n    <p><b>{'<!DOCTYPE html>'}</b></p> \n\n<p><b>{'<html>'}</b></p>   \n\n<p><b>{'<head>'}</b></p>  \n\n<p><b>{'<title>My Web Page</title>'}</b></p>  \n\n<p><b>{'</head>'}</b></p>  \n\n<p><b>{'<body>'}</b></p>  \n\n<p><b>{'<h1>Welcome to My Web Page</h1>'}</b></p>  \n\n<p><b>{'<form>'}</b></p>  \n\n<p><b>{'<label for=\"name\">Enter your name:</label>'}</b></p>  \n\n<p><b>{'<input type=\"text\" id=\"name\" name=\"name\"><br><br>'}</b></p>  \n\n<p><b>{'<input type=\"submit\" value=\"Submit\">'}</b></p>  \n\n<p><b>{'</form>'}</b></p>  \n\n<p><b>{'</body>'}</b></p>  \n\n<p><b>{'</html>'}</b></p>   \n    </code>\n \n\n    <p>\n    This example shows a form with a text input field for the user to enter their name. When the form is submitted, the data is sent to a server for processing. The \"label\" tag provides a text label for the input field, and the \"input\" tag is used to create the input field and the submit button.      \n    </p>\n\n    <p>4. Ordered list of items:</p>\n\n    \n    <code>\n    <p> <b>{'<!DOCTYPE html> '}</b></p>\n\n<p><b>{'<html> '}</b></p>\n\n<p><b>{'<head>'}</b></p>\n\n<p><b>{'<title>My Web Page</title>'}</b></p>\n\n<p><b>{'</head>'}</b></p>\n\n<p><b>{'<body>'}</b></p>\n\n<p><b>{'<h1>Welcome to My Web Page</h1>'}</b></p>\n\n <p><b>{'<h2>My favorite foods:</h2>'}</b></p>\n\n <p><b>{'<ol>'}</b></p>\n\n <p><b>{'<li>Pizza</li>'}</b></p>\n\n <p><b>{'<li>Burgers</li>'}</b></p>\n\n <p><b>{'<li>Ice cream</li>'}</b></p>\n\n <p><b>{'</ol>'}</b></p>\n\n <p><b>{'</body>'}</b></p>\n\n   <p><b>{'</html>'}</b></p>\n\n    </code>\n \n\n<p>This example shows an ordered list of items represented by the \"ol\" tag, with each item represented by the \"li\" tag. The numbers for the list are automatically generated by the browser.</p>\n\n<p>5. Unordered list of items:</p>\n\n \n  <code>\n  <p> <b>{'<!DOCTYPE html> '}</b></p>\n\n<p><b>{'<html> '}</b></p>\n\n<p><b>{'<head>'}</b></p>\n\n<p><b>{'<title>My Web Page</title>'}</b></p>\n\n<p><b>{'</head>'}</b></p>\n\n<p><b>{'<body>'}</b></p>\n\n<p><b>{'<h1>Welcome to My Web Page</h1>'}</b></p>\n\n <p><b>{'<h2>My favorite movies:</h2>'}</b></p>\n\n <p><b>{'<ul>'}</b></p>\n\n <p><b>{'<li>>The Shawshank Redemption</li>'}</b></p>\n\n <p><b>{'<li>The Godfather</li>'}</b></p>\n\n <p><b>{'<li>The Dark Knight</li>'}</b></p>\n\n <p><b>{'</ul>'}</b></p>\n\n <p><b>{'</body>'}</b></p>\n\n   <p><b>{'</html>'}</b></p>  \n  </code>\n      \n      <p>This example shows an unordered list of items represented by the \"ul\" tag, with each item represented by the \"li\" tag. The list items are displayed with bullet points by default.</p> \n\n      <p>\n      To further enhance their understanding of HTML, students can be directed to additional resources such as the documentation on <b>MDN Web Docs</b> or <b>W3Schools</b>.\n      </p> \n\n     <p>To add a link to MDN Web Docs on your website, use the following HTML code:</p> \n\n    <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML \"target='_blank'> <b> &#x1F44D; MDN Web Docs</b></a></p> \n     \n    <p>To add a link to W3Schools on your website, use the following HTML code:</p>  \n\n    <p><a href=\"https://www.w3schools.com/html/\" target='_blank' > <b>&#x1F44D; W3Schools</b></a></p>\n\n    <p>Both MDN Web Docs and W3Schools provide comprehensive and detailed documentation on HTML and related technologies, as well as interactive tutorials and examples. Students can use these resources to deepen their knowledge of HTML and improve their web development skills.</p>\n\n    </div>\n      )}\n      {language === 'ru' && (\n        <div>\n          <RuHtml_1 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmHtml_1 />\n        </div>\n      )} \n\n    </div>\n  )\n}\n\nexport default Html_1;","/home/artashes/Desktop/codeex/codeex/src/lang/RuHtml_1.js",["1022","1023"],[],"import React from 'react'\n\nfunction RuHtml_1() {\n  return (\n    <div>\n     \n      <h1>HTML</h1>\n\n\n<p>\nHTML (HyperText Markup Language) - язык разметки, используемый для создания и структурирования контента в интернете. Он является основой каждого веб-сайта и служит строительным блоком веб-страниц. HTML - декларативный язык, что означает, что он используется для описания содержания и структуры веб-страницы, но не обязательно для ее внешнего вида.   \n</p>   \n<p>\nHTML был создан Тимом Бернерсом-Ли в начале 1990-х годов, когда он работал в CERN, Европейской организации по ядерным исследованиям. Бернерс-Ли искал способ обмена и организации информации среди исследователей, и HTML был решением, которое он предложил. HTML был создан для того, чтобы быть простым языком, который мог бы быть легко понят и использован кем угодно, независимо от их технического фона.   \n</p>\n<p>\nHTML состоит из серии элементов, которые представлены тегами. Теги заключены в угловые скобки и используются для определения структуры и содержания веб-страницы. Например, тег {'<head>'} используется для определения заголовочной части веб-страницы, которая обычно содержит информацию, такую как название страницы и ссылки на внешние таблицы стилей и скрипты. Тег {'<body>'} используется для определения тела веб-страницы, которое содержит основное содержимое страницы.     \n</p>\n<p>\nHTML - язык, постоянно развивающийся, с периодическим выпуском новых версий. На данный момент актуальной версией HTML является HTML5, которая была выпущена в 2014 году. HTML5 ввела множество новых функций и возможностей, таких как теги видео и аудио, элементы canvas для рисования графики и семантические теги для лучшей доступности и SEO.     \n</p>\n\n<p>\n  Вкратце, HTML - это язык разметки, используемый для создания и структурирования контента в Интернете. Он был создан Тимом Бернерс-Ли в начале 1990-х годов и является основой каждого сайта. HTML состоит из серии элементов, представленных тегами, и является постоянно развивающимся языком с периодическим выпуском новых версий.\n</p>\n\n<p>1. Простая веб-страница с заголовком и абзацем:</p>\n\n \n   <p><b>{'<!DOCTYPE html>'}</b></p>\n   \n   <p><b>{'<html>'}</b></p> \n   \n   <p><b>{'<head>'}</b></p> \n\n   <p><b>{'<title>Моя веб-страница</title>'}</b></p> \n\n   <p><b>{'</head>'}</b></p> \n  \n  <p><b>{'<body>'}</b></p>\n  \n   <p><b>{'<h1>Добро пожаловать на мою веб-страницу</h1>'}</b></p>\n  \n   <p><b>{'<p>Это моя первая веб-страница.</p>'}</b></p>\n  \n   <p><b>{'</body>'}</b></p>\n  \n   <p><b>{'</html>'}</b></p>\n  \n   \n   <p>\n   Это пример простой веб-страницы, состоящей из заголовка и абзаца. Заголовок представлен тегом \"title\", а абзац - тегом \"p\". Заголовок страницы отображается в строке заголовка браузера и в результатах поиска.  \n   </p>\n\n   <p>2. Изображение с альтернативным текстом и ссылка на другую страницу:</p>\n\n   <p><b>{'<!DOCTYPE html>'}</b></p>\n   \n   <p><b>{'<html>'}</b></p> \n   \n   <p><b>{'<head>'}</b></p>  \n   \n   <p><b>{'<title>My Web Page</title>'}</b></p> \n   \n   <p><b>{'</head>'}</b></p> \n   \n   <p><b>{'<body>'}</b></p> \n   \n   <p><b>{'<h1>Добро пожаловать на мою веб-страницу</h1>'}</b></p> \n   \n   <p><b>{'<p>Это изображение кота:</p>'}</b></p> \n   \n   <p><b>{'<img src=\"cat.jpg\" alt=\"Симпатичный котик\">'}</b></p> \n\n   <p><b>{'<p>Нажмите <a href=\"http://www.google.com\">здесь</a>, чтобы перейти на Google.</p>'}</b></p> \n\n   <p><b>{'</body>'}</b></p> \n\n   <p><b>{'</html>'}</b></p>\n\n\n\n<p>В этом примере приведено изображение кота, представленное тегом \"img\" с альтернативным текстом, отображаемым в случае невозможности загрузки изображения. Ссылка на Google представлена тегом \"a\" с атрибутом \"href\", указывающим на URL-адрес целевой страницы.</p>\n\n<p>3. Форма для ввода имени и отправки данных на сервер:</p>\n\n<p><b>{'<!DOCTYPE html>'}</b></p> \n\n<p><b>{'<html>'}</b></p>   \n\n<p><b>{'<head>'}</b></p>  \n\n<p><b>{'<title>My Web Page</title>'}</b></p>  \n\n<p><b>{'</head>'}</b></p>  \n\n<p><b>{'<body>'}</b></p>  \n\n<p><b>{'<h1>Добро пожаловать на мою веб-страницу</h1>'}</b></p>  \n\n<p><b>{'<form>'}</b></p>  \n\n<p><b>{'<label for=\"name\">Введите ваше имя:</label>'}</b></p>  \n\n<p><b>{'<input type=\"text\" id=\"name\" name=\"name\"><br><br>'}</b></p>  \n\n<p><b>{'<input type=\"submit\" value=\"Отправить\">'}</b></p>  \n\n<p><b>{'</form>'}</b></p>  \n\n<p><b>{'</body>'}</b></p>  \n\n<p><b>{'</html>'}</b></p>  \n\n<p>\nЭтот пример показывает форму с текстовым полем для ввода имени пользователем. Когда форма отправляется, данные отправляются на сервер для обработки. Тег \"label\" предоставляет текстовую метку для поля ввода, а тег \"input\" используется для создания поля ввода и кнопки отправки данных.\n</p>\n\n<p>4. Упорядоченный список элементов:</p>\n\n\n<p> <b>{'<!DOCTYPE html> '}</b></p>\n\n<p><b>{'<html> '}</b></p>\n\n<p><b>{'<head>'}</b></p>\n\n<p><b>{'<title>Моя веб-страница</title>'}</b></p>\n\n<p><b>{'</head>'}</b></p>\n\n<p><b>{'<body>'}</b></p>\n\n<p><b>{'<h1>Добро пожаловать на мою веб-страницу</h1>'}</b></p>\n\n <p><b>{'<h2>Мои любимые блюда:</h2>'}</b></p>\n\n <p><b>{'<ol>'}</b></p>\n\n <p><b>{'<li>Пицца</li>'}</b></p>\n\n <p><b>{'<li>Бургеры</li>'}</b></p>\n\n <p><b>{'<li>Мороженое</li>'}</b></p>\n\n <p><b>{'</ol>'}</b></p>\n\n <p><b>{'</body>'}</b></p>\n\n  <p><b>{'</html>'}</b></p>\n\n<p>Этот пример показывает упорядоченный список элементов, представленный тегом \"ol\", где каждый элемент представлен тегом \"li\". Номера для списка автоматически генерируются браузером.</p>\n\n<p>5. Неупорядоченный список элементов:</p>\n\n<p> <b>{'<!DOCTYPE html> '}</b></p>\n\n<p><b>{'<html> '}</b></p>\n\n<p><b>{'<head>'}</b></p>\n\n<p><b>{'<title>Моя веб-страница</title>'}</b></p>\n\n<p><b>{'</head>'}</b></p>\n\n<p><b>{'<body>'}</b></p>\n\n<p><b>{'<h1>Добро пожаловать на мою веб-страницу</h1>'}</b></p>\n\n <p><b>{'<h2>Мои любимые фильмы:</h2>'}</b></p>\n\n <p><b>{'<ul>'}</b></p>\n\n <p><b>{'<li>>Побег из Шоушенка</li>'}</b></p>\n\n <p><b>{'<li>Крестный отец</li>'}</b></p>\n\n <p><b>{'<li>Темный рыцарь</li>'}</b></p>\n\n <p><b>{'</ul>'}</b></p>\n\n<p><b>{'</body>'}</b></p>\n\n<p><b>{'</html>'}</b></p>\n\n<p>Этот пример демонстрирует ненумерованный список элементов, представленных тегом \"ul\", с каждым элементом, представленным тегом \"li\". Элементы списка отображаются по умолчанию с маркерами.</p>\n<p>Чтобы углубить свое понимание HTML, студентов можно направить на дополнительные ресурсы, такие как документация на <b>MDN Web Docs</b> или <b>W3Schools</b>.</p>\n<p>Чтобы добавить ссылку на MDN Web Docs на свой сайт, используйте следующий HTML-код:</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\" target='_blank'> <b>&#x1F44D; MDN Web Docs</b></a></p>\n<p>Чтобы добавить ссылку на W3Schools на свой сайт, используйте следующий HTML-код:</p>\n<p><a href=\"https://www.w3schools.com/html/\" target='_blank' > <b>&#x1F44D; W3Schools</b></a></p>\n<p>Как MDN Web Docs, так и W3Schools предоставляют подробную документацию по HTML и связанным технологиям, а также интерактивные учебники и примеры. Студенты могут использовать эти ресурсы, чтобы углубить свои знания по HTML и улучшить свои навыки веб-разработки.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    </div>\n  )\n}\n\nexport default RuHtml_1;","/home/artashes/Desktop/codeex/codeex/src/lang/AmHtml_1.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmHtml_2.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuHtml_2.js",["1024"],[],"import React from 'react'\n\nfunction RuHtml_2() {\n  return (\n    <div>\n     \n     <h1>Теги HTML и их описания:</h1>\n\n<p>1. <b>{'<html> '}</b>Определяет HTML-документ.</p>\n\n<p>2. <b>{'<head> '}</b>Содержит метаданные о документе, такие как название и ссылки на таблицы стилей CSS.</p>\n\n<p>3. <b>{'<title>'}</b>Определяет название документа, которое отображается в заголовке окна браузера или на вкладке.</p>\n\n<p>4. <b>{'<body>'}</b>Содержит видимое содержимое документа.</p>\n\n<p>5. <b>{'<h1> - <h6>'}</b>Определяют заголовки различных уровней важности, с {'<h1>'} являющимся наиболее важным и {'<h6>'} наименее важным.</p>\n\n<p>6. <b>{'<p>'}</b>Определяет абзац текста.</p>\n\n<p>7. <b>{'<a> '}</b>Определяет гиперссылку на другую веб-страницу или на определенное место на той же странице.</p>\n\n<p>8. <b>{'<img>'}</b>Вставляет изображение в документ.</p>\n\n<p>9. <b>{'<ul>'}</b>Определяет список без упорядочения, обычно обозначенный маркерами.</p>\n\n\n<p>10. <b>{'<ol>'}</b>Определяет упорядоченный список, обычно обозначенный цифрами или буквами.</p>\n\n<p>11. <b>{'<li>'}</b>Определяет элемент списка в упорядоченном или неупорядоченном списке.</p>\n\n<p>12. <b>{'<div>'}</b>Определяет контейнер для элементов HTML, который можно использовать для стилизации и позиционирования.</p>\n\n<p>13. <b>{'<span>'}</b>Определяет маленький контейнер для встроенных элементов HTML, который можно использовать для стилизации и позиционирования.</p>\n\n<p>14. <b>{'<form>'}</b>Определяет форму для ввода пользователем данных, которая может содержать различные поля ввода и кнопки отправки.</p>\n\n<p>15. <b>{'<input>'}</b>Определяет поле ввода для пользовательского ввода, такое как текстовое поле или флажок.</p>\n\n<p>16. <b>{'<button>'}</b>Определяет кликабельный элемент кнопки, который может использоваться для различных взаимодействий с пользователем.</p> \n    \n<p>17. <b>{'<br>'}</b> тег: Тег {'<br>'} используется для вставки разрыва строки или перевода курсора на новую строку в HTML-контенте. В отличие от тега {'<p>'}, который создает новый абзац, тег {'<br>'} создает только новую строку.</p>   \n    \n<p>18. <b>{'<small>'}</b> тег: Тег {'<small>'} используется для определения меньшего размера текста (например, для указания авторских прав и других комментариев).</p> \n  \n<p><a href=\"https://www.w3schools.com/tags/\" target='_blank' > <b>Больше тегов можно найти здесь 👉🏼 W3Schools</b></a></p>\n\n\n <h2>Теги и атрибуты таблиц HTML</h2>\n\n \n  <p>1.<b>{'<table>'}</b> тег: Тег {'<table>'} используется для определения начала и конца таблицы HTML. Все теги, связанные с таблицей, содержатся внутри элемента {'<table>'}.</p>\n\n  <p>2. <b>{'<caption>'}</b> тег: Тег {'<caption>'} используется для предоставления заголовка или подписи для таблицы. Он должен быть расположен непосредственно после открывающего тега {'<table>'}.</p>\n\n  <p>3. Атрибут <b>{'<frame>'}</b>: Атрибут {'<frame>'} определяет, как должны отображаться границы таблицы. Он имеет три возможных значения: void, above и below.</p>\n\n  <p>4. Атрибут <b>{'<rules>'}</b>: Атрибут {'<rules>'} определяет видимость границ таблицы. Его можно установить на \"none\" для скрытия границ, \"groups\" для отображения границ между группами строк и группами столбцов, или \"rows\" для отображения границ между строками.</p>\n\n  <p>5. Атрибут <b>{'<border>'}</b>: Атрибут {'<border>'} определяет ширину границ таблицы в пикселях.</p>\n\n  <p>6. Атрибут <b>{'<cellspacing>'}</b>: Атрибут {'<cellspacing>'} определяет расстояние между соседними ячейками в таблице. Он задается в пикселях.</p>\n\n  <p>7. Атрибут <b>{'<cellpadding>'}</b>: Атрибут {'<cellpadding>'} определяет расстояние между содержимым ячейки и границами ячейки. Он также задается в пикселях.</p>\n\n  <p>8. <b>{'<tr>'}</b>тег: Тег {'<tr>'} используется для определения строки таблицы.</p>\n\n  <p>9. <b>{'<th>'}</b>тег: Тег {'<th>'} используется для определения заголовка ячейки таблицы. Обычно он используется для заголовков каждого столбца в таблице.</p>\n\n<p>10. <b>{'<td>'}</b>тег: Тег {'<td>'} используется для определения ячейки данных таблицы. Здесь размещается фактический контент таблицы.</p>\n\n\n <h2>Ссылки или гипертекстовые ссылки</h2>\n\n<p>Ссылки или гипертекстовые ссылки в HTML используются для создания кликабельных элементов на веб-странице, которые позволяют пользователям переходить на другие страницы, разделы этой же страницы или другие онлайн-ресурсы. Основная структура ссылки состоит из тега якоря {'(<a>)'} и атрибута href, который указывает место назначения ссылки.</p> \n\n<p>Вот пример базовой ссылки в HTML:</p>\n\n<p>{'<a href=\"https://www.example.com\">Нажмите здесь, чтобы посетить Example.com</a>'}</p>\n\n<p>В этом примере текст \"Нажмите здесь, чтобы посетить Example.com\" является кликабельной частью ссылки, а атрибут href указывает URL-адрес места назначения. При нажатии на ссылку пользователь будет перенаправлен на веб-сайт с указанным URL-адресом.</p>\n\n<p>Ссылки также могут использоваться для создания якорных точек в рамках одной веб-страницы. Это позволяет пользователям быстро переходить к конкретному разделу страницы, щелкнув на ссылке. Чтобы создать якорную точку, нужно добавить атрибут <b>id</b> к элементу, на который вы хотите создать ссылку, а затем создать ссылку с символом <b>#</b>, за которым следует значение <b>id</b> в качестве места назначения.</p>\n\n<p>{'<h2 id=\"section1\">Секция 1</h2>'}</p>\n\n<p>{'<p>Это первый раздел страницы.</p>'}</p>\n\n<p>{'<h2 id=\"section2\">Раздел 2</h2>'}</p>\n\n<p>{'<p>Это второй раздел страницы.</p>'}</p>\n\n<p>{'<a href=\"#section1\">Перейти к разделу 1</a>'}</p>\n\n<p>{'<a href=\"#section2\">Перейти к разделу 2</a>'}</p>\n\n<p>В этом примере мы добавили атрибуты <b>id</b> к двум тегам <b>h2</b>, чтобы создать якорные точки для каждого раздела. Два ссылки внизу страницы используют атрибут <b>href</b>, чтобы связать эти якорные точки, позволяя пользователям быстро перейти к конкретному разделу страницы.</p>\n\n<p>В HTML существует множество других параметров и атрибутов, которые могут использоваться в ссылках, включая target, download, rel и другие. Эффективное использование ссылок позволяет создать более интерактивный и привлекательный пользовательский опыт на ваших веб-страницах.</p>\n\n<p>Чтобы создать ссылку для номера телефона или Skype, можно использовать тег {'<a>'} с атрибутом <b>href</b>, заданным как <b>\"tel:\"</b> или <b>\"skype:\"</b>, за которым следует номер телефона или имя пользователя Skype.</p>\n\n<p>Например, чтобы создать ссылку для номера телефона, можно использовать следующий код:</p>\n\n<p>{'<a href=\"tel:+1234567890\">Позвоните нам по номеру +1 (234) 567-890</a>'}</p>\n\n<p>В этом примере <b>\"tel:\"</b> используется как протокол для телефонных номеров, а \"+1234567890\" - это сам телефонный номер. Когда пользователь нажимает на эту ссылку на мобильном устройстве, она автоматически запускает приложение телефона с предварительно заполненным номером.</p>\n\n<p>Чтобы создать ссылку для Skype, вы можете использовать следующий код:</p>\n\n<p>{'<a href=\"skype:username?call\">Call us on Skype</a>'}</p>\n\n<p>В этом примере <b>\"skype:\"</b> используется в качестве протокола для ссылок Skype, \"username\" - это имя пользователя человека или компании, которую вы хотите вызвать, а \"?call\" добавлен для инициации звонка. Когда пользователь нажимает на эту ссылку, она запускает приложение Skype и инициирует звонок на указанное имя пользователя.</p>\n\n<b>Тег {'<img>'} в HTML используется для отображения изображений на веб-странице. Вот пример использования тега {'<img>'}</b>\n\n<p>{'<img src=\"image.jpg\" alt=\"Description of image\">'}</p>\n\n<p>Давайте разберем разные части этого тега:</p>\n\n<p>Атрибут \"src\" указывает URL-адрес файла изображения, который вы хотите отобразить.</p>\n\n<p>Атрибут <b>\"alt\"</b> предоставляет описание изображения для скринридеров и других вспомогательных технологий.</p>\n \n<p>Вот пример использования тега {'<img>'} для отображения изображения с определенной шириной и высотой:</p>\n\n<p>{'<img src=\"image.jpg\" alt=\"Описание изображения\" width=\"500\" height=\"300\">'}</p>\n\n<p>В этом примере атрибуты <b>\"width\"</b> и <b>\"height\"</b> определяют размеры изображения в пикселях.</p>\n\n<p>Вы также можете добавить другие атрибуты к тегу {'<img>'} для дальнейшей настройки отображения изображения, такие как <b>\"class\"</b> и <b>\"id\"</b> для стилизации с помощью CSS.</p>\n\n  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    </div>\n  )\n}\n\nexport default RuHtml_2","/home/artashes/Desktop/codeex/codeex/src/lang/AmHtml_3.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuHtml_3.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/Jquery.js",["1025"],[],"import React, {useState} from 'react';\nimport AmJquery from '../lang/AmJquery';\nimport RuJquery from '../lang/RuJquery';\n\nfunction Jquery() {\n  \n    const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n    const handleEnglishClick = () => {\n      setLanguage('en');\n    };\n  \n    const handleRussianClick = () => {\n      setLanguage('ru');\n    };\n  \n    const handleArmenianClick = () => {\n      setLanguage('am');\n    };\n    \n  \n  \n  \n    return (\n    <div className='java-script'>\n\n    <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n      {language === 'en' && (\n        <div>      \n        \n        \n        \n        <h1>JavaScript(JQuery)</h1>\n\n<p>\njQuery is a JavaScript library that simplifies the process of writing JavaScript code and working with HTML documents. It was created in 2006 by John Resig and is currently one of the most popular JavaScript libraries.    \n</p>\n\n<p>\njQuery provides a variety of functions for working with the Document Object Model (DOM), as well as for working with AJAX (Asynchronous JavaScript and XML) and creating animations. It also simplifies writing cross-browser code because the jQuery library automatically handles browser compatibility issues.\n</p>\n\n<p>Here are some examples of how jQuery can be used:</p>\n\n<p>Manipulating DOM elements:</p>\n\n<p>{'// Changing the text of an element with ID \"myElement\"'}</p>\n\n<p>{\"$('#myElement').text('New Text'); \"}</p>\n\n<p>{'// Adding a new element to the page '}</p>\n\n<p>{\"$('body').append('<div>New Element</div>');\"}</p>\n\n<p>2. Handling events:</p>\n\n<p>{'// Handling the click event of a button with ID \"myButton\" '}</p>\n\n<p>{\"$('#myButton').click(function() { \"}</p>\n\n<p>{\" alert('Button clicked!');\"}</p>\n\n<p>{\"});\"}</p>\n\n<p>3. Working with AJAX:</p>\n\n<p>{'// Making an AJAX request to a server and updating a page element with the response '}</p>\n\n<p>{\" $.get('https://example.com/api/data', function(response) { \"}</p>\n\n<p>{\" $('#myElement').text(response); \"}</p>\n\n<p>{\" }); \"}</p>\n\n<p>Overall, jQuery is a powerful and versatile tool for simplifying JavaScript development and making it easier to create dynamic and interactive web pages.</p>\n\n<b>To include jQuery in an HTML document, you can use the following steps:</b>\n\n<p>1. Download the jQuery library from the official website <a href=\"https://jquery.com/download/\" target='_blank' > 👉🏼 (https://jquery.com/download/)</a> or use a CDN (Content Delivery Network) link. </p>\n\n<p>2. Create a new HTML file and add the following code inside the \"head\" section of your HTML document to include the jQuery library:</p>\n\n<p>{'<head>'}</p>\n\n<p>{'<script src=\"path/to/jquery.js\"></script>'}</p>\n\n<p>{'</head>'}</p>\n\n<p>Replace \"path/to/jquery.js\" with the actual path where the jQuery library is stored on your server, or use the CDN link:</p>\n\n<p>{'<head>'}</p>\n\n<p>{' <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script> '}</p>\n\n<p>{'</head>'}</p>\n\n<p>3. Once you have included the jQuery library in your HTML document, you can start using it by writing JavaScript code that references the jQuery library.</p>\n\n<p>For example, to change the text of an HTML element with an ID of \"myElement\", you can use the following code:</p>\n\n<p>{'<body>'}</p>\n\n<p>{'<div id=\"myElement\">Hello World!</div>'}</p>\n\n<p>{'<script>'}</p>\n\n<p>{'$(document).ready(function() {'}</p>\n\n<p>{'$(\"#myElement\").text(\"New text!\");'}</p>\n\n<p>{'});'}</p>\n\n<p>{'</script>'}</p>\n\n<p>{'</body>'}</p>\n\n<p>In this example, we are using jQuery to select the element with the ID \"myElement\" and change its text to \"New text!\". The code is wrapped in a document ready function, which ensures that the code is executed only after the document has finished loading.</p>\n\n<p>Overall, including jQuery in an HTML document is a simple process that involves referencing the jQuery library and writing JavaScript code that uses the library to manipulate HTML elements.</p>\n\n<p>jQuery syntax is a combination of CSS-style selectors and JavaScript code, which makes it easy to select and manipulate HTML elements. Here are some examples of jQuery syntax:</p>\n\n<b>1. Selecting elements</b>\n<p>To select an HTML element, you can use the jQuery function, which takes a CSS-style selector as its argument. For example, to select all \"p\" elements on the page, you can use the following code:</p>\n\n<p>{\"$('p')\"}</p> \n\n<p>You can also chain selectors to select elements based on their relationship to other elements. For example, to select all \"p\" elements that are children of a \"div\" element, you can use the following code:</p>\n\n<p>{\"$('div > p')\"}</p>\n\n<b>2. Modifying elements</b>\n<p>Once you have selected an element, you can modify its content, attributes, and CSS properties using jQuery. For example, to change the text of all \"p\" elements on the page, you can use the following code:</p>\n\n<p>{\"$('p').text('New text')\"}</p>\n\n<p>{'To add a class to an element, you can use the \"addClass\" method: '}</p>\n\n<p>{\"$('p').addClass('highlight')\"}</p>\n\n<b>3.Handling events</b>\n\n<p>You can use jQuery to handle events such as clicks, mouseovers, and keypresses. For example, to handle the click event of a button with an ID of \"myButton\", you can use the following code:</p>\n\n<p>{\"$('#myButton').click(function() {\"}</p>    \n    \n<p>{\" alert('Button clicked!') \"}</p> \n\n<p>{\"})\"}</p>\n\n<b>4. Working with AJAX</b>\n\n<p>jQuery makes it easy to work with AJAX requests. For example, to make a GET request to a URL and handle the response, you can use the following code:</p>\n\n<p>{\"$.get('https://example.com/data', function(response) {\"}</p>\n\n<p>{\"console.log(response)\"}</p>\n\n<p>{\"}) \"}</p>\n\n<p>Overall, jQuery syntax is easy to learn and use, and it provides a powerful way to manipulate HTML elements and handle events in your web applications.</p>\n\n<b>jQuery Traversing methods are used to navigate and find elements in a DOM tree. The following are some examples of traversing methods that deal with sibling elements.</b>    \n\n<b>1. next() method:</b> \n\n<p>The next() method returns the next sibling element of the selected element. For example:</p>\n\n<p>{'$(document).ready(function(){ '}</p> \n\n<p>{'$(\"h2\").next().css(\"background-color\", \"yellow\");'}</p>\n\n<p>{'}); '}</p>\n\n<p>This code selects all \"h2\" elements and applies a CSS style to their next sibling element by changing its background color to yellow</p>\n\n<b>2. prev() method:</b>\n\n<p>The prev() method returns the previous sibling element of the selected element. For example:</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{' $(\"h2\").prev().css(\"background-color\", \"yellow\");'}</p>\n\n<p>{'});'}</p>\n\n<p>This code selects all \"h2\" elements and applies a CSS style to their previous sibling element by changing its background color to yellow.</p>\n \n<b>3. nextAll() method:</b>\n\n<p>The nextAll() method returns all the next sibling elements of the selected element. For example</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\"h2\").nextAll().css(\"background-color\", \"yellow\");'}</p>\n\n<p>{'}); '}</p>\n\n<p>This code selects all \"h2\" elements and applies a CSS style to all their next sibling elements by changing their background color to yellow.</p>\n\n<b>4. prevAll() method:</b> \n\n<p>The prevAll() method returns all the previous sibling elements of the selected element. For example:</p>\n\n<p>{'$(document).ready(function(){'}</p> \n\n<p>{'$(\"h2\").prevAll().css(\"background-color\", \"yellow\");'}</p>\n    \n<p>{'}); '}</p> \n\n<p>This code selects all \"h2\" elements and applies a CSS style to all their previous sibling elements by changing their background color to yellow</p>\n\n<b>5. siblings() method:</b>\n\n<p>The siblings() method returns all the sibling elements of the selected element. For example:</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\"h2\").siblings().css(\"background-color\", \"yellow\");'}</p>\n\n<p>{'});'}</p>\n\n<p>This code selects all \"h2\" elements and applies a CSS style to all their sibling elements by changing their background color to yellow.</p>\n\n<p>Overall, these traversing methods allow you to easily navigate and select sibling elements of an HTML element, which can be useful for various purposes such as styling or modifying conten</p>\n\n<b>JQuery (CSS)</b>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\".box\").click(function(){'}</p>\n\n<p>{'$(this).css(\"background-color\", \"red\");'}</p>\n\n<p>{'});'}</p>\n\n<p>{'});'}</p>\n\n<p>This code selects the element with class \"box\" using the jQuery selector \".box\". Then, it attaches a click event handler to that element using the click() method. Inside the event handler function, we use the css() method to change the background color of the element to red.</p>\n\n<p>So when the box element is clicked, its background color changes from blue to red. We can also use the css() method to change other CSS properties like font-size, border-width, etc.</p>\n\n<p>Here's another example that demonstrates how to change multiple CSS properties using the css() method:</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\".box\").css({'}</p>\n\n<p>{'\"background-color\": \"green\",'}</p>\n\n<p>{'\"width\": \"150px\",'}</p>\n\n<p>{'\"height\": \"150px\",'}</p>\n\n<p>{'\"border\": \"2px solid black\"'}</p>\n\n<p>{' });'}</p>\n\n<p>{'});'}</p>\n\n<p>This code selects all elements with class \"box\" and changes their background color to green, width and height to 150px, and adds a 2px solid black border.</p>\n\n<p>Overall, using jQuery to manipulate CSS provides a powerful way to dynamically style HTML elements based on user interactions or other events.</p>\n\n<b>JQuery ($.each)</b>\n\n<p>The $.each() method in jQuery is used to iterate over arrays and objects. Here's an example that demonstrates how to use it:</p>\n\n<p>Suppose we have an array of numbers and we want to iterate over each element of the array and print its value to the console:</p>\n    \n<p>{'var numbers = [1, 2, 3, 4, 5];'}</p>\n\n<p>{'$.each(numbers, function(index, value){'}</p>\n\n<p>{'console.log(\"Element at index \" + index + \" is \" + value);'}</p>\n\n<p>{'});'}</p>\n\n<p>In this code, we pass the numbers array to the $.each() method along with a callback function that takes two arguments: the index of the current element and the value of the current element. Inside the callback function, we use console.log() to print the index and value of the current element to the console.</p>\n    \n<p>The output of this code would be:</p>\n\n<p>{'Element at index 0 is 1'}</p>\n\n<p>{'Element at index 1 is 2'}</p>\n\n<p>{'Element at index 2 is 3'}</p>\n\n<p>{'Element at index 3 is 4'}</p>\n\n<p>{'Element at index 4 is 5'}</p>\n\n<p>Here's another example that demonstrates how to use $.each() with an object:</p>\n\n<p>Suppose we have an object representing a person's details and we want to iterate over its properties and print their values to the console:</p>\n\n<p>{'var person = {'}</p>\n\n<p>{'name: \"John\",'}</p>\n\n<p>{'age: 30,'}</p>\n\n<p>{'occupation: \"Developer\"'}</p>\n\n<p>{'};'}</p>\n\n<p>{'$.each(person, function(key, value){'}</p>\n\n<p>{'console.log(key + \": \" + value);'}</p>\n\n<p>{'});'}</p>\n\n<p>In this code, we pass the person object to the $.each() method along with a callback function that takes two arguments: the key of the current property and the value of the current property. Inside the callback function, we use console.log() to print the key and value of the current property to the console.</p>\n\n<p>The output of this code would be:</p>\n\n<p>{'name: John'}</p>\n\n<p>{'age: 30'}</p>\n\n<p>{'occupation: Developer'}</p>\n\n<p>Overall, the $.each() method in jQuery provides a convenient way to iterate over arrays and objects and perform operations on their elements.</p>\n\n<b>JQuery Events</b>\n\n<p>JQuery provides a rich set of event-handling methods that allow developers to attach event handlers to HTML elements and respond to user interactions, such as mouse clicks, keyboard input, and form submissions.</p>\n    \n<p>Here's an example that demonstrates how to use the click() method in jQuery to attach a click event handler to a button element and respond to the user clicking on the button:</p>    \n    \n\n<p>{'<!DOCTYPE html>'}</p>\n\n<p>{'<html>'}</p>  \n\n<p>{'<head>'}</p>\n\n<p>{'<title>jQuery Event Example</title>'}</p>\n\n<p>{'<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>'}</p>\n\n<p>{'</head>'}</p>\n\n<p>{'<body>'}</p>\n\n<p>{'<button id=\"myButton\">Click me!</button>'}</p>\n\n<p>{'<script>'}</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\"#myButton\").click(function(){'}</p>\n\n<p>{'alert(\"Button clicked!\");'}</p>\n\n<p>{'});'}</p>\n\n<p>{'});'}</p>\n\n<p>{' </script>'}</p>\n\n<p>{'</body>'}</p>\n\n<p>{'</html>'}</p>\n\n\n<p>\nIn this code, we include the jQuery library in the head section of the HTML document and attach a <b>click()</b> event handler to the button element using the ID selector <b>#myButton</b>. Inside the event handler function, we use the <b>alert()</b> method to display a message box with the text \"Button clicked!\".    \n</p>\n\n<p>When the user clicks on the button, the <b>click()</b> event is triggered, and the event handler function is executed, displaying the message box.</p>\n\n<p>Here's another example that demonstrates how to use the <b>submit()</b> method in jQuery to attach a submit event handler to a form element and prevent the default form submission behavior:</p>\n    \n<p>{'<!DOCTYPE html>'}</p>\n\n<p>{'<html>'}</p>\n\n<p>{'<head>'}</p>\n\n<p>{'<title>jQuery Event Example</title>'}</p>\n\n<p>{'<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>'}</p>\n\n<p>{'</head>'}</p>\n\n<p>{'<body>'}</p>\n\n<p>{'<form id=\"myForm\">'}</p>\n\n<p>{'<label for=\"name\">Name:</label>'}</p>\n\n<p>{'<input type=\"text\" id=\"name\" name=\"name\"><br><br>'}</p>\n\n<p>{'<label for=\"email\">Email:</label>'}</p>\n\n<p>{'<input type=\"email\" id=\"email\" name=\"email\"><br><br>'}</p>\n\n<p>{'<input type=\"submit\" value=\"Submit\">'}</p>\n\n<p>{'</form>'}</p>\n\n<p>{'<script>'}</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\"#myForm\").submit(function(event){'}</p>\n\n<p>{'event.preventDefault();'}</p>\n\n<p>{'alert(\"Form submitted!\");'}</p>\n\n<p>{'});'}</p>\n\n<p>{' });'}</p>\n\n<p>{'</script>'}</p>\n\n<p>{'</body>'}</p>\n\n<p>{'</html>'}</p>\n\n<p>In this code, we attach a <b>submit()</b> event handler to the form element using the ID selector <b>#myForm</b>. Inside the event handler function, we use the <b>preventDefault()</b> method to prevent the default form submission behavior, which would reload the page. Instead, we display a message box with the text \"Form submitted!\". </p>\n    \n<p>When the user submits the form, the <b>submit()</b> event is triggered, and the event handler function is executed, preventing the default form submission behavior and displaying the message box.</p>    \n\n<p>Overall, the event-handling methods in jQuery provide a powerful way to handle user interactions and respond to events in a consistent and cross-browser compatible way</p>    \n    \n</div>\n      )}\n      {language === 'ru' && (\n        <div>\n          <RuJquery/>\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmJquery />\n        </div>\n      )}   \n    \n    \n    \n    \n    \n    \n    \n    \n    </div>\n  )\n}\n\nexport default Jquery;","/home/artashes/Desktop/codeex/codeex/src/lang/AmJquery.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuJquery.js",["1026"],[],"import React from 'react'\n\nfunction RuJquery() {\n  return (\n    <div>\n        <h1>JavaScript(JQuery)</h1>\n\n        <p>jQuery - это библиотека JavaScript, которая упрощает процесс написания кода на JavaScript и работы с документами HTML. Она была создана в 2006 году Джоном Резигом и в настоящее время является одной из самых популярных библиотек JavaScript.    \n  </p>\n\n  <p>\n  jQuery предоставляет разнообразные функции для работы с Document Object Model (DOM), а также для работы с AJAX (асинхронный JavaScript и XML) и создания анимации. Она также упрощает написание кода, совместимого с разными браузерами, потому что библиотека jQuery автоматически обрабатывает проблемы совместимости браузеров.\n  </p>\n\n  <p>Вот несколько примеров использования jQuery:</p>\n\n  <p>1. Работа с элементами DOM:</p>\n\n  <p>{'// Изменение текста элемента с ID \"myElement\"'}</p>\n\n  <p>{\"$('#myElement').text('Новый текст'); \"}</p>\n\n  <p>{'// Добавление нового элемента на страницу '}</p>\n\n  <p>{\"$('body').append('<div>Новый элемент</div>');\"}</p>\n\n  <p>2. Обработка событий:</p>\n\n  <p>{'// Обработка события клика на кнопке с идентификатором \"myButton\"'}</p>\n\n<p>{\"$('#myButton').click(function() { \"}</p>\n\n<p>{\" alert('Кнопка нажата!');\"}</p>\n\n<p>{\"});\"}</p>\n\n<p>3. Работа с AJAX:</p>\n\n<p>{'// Отправка запроса AJAX на сервер и обновление элемента страницы ответом '}</p>\n\n<p>{\" $.get('https://example.com/api/data', function(response) { \"}</p>\n\n<p>{\" $('#myElement').text(response); \"}</p>\n\n<p>{\" }); \"}</p>\n\n<p>В целом, jQuery - мощный и универсальный инструмент для упрощения разработки JavaScript и облегчения создания динамических и интерактивных веб-страниц.</p>\n  \n<b>Чтобы добавить jQuery в HTML-документ, вы можете использовать следующие шаги:</b>\n\n<p>1. Скачайте библиотеку jQuery с официального веб-сайта <a href=\"https://jquery.com/download/\" target='_blank' > 👉🏼 (https://jquery.com/download/)</a> или используйте ссылку на CDN (Content Delivery Network).</p>\n\n<p>2. Создайте новый HTML-файл и добавьте следующий код внутри раздела \"head\" вашего HTML-документа, чтобы включить библиотеку jQuery:</p>\n\n<p>{'<head>'}</p>\n\n<p>{'<script src=\"path/to/jquery.js\"></script>'}</p>\n\n<p>{'</head>'}</p>\n\n<p>Замените \"path/to/jquery.js\" на фактический путь, где хранится библиотека jQuery на вашем сервере, или используйте ссылку на CDN:</p>\n\n<p>{'<head>'}</p>\n\n<p>{' <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script> '}</p>\n\n<p>{'</head>'}</p>\n\n<p>3. После того, как вы добавили библиотеку jQuery в свой HTML-документ, вы можете начать использовать ее, написав JavaScript-код, который ссылается на библиотеку jQuery.</p>\n\n<p>Например, чтобы изменить текст элемента HTML с идентификатором \"myElement\", вы можете использовать следующий код:</p>\n\n<p>{'<body>'}</p>\n\n<p>{'<div id=\"myElement\">Привет, мир!</div>'}</p>\n\n<p>{'<script>'}</p>\n\n<p>{'$(document).ready(function() {'}</p>\n\n<p>{'$(\"#myElement\").text(\"Новый текст!\");'}</p>\n\n<p>{'});'}</p>\n\n<p>{'</script>'}</p>\n\n<p>{'</body>'}</p>  \n\n<p>В этом примере мы используем jQuery для выбора элемента с идентификатором \"myElement\" и изменения его текста на \"Новый текст!\". Код обернут в функцию document ready, которая гарантирует, что код будет выполнен только после загрузки документа.</p>\n\n<p>В целом, добавление jQuery в HTML-документ - это простой процесс, который включает ссылку на библиотеку jQuery и написание JavaScript-кода, который использует библиотеку для управления элементами HTML.</p>\n\n<p>Синтаксис jQuery - это комбинация селекторов в стиле CSS и JavaScript-кода, что делает легким выбор и управление элементами HTML. Вот несколько примеров синтаксиса jQuery:</p>\n\n<b>1. Выбор элементов</b>\n\n<p>Чтобы выбрать элемент HTML, вы можете использовать функцию jQuery, которая принимает селектор в стиле CSS в качестве аргумента. Например, чтобы выбрать все элементы \"p\" на странице, вы можете использовать следующий код:</p>\n\n<p>{\"$('p')\"}</p>\n\n<p>Вы также можете объединять селекторы, чтобы выбирать элементы на основе их отношений с другими элементами. Например, чтобы выбрать все элементы \"p\", являющиеся дочерними элементами элемента \"div\", вы можете использовать следующий код:</p>\n\n<p>{\"$('div > p')\"}</p>\n\n<b>2. Изменение элементов</b>\n\n<p>После того, как вы выбрали элемент, вы можете изменить его содержимое, атрибуты и свойства CSS с помощью jQuery. Например, чтобы изменить текст всех элементов \"p\" на странице, вы можете использовать следующий код:</p>\n\n<p>{\"$('p').text('Новый текст')\"}</p>   \n   \n<p>{'Чтобы добавить класс элементу, вы можете использовать метод \"addClass\": '}</p>\n<p>{\"$('p').addClass('highlight')\"}</p>\n<b>3. Обработка событий</b>\n\n<p>Вы можете использовать jQuery для обработки событий, таких как клики, наведение курсора мыши и нажатия клавиш. Например, чтобы обработать событие клика кнопки с идентификатором \"myButton\", вы можете использовать следующий код:</p>\n\n<p>{\"$('#myButton').click(function() {\"}</p>    \n\n<p>{\" alert('Button clicked!') \"}</p> \n\n<p>{\"})\"}</p>\n\n<b>4. Работа с AJAX</b>\n\n<p>jQuery упрощает работу с запросами AJAX. Например, чтобы сделать GET-запрос по URL и обработать ответ, вы можете использовать следующий код:</p>\n\n<p>{\"$.get('https://example.com/data', function(response) {\"}</p>\n\n<p>{\"console.log(response)\"}</p>\n\n<p>{\"}) \"}</p>   \n   \n<p>В целом, синтаксис jQuery легок для изучения и использования, и он предоставляет мощный способ управления элементами HTML и обработки событий в ваших веб-приложениях.</p>\n\n<b>Методы jQuery Traversing используются для навигации и поиска элементов в дереве DOM. Вот некоторые примеры методов обхода, которые работают с элементами-соседями.</b>\n\n<b>1. Метод next():</b>\n\n<p>Метод next() возвращает следующий элемент-сосед выбранного элемента. Например:</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{' $(\"h2\").next().css(\"background-color\", \"yellow\");'}</p>\n\n<p>{'});'}</p>\n\n<p>Этот код выбирает все элементы \"h2\" и применяет стиль CSS к следующему элементу-соседу, изменив его цвет фона на желтый.</p>\n\n<b>2. Метод prev():</b>\n\n<p>Метод prev() возвращает предыдущий элемент-сосед выбранного элемента. Например:</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{' $(\"h2\").prev().css(\"background-color\", \"yellow\");'}</p>\n\n<p>{'});'}</p>  \n\n<p>Этот код выбирает все элементы \"h2\" и применяет CSS-стиль ко всем их предыдущим соседним элементам, изменяя их цвет фона на желтый.</p>\n   \n<b>3. Метод nextAll():</b>\n\n<p>Метод nextAll() возвращает все следующие элементы-соседи выбранного элемента. Например:</p>\n   \n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\"h2\").nextAll().css(\"background-color\", \"yellow\");'}</p>\n\n<p>{'});'}</p>\n\n<p>Этот код выбирает все элементы \"h2\" и применяет стиль CSS ко всем их следующим соседним элементам, изменяя их цвет фона на желтый.</p>\n\n<b>4. Метод prevAll():</b>\n\n<p>Метод prevAll() возвращает все предыдущие элементы-соседи выбранного элемента. Например:</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\"h2\").prevAll().css(\"background-color\", \"yellow\");'}</p>\n\n<p>{'});'}</p>\n\n<p>Этот код выбирает все элементы \"h2\" и применяет стиль CSS ко всем их предыдущим соседним элементам, изменяя их цвет фона на желтый.</p>\n   \n<b>5. Метод siblings():</b>\n\n<p>Метод siblings() возвращает все элементы-соседи выбранного элемента. Например:</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\"h2\").siblings().css(\"background-color\", \"yellow\");'}</p>\n\n<p>{'});'}</p>\n\n<p>Этот код выбирает все элементы \"h2\" и применяет стиль CSS ко всем их соседним элементам, изменяя их цвет фона на желтый</p>\n   \n<p>В целом, эти методы позволяют легко навигировать и выбирать элементы-соседи HTML-элемента, что может быть полезно для различных целей, таких как стилизация или изменение содержимого.</p>  \n\n<b>JQuery (CSS)</b>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\".box\").click(function(){'}</p>\n\n<p>{'$(this).css(\"background-color\", \"red\");'}</p>\n\n<p>{'});'}</p>\n\n<p>{'});'}</p>\n\n<p>Этот код выбирает элемент с классом \"box\", используя селектор jQuery \".box\". Затем он присоединяет обработчик события нажатия на этот элемент, используя метод click(). Внутри функции обработчика события мы используем метод css() для изменения цвета фона элемента на красный.</p>\n\n<p>Таким образом, при щелчке на элементе \"box\" его цвет фона меняется с синего на красный. Мы также можем использовать метод css() для изменения других CSS-свойств, таких как размер шрифта, ширина границы и т.д.</p>   \n\n<p>Вот еще один пример, демонстрирующий, как изменять несколько CSS-свойств, используя метод css():</p>   \n   \n <p>{'$(document).ready(function() {'}</p>\n\n <p>{'$(\".box\").css( {'}</p>\n\n <p>{'\"background-color\": \"green\",'}</p> \n\n <p>{'\"width\": \"150px\",'}</p>\n\n <p>{'\"height\": \"150px\",'}</p> \n\n <p>{'\"border\": \"2px solid black\"'}</p>  \n\n <p>{'});'}</p> \n\n <p>{'});'}</p>\n\n <p>Этот код выбирает все элементы с классом \"box\" и изменяет цвет их фона на зеленый, ширину и высоту на 150 пикселей и добавляет сплошную черную рамку толщиной 2 пикселя.</p> \n\n <p>Данный код использует метод $.each() в jQuery для итерации по массивам и объектам. Вот пример, который демонстрирует его использование:</p>\n\n<p>Предположим, у нас есть массив чисел, и мы хотим перебрать каждый элемент массива и вывести его значение в консоль:</p>\n\n<p>{'var numbers = [1, 2, 3, 4, 5];'}</p>\n\n<p>{'$.each(numbers, function(index, value){'}</p>\n\n<p>{'console.log(\"Элемент с индексом \" + index + \" равен \" + value);'}</p>\n\n<p>{'});'}</p>\n\n<p>В этом коде мы передаем массив numbers в метод $.each() вместе с функцией обратного вызова, которая принимает два аргумента: индекс текущего элемента и значение текущего элемента. Внутри функции обратного вызова мы используем console.log() для вывода индекса и значения текущего элемента в консоль.</p>\n\n<p>Вывод этого кода будет следующим:</p>\n\n<p>{'Элемент с индексом 0 равен 1'}</p>\n\n<p>{'Элемент с индексом 1 равен 2'}</p>\n\n<p>{'Элемент с индексом 2 равен 3'}</p>\n\n<p>{'Элемент с индексом 3 равен 4'}</p>\n\n<p>{'Элемент с индексом 4 равен 5'}</p>\n\n<p>В целом, использование jQuery для манипулирования CSS предоставляет мощный способ динамического стилизации элементов HTML на основе пользовательских взаимодействий или других событий. </p>\n    \n<p>Вот еще один пример, демонстрирующий, как использовать $.each() с объектом:</p>\n\n<p>Предположим, у нас есть объект, представляющий данные о человеке, и мы хотим перебрать его свойства и вывести их значения в консоль:</p>\n\n<p>{'var person = {'}</p>\n\n<p>{'name: \"John\",'}</p>\n\n<p>{'age: 30,'}</p>\n\n<p>{'occupation: \"Developer\"'}</p>\n\n<p>{'};'}</p>\n\n<p>{'$.each(person, function(key, value){'}</p>\n\n\n<p>{'console.log(key + \": \" + value);'}</p>\n\n<p>{'});'}</p>\n\n<p>В этом коде мы передаем объект person методу $.each() вместе с функцией обратного вызова, которая принимает два аргумента: ключ текущего свойства и значение текущего свойства. Внутри функции обратного вызова мы используем console.log(), чтобы вывести ключ и значение текущего свойства в консоль.</p>\n\n<p>Вывод этого кода будет следующим:</p>\n\n<p>{'name: John'}</p>\n\n<p>{'age: 30'}</p>\n\n<p>{'occupation: Developer'}</p>\n\n<p>В целом, метод $.each() в jQuery предоставляет удобный способ перебирать массивы и объекты и выполнять операции над их элементами.</p>\n\n<b>JQuery Events</b>    \n\n<p>JQuery предоставляет богатый набор методов обработки событий, которые позволяют разработчикам присоединять обработчики событий к элементам HTML и реагировать на взаимодействия пользователей, такие как клики мыши, ввод с клавиатуры и отправку формы.</p>\n\n<p>Вот пример, который демонстрирует, как использовать метод click() в jQuery, чтобы присоединить обработчик событий клика к элементу кнопки и реагировать на щелчок пользователя на кнопке:</p>\n\n<p>{'<!DOCTYPE html>'}</p>\n\n<p>{'<html>'}</p>  \n\n<p>{'<head>'}</p>\n\n<p>{'<title>jQuery Event Example</title>'}</p>\n\n<p>{'<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>'}</p>\n\n<p>{'</head>'}</p>\n\n<p>{'<body>'}</p>\n\n<p>{'<button id=\"myButton\">Click me!</button>'}</p>\n\n<p>{'<script>'}</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\"#myButton\").click(function(){'}</p>\n\n<p>{'alert(\"Button clicked!\");'}</p>\n\n<p>{'});'}</p>\n\n<p>{'});'}</p>\n\n<p>{' </script>'}</p>\n\n<p>{'</body>'}</p>\n\n<p>{'</html>'}</p> \n\n<p>В этом коде мы используем селектор jQuery для выбора элемента кнопки с помощью его идентификатора, а затем применяем метод click() для присоединения обработчика событий click к элементу кнопки. Внутри обработчика событий мы используем метод alert() для вывода сообщения в диалоговом окне, когда пользователь нажимает на кнопку.</p>    \n    \n<p>В этом коде мы подключаем библиотеку jQuery в разделе head документа HTML и присоединяем обработчик событий <b>click()</b> к элементу кнопки с помощью селектора ID <b>#myButton</b>. Внутри функции обработчика событий мы используем метод <b>alert()</b> для отображения диалогового окна с текстом \"Button clicked!\".</p>\n\n<p>Когда пользователь нажимает на кнопку, событие <b>click()</b> срабатывает, и функция обработчика событий выполняется, отображая диалоговое окно.</p>\n\n<p>Вот еще один пример, который демонстрирует, как использовать метод <b>submit()</b> в jQuery для присоединения обработчика событий отправки формы к элементу формы и предотвращения стандартного поведения отправки формы:</p>\n\n<p>{'<!DOCTYPE html>'}</p>\n\n<p>{'<html>'}</p>\n\n<p>{'<head>'}</p>\n\n<p>{'<title>jQuery Event Example</title>'}</p>\n\n<p>{'<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>'}</p>\n\n<p>{'</head>'}</p>\n\n<p>{'<body>'}</p>\n\n<p>{'<form id=\"myForm\">'}</p>\n\n<p>{'<label for=\"name\">Name:</label>'}</p>\n\n<p>{'<input type=\"text\" id=\"name\" name=\"name\"><br><br>'}</p>\n\n<p>{'<label for=\"email\">Email:</label>'}</p>    \n\n<p>{'<input type=\"email\" id=\"email\" name=\"email\"><br><br>'}</p>\n\n<p>{'<input type=\"submit\" value=\"Submit\">'}</p>\n\n<p>{'</form>'}</p>\n\n<p>{'<script>'}</p>\n\n<p>{'$(document).ready(function(){'}</p>\n\n<p>{'$(\"#myForm\").submit(function(event){'}</p>\n\n<p>{'event.preventDefault();'}</p>\n\n<p>{'alert(\"Form submitted!\");'}</p>\n\n<p>{'});'}</p>\n\n<p>{' });'}</p>\n\n<p>{'</script>'}</p>\n\n<p>{'</body>'}</p>\n\n<p>{'</html>'}</p>\n\n\n\n\n<p>В этом коде мы присоединяем обработчик события <b>submit()</b> к элементу формы с помощью селектора идентификатора <b>#myForm</b>. Внутри функции обработчика событий мы используем метод <b>preventDefault()</b>, чтобы предотвратить отправку формы по умолчанию, которая приводит к перезагрузке страницы. Вместо этого мы отображаем окно сообщения с текстом «Форма отправлена!». </p>\n    \n<p>Когда пользователь отправляет форму, запускается событие <b>submit()</b> и выполняется функция обработчика событий, предотвращающая отправку формы по умолчанию и отображающая окно сообщения.</p>\n\n<p>В целом, методы обработки событий в jQuery обеспечивают мощный способ обработки взаимодействия с пользователем и реагирования на события согласованным и совместимым с разными браузерами способом</p>\n    \n    \n    \n    \n    \n    \n    </div>\n  )\n}\n\nexport default RuJquery","/home/artashes/Desktop/codeex/codeex/src/pages/React_1.js",["1027","1028","1029","1030","1031","1032"],[],"import React,{useState} from 'react';\nimport RuReact_1 from '../lang/RuReact_1';\nimport AmReact_1 from '../lang/AmReact_1';\n\nfunction React_1() {\n  \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n\n\n  \n  return (\n    <div className='java-script'>\n\n<div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n {language === 'en' && (\n        <div>\n\n\n        <h1>React JS</h1>\n\n<p><b>ReactJS</b> is a popular <b>JavaScript </b>library that was created by <b>Facebook</b>. It was first released in 2013 and has since gained a huge following among web developers.</p>\n\n<p>ReactJS was created to solve a specific problem - the need for a fast and efficient way to build complex user interfaces with large amounts of data that change over time. Prior to ReactJS, building these types of interfaces required a lot of code and was often slow and difficult to manage.</p>\n\n<p>The core idea behind ReactJS is to break down user interfaces into individual components that can be reused across different parts of an application. Each component is responsible for rendering a small piece of the UI and can be easily composed together to create complex interfaces.</p>\n\n<p>One of the key benefits of ReactJS is that it makes use of a virtual DOM, which is a lightweight representation of the actual DOM. This allows ReactJS to make updates to the UI in a very efficient way, without having to make expensive updates to the actual DOM.</p>\n\n<b>Here is an example of a simple ReactJS component:</b>\n\n<code>\n<p>{\"import React from 'react';\"}</p>\n\n<p>{'function MyComponent(props) {'}</p>\n\n<p>{' return ('}</p>\n\n<p>{'<div>'}</p>\n\n<p>{'<h1>{props.title}</h1>'}</p>\n\n<p>{'<p>{props.description}</p>'}</p>\n\n<p>{'</div>'}</p>\n\n<p>{' );'}</p>\n\n<p>{'}'}</p>\n\n<p>{'export default MyComponent;'}</p>  \n</code>\n\n<p>This component takes in two props - <b>title and description </b>- and renders them in a simple HTML structure. This component can then be used throughout an application to display information to the user.</p>\n\n<p>If you're interested in learning more about ReactJS, I would recommend starting with the official documentation on the ReactJS website: <a href=\"https://reactjs.org/\" target='_blank' > 👉🏼 <b>https://reactjs.org/.</b> </a>There you will find a wealth of information on how to get started with ReactJS, including tutorials, guides, and reference materials.</p>\n\n<p>To install Node.js for working with React, follow the steps below:</p>\n\n<h1>Installing Node.js on Windows</h1>\n\n<p>1. Go to the official Node.js website:<a href=\"https://nodejs.org/\" target='_blank' > 👉🏼 https://nodejs.org/ </a></p>\n\n<p>2. Click the \"Download\" button for the \"Windows Installer\" version</p> \n\n<p>3. Run the downloaded installer and follow the prompts to install Node.js</p>\n\n<p>4. Once the installation is complete, open a command prompt and type node -v to verify that Node.js is installed correctly</p>\n    \n\n<h1>Installing Node.js on Ubuntu</h1>\n\n<p>1. Open a terminal window</p>\n\n<p>2. Run the command <b>sudo apt update to update</b> the package manager</p>\n\n<p>3. Run the command <b>sudo apt install nodejs</b> to install Node.js</p>\n\n<p>4. Run the command <b>node -v</b> to verify that Node.js is installed correctly</p>\n\n<b>Here is an example of how to use Node.js and React together:</b>\n\n<p>1. Create a new React app using the command <b>npx create-react-app my-app</b></p>\n\n<p>2. Change into the <b>my-app</b> directory using the command <b>cd my-app</b></p>\n\n<p>3. Start the development server using the command <b>npm start</b></p>\n\n<p>4. Open a web browser and navigate to <b>http://localhost:3000</b> to see the React app running</p>\n    \n <p>If you're interested in learning more about Node.js and React, I would recommend checking out the official documentation for both technologies. Here are the links to their respective websites:</p>   \n    \n <b><a href=\"https://nodejs.org/\" target='_blank' > 👉🏼 Node.js</a></b> <br/>\n\n <b> <a href=\"https://reactjs.org/\" target='_blank' > 👉🏼 React</a> </b> <br/> <br/>\n\n <b>To work with React, you will need to have a good understanding of the following:</b> \n\n <p>1. HTML/CSS: You should have a good understanding of HTML and CSS, as React is primarily used for building user interfaces (UIs) and web applications.</p>\n\n <p>2. JavaScript: React is a JavaScript library, so you will need to have a solid understanding of JavaScript, including concepts such as functions, arrays, objects, and scope.</p>\n\n <p>3. ES6: React relies heavily on ES6 features such as arrow functions, destructuring, and classes, so you will need to have a good understanding of these features.</p> \n\n <p>4. JSX: As mentioned earlier, JSX is a syntax extension for JavaScript that allows you to write HTML-like code in your JavaScript files. You will need to understand how JSX works and how to use it to define UI components.</p>\n\n <p>5. Node.js and npm: React applications are typically built using Node.js and the npm package manager. You will need to understand how to install and use these tools.</p>\n\n <p>6. React ecosystem: There is a wide range of tools and libraries that are commonly used in the React ecosystem, such as React Router, Redux, and Axios. You will need to understand how these tools work and how to use them to build React applications.</p>\n\n <p>7. Development tools: You will also need to be familiar with development tools such as Visual Studio Code, Chrome DevTools, and Git.</p>\n    \n </div>\n     )}\n      {language === 'ru' && (\n        <div>\n          <RuReact_1 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmReact_1 />\n        </div>\n      )} \n\n  </div>\n  )\n}\n\nexport default React_1;","/home/artashes/Desktop/codeex/codeex/src/pages/React_2.js",["1033","1034"],[],"import React, {useState} from 'react';\nimport RuReact_2 from '../lang/RuReact_2';\nimport AmReact_2 from '../lang/AmReact_2';\n\nfunction React_2() {\n   const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n   const handleEnglishClick = () => {\n     setLanguage('en');\n   };\n \n   const handleRussianClick = () => {\n     setLanguage('ru');\n   };\n \n   const handleArmenianClick = () => {\n     setLanguage('am');\n   };\n \n   return (\n    <div className='java-script'>\n      \n      <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n {language === 'en' && (\n        <div>  \n      \n      <h1>JSX</h1>\n\n  <p>JSX is a syntax extension for JavaScript that allows you to write HTML-like code in your JavaScript files. It is used extensively in React to define the structure and layout of UI components.</p>    \n\n    <p>Here is an example of how JSX works:</p>\n\n   <code>\n   <p><b>{\" import React from 'react'; \"}</b></p>\n\n<p>{'function MyComponent() {'}</p>\n\n<p>{' return ( '}</p>\n\n<p>{'<div> '}</p>\n\n<p>{'<h1>Hello, world!</h1> '}</p>\n\n<p>{'<p>This is a simple JSX example.</p> '}</p>\n\n<p>{' </div> '}</p>\n\n<p>{'); '}</p>\n\n<p>{'}'}</p>\n\n<p> <b>{'export default MyComponent;'}</b> </p> \n   </code>\n\n    <p>In this example, we are defining a simple React component using JSX. The component renders a <b>div</b> element that contains an <b>h1 and a p</b> element. Notice that the HTML-like code is enclosed in parentheses and is defined using JSX syntax.</p>\n\n    <p>JSX allows you to easily combine HTML-like code with JavaScript logic. For example, you can use JavaScript variables and expressions inside your JSX code:</p>\n    \n   <code>\n   <p><b>{\" import React from 'react'; \"}</b></p>\n\n<p>{'function MyComponent() { '}</p>\n\n<p>{\"const name = 'John Doe'; \"}</p>\n\n<p>{\" return ( \"}</p>\n\n<p>{\" <div> \"}</p>\n\n<p>{\" <h1>Hello, {name}!</h1> \"}</p>\n\n<p>{\" <p>This is a simple JSX example.</p> \"}</p>\n\n<p>{\" </div> \"}</p>\n\n<p>{\");\"}</p>\n\n<p>{\" } \"}</p>\n\n<p><b>{'export default MyComponent;'}</b></p> \n   \n   </code>\n\n    <p>In this example, we are using a JavaScript variable <b>(name)</b> inside our JSX code to dynamically render a personalized greeting.</p>\n\n    <p>JSX is not required for React development, but it is highly recommended as it makes it much easier to write and manage complex UI components. When you write JSX code, it is transpiled into regular JavaScript code that can be executed by the browser.</p>\n    \n    <p>There are two main types of React components: functional components and class components.</p>\n    \n    <p>Functional components are defined as JavaScript functions that return a JSX element. They are typically used for simple, presentational UI components that don't have any state or lifecycle methods.</p>\n    \n    <p>Here's an example of a simple functional component:</p>\n\n    <code>\n   \n    <p><b>{\"import React from 'react'; \"}</b></p>\n\n    <p>{'function MyComponent(props) {'}</p>\n\n    <p>{'return ('}</p>\n\n    <p>{'<div> '}</p>\n\n    <p>{' <h1>Hello, {props.name}!</h1> '}</p>\n\n    <p>{'<p>This is a functional component.</p> '}</p>\n\n    <p>{'</div> '}</p>\n\n    <p>{' );'}</p>\n\n    <p>{'}'}</p>\n\n    <p>{'export default MyComponent;'}</p>  \n    \n    </code>\n\n    <p>In this example, we are defining a functional component called <b>MyComponent</b> that takes in a <b>props</b> object as an argument. The component returns a JSX element that includes a h1 element with a personalized greeting and a <b>p</b> element with a message.</p>\n    \n    <p>Class components, on the other hand, are defined as JavaScript classes that extend the <b>React.Component</b> class. They are used for more complex UI components that need to manage state and have lifecycle methods.</p>\n    \n    <p>Here's an example of a simple class component:</p>\n\n    <code>\n    <p><b>{\" import React from 'react'; \"}</b></p>\n\n    <p>{' class MyComponent extends React.Component {' }</p>\n\n    <p>{'constructor(props) {'}</p>\n\n    <p>{'super(props);'}</p>\n\n    <p>{'this.state = {'}</p>\n\n    <p>{'count: 0'}</p>\n\n    <p>{'};'}</p>\n\n    <p>{'}'}</p>\n\n    <p>{'render() {'}</p>\n\n    <p>{' return ('}</p>\n\n    <p>{' <div>'}</p>\n\n    <p>{'<h1>Count: {this.state.count}</h1>'}</p>\n\n    <p>{'<button onClick={() => this.setState({ count: this.state.count + 1 })}>Increment</button>'}</p>\n\n    <p>{' </div> '}</p>\n\n    <p>{' );'}</p>\n\n    <p>{' }'}</p>\n\n    <p>{'}'}</p>\n\n    <p><b>{'export default MyComponent;'}</b></p>  \n    </code>\n\n    <p>In this example, we are defining a class component called MyComponent that has a state property called <b>count and a render</b> method that returns a JSX element with a h1 element that displays the current count and a <b>button</b> element that increments the count when clicked.</p>\n\n    <p>Components can be composed and nested to create complex UI elements. They can also accept props as inputs, which allow them to be customized and reused throughout the application.</p>\n\n    <p><b>{'<Component />'}</b> is a syntax used in React to render a component. It's called a self-closing tag or an empty tag, and it's equivalent to calling the component as a function with no arguments.</p>\n\n    <p>For example, let's say we have a simple component called <b>MyComponent</b>:</p>\n\n   <code>\n<p>{'function MyComponent() {'}</p>\n\n<p>{'return ( '}</p>\n\n<p>{'<div>  '}</p>\n\n<p>{'<h1>Hello, world!</h1> '}</p>\n\n<p>{'</div> '}</p>\n\n<p>{');'}</p>\n\n<p>{'}'}</p>\n\n   </code>\n    <p>To render this component, we would use the <b>{'<MyComponent /> '}</b> syntax:</p>\n\n <code>\n <p>{'ReactDOM.render( '}</p>\n\n<p>{'<MyComponent />, '}</p>\n\n<p>{\" document.getElementById('root')\"}</p> \n </code>\n\n    <p>The <b>{'<MyComponent /> '}</b> syntax creates an instance of the MyComponent component and renders it to the DOM.</p>\n\n\n    </div>\n     )}\n      {language === 'ru' && (\n        <div>\n          <RuReact_2 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmReact_2 />\n        </div>\n      )} \n\n    </div>\n  )\n}\n\nexport default React_2;","/home/artashes/Desktop/codeex/codeex/src/pages/React_3.js",["1035","1036","1037","1038"],[],"import React,{useState} from 'react';\nimport RuReact_3 from '../lang/RuReact_3';\nimport AmReact_3 from '../lang/AmReact_3';\n\nfunction React_3() {\n \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n   const handleEnglishClick = () => {\n     setLanguage('en');\n   };\n \n   const handleRussianClick = () => {\n     setLanguage('ru');\n   };\n \n   const handleArmenianClick = () => {\n     setLanguage('am');\n   };\n \n  \n  return (\n    <div className='java-script'>\n      \n       <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n {language === 'en' && (\n        <div>\n      \n        \n        <h1 >React Events</h1>\n\n    <p>React provides a way to handle events in components, similar to handling events in vanilla JavaScript. In React, you can add event handlers to any JSX element using the on<b>[EventName] </b>syntax</p>\n\n    <p>For example, let's say we have a button in a React component that we want to handle a click event for:</p>\n\n    <code>\n      <p>{'function MyButton(props) { '}</p>\n\n    <p>{'function handleClick() {'}</p>\n\n    <p>{\" console.log('Button clicked'); \"}</p>\n\n    <p>{' }'}</p>\n\n    <p>{'return ( '}</p>\n\n    <p>{'<button onClick={handleClick}>Click me</button>  '}</p>\n\n    <p>{');'}</p>\n\n    <p>{'} '}</p>\n    </code>\n\n    <p>In this example, we define a <b>MyButton</b> component that contains a button element with a <b>onClick</b> prop set to a function called <b>handleClick</b>. When the button is clicked, the <b>handleClick</b> function will be called, and the message \"Button clicked\" will be logged to the console.</p>\n\n    <p>You can also pass arguments to the event handler function using arrow functions. For example, let's say we have a list of items that we want to render as buttons:</p>\n\n    <code>\n     <p>{'function ItemList(props) { '}</p>\n\n    <p>{'const items = props.items; '}</p>\n\n    <p>{'function handleClick(item) { '}</p>\n\n    <p>{' console.log(`Item ${item.id} clicked`); '}</p>\n\n    <p>{' } '}</p>\n\n    <p>{'const buttonList = items.map((item) => '}</p>\n\n    <p>{'<button key={item.id} onClick={() => handleClick(item)}> '}</p>\n\n    <p>{'{item.name} '}</p>\n\n    <p>{'</button> '}</p>\n\n    <p>{' ); '}</p>\n\n    <p>{'return ( '}</p>\n\n    <p>{'<div> '}</p>\n\n    <p>{'{buttonList} '}</p>\n\n    <p>{'</div> '}</p>\n\n    <p>{'); '}</p>\n\n    <p>{'} '}</p>\n \n    </code>\n    <p>In this example, we define an <b>ItemList</b> component that takes in a <b>items</b> prop. We define a <b>handleClick</b> function that takes in an <b>item</b> argument, which will be used to log a message to the console when the corresponding button is clicked.</p>\n\n    <p>We use the <b>map</b> method to create a new array of <b>{'<button>'}</b> elements, where each element corresponds to an item in the <b>items</b> prop. We set the <b>key</b> prop of each <b>{'<button> '}</b> element to the <b>id</b> of the corresponding item, which is a requirement in React to help it optimize updates. We also use an arrow function to pass the <b>item</b> object to the <b>handleClick</b> function when the button is clicked.</p>\n\n    <p>Then we return a <b>{'<div>'}</b> element that contains the <b>buttonList</b> array.</p>\n\n    <h5>React Events</h5>\n\n    <p>onKeyDown</p>\n\n    <p>onKeyPress </p>\n\n    <p>onKeyUp</p>\n\n    <p>onFocus</p>\n\n    <p>onBlur</p>\n\n    <p>onChange</p>\n\n    <p>onInput</p>\n\n    <p>onInvalid </p>\n\n    <p>onSubmit</p>\n\n    <p>onClick</p>\n\n    <p>onContextMenu</p>\n\n    <p>onDoubleClick</p>\n\n    <p>onDrag</p>\n\n    <p>onDragEnd</p>\n\n    <p>onDragEnter</p>\n\n    <p>onDragExit</p>\n\n    <p>onDragLeave</p>\n\n    <p> <a href=\"https://react.dev/reference/react-dom/components/common#react-event-object\" target='_blank' > 👉🏼 React https://react.dev/reference/react-dom/components/common#react-event-object</a> </p>\n\n\n    <b>React state in class components</b>\n\n    <p>In React, state can also be managed using class components. Class components are JavaScript classes that extend the <b>React.Component</b> class and implement a <b>render</b> method that returns the component's UI.</p>\n\n    <p>Here's an example of a class component that manages state:</p>\n\n    \n    <code>\n    <p>{\"import React, { Component } from 'react';\"}</p>\n\n    <p>{'class Counter extends Component { '}</p>\n    \n    <p>{'constructor(props) {'}</p>\n\n    <p>{'super(props);'}</p>\n\n    <p>{'this.state = { count: 0 };'}</p>\n\n    <p>{'this.handleClick = this.handleClick.bind(this);'}</p>\n\n    <p>{'}'}</p>\n\n    <p>{'handleClick() { '}</p>\n\n    <p>{'this.setState({ count: this.state.count + 1 }); '}</p>\n\n    <p>{'}'}</p>\n\n    <p>{' render() {'}</p>\n\n    <p>{'return ('}</p>\n\n    <p>{'<div>'}</p>\n\n    <p>{'<p>You clicked {this.state.count} times</p>'}</p>\n\n    <p>{'<button onClick={this.handleClick}>Click me</button>'}</p>\n\n    <p>{' </div>'}</p>\n\n    <p>{');'}</p>\n\n    <p>{'}'}</p>\n\n    <p>{'}'}</p>\n</code>\n\n<p>In this example, we define a <b>Counter</b> class that extends <b>React.Component</b>. Inside the class, we define a constructor that sets the initial state of the component to an object with a <b>count</b> property of 0. We also bind the <b>handleClick</b> method to the component instance using <b>bind</b>.</p>\n\n<p>The <b>handleClick</b> method updates the component's state by calling this.setState with a new object that has a <b>count</b> property incremented by 1.</p>\n\n<p>The <b>render</b> method returns the component's UI, which includes a <b>{'<p>'}</b> element that displays the current value of <b>count</b>, and a button that calls <b>handleClick</b> when clicked.</p>\n\n<p>Like with functional components, it's important to never modify the state directly. Instead, always use <b>this.setState</b> to update the state.</p>\n\n<p>While class components are still supported in React, functional components are generally preferred, especially with the introduction of hooks. However, understanding class components is still important for maintaining and updating older codebases.</p>\n\n<b>React lifecycle</b>\n\n<p>In React, components have a lifecycle that describes the different stages they go through during their existence. Understanding the React lifecycle is essential for building and maintaining robust React applications.</p>\n\n<p>Here's a brief overview of the React component lifecycle methods, grouped by phase:</p>\n\n<h4>Mounting phase:</h4>\n\n<p><b>{'constructor()'}</b>: Called when the component is initialized.</p>\n\n<p><b>{'static getDerivedStateFromProps()'}</b>: Called when the component is initialized, and again when it receives new props. Rarely used.</p>\n\n<p><b>{'render() '}</b>: Called whenever the component needs to be rendered.</p>\n\n<p><b>{'componentDidMount()'}</b>: Called after the component has been rendered for the first time.</p>\n\n<h4>Updating phase:</h4>\n\n<p><b>{'static getDerivedStateFromProps()'}</b>: Called when the component receives new props.</p>\n\n<p><b>{'shouldComponentUpdate()'}</b>: Called before the component re-renders. Allows you to cancel the update.</p>\n\n<p><b>{'render()'}</b>: Called whenever the component needs to be rendered.</p>\n\n<p><b>{'getSnapshotBeforeUpdate()'}</b>: Called before the component updates. Rarely used.</p>\n\n<p><b>{'componentDidUpdate()'}</b>: Called after the component has been updated.</p>\n\n<h4>Unmounting phase:</h4>\n\n<p><b>{'componentWillUnmount()'}</b>: Called when the component is about to be removed from the DOM.</p>\n\n<p>Here's an example that demonstrates the lifecycle methods:</p>\n\n<code>\n  <b>{\"import React, { Component } from 'react';\"}</b>\n  \n  <p>{'class LifecycleDemo extends Component {'}</p>\n\n  <p>{'constructor(props) {'}</p>\n\n  <p>{'super(props);'}</p>  \n\n  <p>{'this.state = { count: 0 };'}</p>\n\n  <p>{\"console.log('constructor');\"}</p>\n\n  <p>{'}'}</p>\n\n  <p>{'static getDerivedStateFromProps(props, state) {'}</p>\n\n  <p>{\"console.log('getDerivedStateFromProps');\"}</p>\n\n  <p>{'return null;'}</p>\n\n  <p>{'}'}</p>\n\n  <p>{'componentDidMount() {'}</p>\n\n  <p>{\"console.log('componentDidMount'); \"}</p>\n\n  <p>{'}'}</p>\n\n  <p>{' shouldComponentUpdate(nextProps, nextState) {'}</p>\n\n  <p>{\" console.log('shouldComponentUpdate');\"}</p>\n\n  <p>{'return true;'}</p>\n\n  <p>{' }'}</p>\n\n  <p>{'getSnapshotBeforeUpdate(prevProps, prevState) {'}</p>\n\n  <p>{\" console.log('getSnapshotBeforeUpdate'); \"}</p>\n\n  <p>{'return null;'}</p>\n\n  <p>{'}'}</p>\n\n  <p>{'componentDidUpdate(prevProps, prevState, snapshot) {'}</p>\n\n  <p>{\"console.log('componentDidUpdate'); \"}</p>\n\n  <p>{'}'}</p>\n\n  <p>{'componentWillUnmount() { '}</p>\n\n  <p>{\"console.log('componentWillUnmount'); \"}</p>\n\n  <p>{'}'}</p>\n\n  <p>{' handleClick = () => {'}</p>\n\n  <p>{' this.setState({ count: this.state.count + 1 });'}</p>\n\n  <p>{'}; '}</p>\n\n  <p>{'render() { '}</p>\n\n  <p>{\"console.log('render');\"}</p>\n\n  <p>{'return ('}</p>\n\n  <p>{'<div>'}</p>\n\n  <p>{' <p>You clicked {this.state.count} times</p>'}</p>\n\n  <p>{'<button onClick={this.handleClick}>Click me</button>'}</p>\n  \n  <p>{'</div>'}</p>\n\n  <p>{');'}</p>\n\n  <p>{'}'}</p>\n\n  <p>{'}'}</p>\n\n</code>\n\n<p>In this example, we define a <b>LifecycleDemo</b> class that logs messages to the console during each phase of the component's lifecycle. We also define a <b>handleClick</b> method that updates the component's state.</p>\n\n<p>When the component is mounted for the first time, the following methods are called, in order: <b>constructor, getDerivedStateFromProps, render, and componentDidMount</b> . Whenever the component's state changes, the <b>shouldComponentUpdate, render, and componentDidUpdate </b> methods are called, in that order.</p>\n\n<p>When the component is unmounted, the <b>componentWillUnmount</b> method is called.</p>\n\n<p>It's important to understand the React component lifecycle so you can optimize your components and avoid common pitfalls like memory leaks and infinite loops. But don't worry if it seems overwhelming at first – with practice, you'll become more comfortable with it.</p>\n\n</div>\n     )}\n      {language === 'ru' && (\n        <div>\n          <RuReact_3 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmReact_3 />\n        </div>\n      )} \n\n\n    </div>\n  )\n}\n\nexport default React_3;","/home/artashes/Desktop/codeex/codeex/src/pages/React_4.js",["1039","1040"],[],"import React, {useState} from 'react';\nimport RuReact_4 from '../lang/RuReact_4';\nimport AmReact_4 from '../lang/AmReact_4';\n\nfunction React_4() {\n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  return (\n    \n    <div className='java-script'>\n      <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n {language === 'en' && (\n        <div>\n  \n      \n      <h1>Fetch Data In React</h1>\n\n      <p>1. Fetch data using the fetch API:</p>\n\n      <code>\n        \n        <p>{\" fetch('https://api.example.com/data') \"}</p>\n\n        <p>{'.then(response => response.json())'}</p>\n\n        <p>{'.then(data => console.log(data))'}</p>\n\n        <p>{'.catch(error => console.error(error))'}</p>\n\n      </code>\n    \n    <p>In this example, we're making a request to a server using the <b>fetch</b> API. The <b>response</b> object is converted to JSON format using the <b>json()</b> method, and the resulting data is logged to the console. If an error occurs, it is caught and logged to the console.</p>\n    \n\n    <p>2. Display fetched data in the component's state:</p>\n\n<code>\n\n    <p><b>{\"import React, { useState, useEffect } from 'react'; \"}</b></p>\n\n    <p>{'function MyComponent() { '}</p>\n\n    <p>{'const [data, setData] = useState([]); '}</p>\n\n    <p>{'useEffect(() => { '}</p>\n\n    <p>{\"fetch('https://api.example.com/data') \"}</p>\n\n    <p>{'.then(response => response.json()) '}</p>\n\n    <p>{'.then(data => setData(data))'}</p>\n\n    <p>{'.catch(error => console.error(error));'}</p>\n\n    <p>{'}, []);'}</p>\n\n    <p>{'return ( '}</p>\n\n    <p>{'<div>'}</p>\n\n    <p>{'{data.map(item => ('}</p>\n\n    <p>{'<p key={item.id}>{item.name}</p> '}</p>\n\n    <p>{'))} '}</p>\n\n    <p>{'</div> '}</p>\n\n    <p>{'); '}</p>\n\n    <p>{'}'}</p>\n    \n</code>    \n\n\n<p>In this example, we're using the <b>useState</b> hook to define a state variable called <b>data</b>. We're also using the <b>useEffect</b> hook to fetch data from the server when the component mounts, and update the state variable <b>data</b> with the fetched data. Finally, we're using the <b>map</b> method to loop through the data array and display each item as a paragraph element.</p>\n    \n    \n  <h1>Axios</h1>\n\n  <p>Both Fetch and Axios are JavaScript libraries used for making HTTP requests from the browser or Node.js environment. However, there are some differences between the two.</p>\n\n\n  <p>Fetch is a built-in browser API that uses promises to handle requests and responses. It has a simpler syntax and is easier to use for simple requests, but it lacks some advanced features like request cancellation, progress events, and automatic request retries.</p>  \n    \n  <p>Axios is a popular third-party library that provides a more feature-rich and powerful API for making HTTP requests. It supports request cancellation, progress events, and automatic retries out of the box, and also has a built-in support for handling response data like JSON, XML, and FormData.</p>\n\n  <p>In terms of why it's better to use Axios over Fetch, it really depends on the specific needs of your project. If you're building a simple web application that only needs to make basic requests, then Fetch might be sufficient. However, if you need more advanced features and a more powerful API for handling requests and responses, then Axios is a better choice.</p>  \n\n  <p>Some benefits of using Axios over Fetch include:</p>\n\n  <p>1. Better error handling: Axios has a more robust system for handling errors and provides more helpful error messages compared to Fetch.</p>  \n    \n  <p>2. Interceptors: Axios provides interceptors that allow you to modify requests or responses before they are sent or received.</p>  \n    \n  <p>3. Automatic transformation of request and response data: Axios can automatically transform request and response data into different formats, like JSON, which can be very helpful when working with APIs.</p>  \n    \n  <p>4. Easy cancellation of requests: Axios provides a simple way to cancel requests, which can be useful when dealing with slow or unreliable networks.</p>  \n    \n  <p>In summary, both Fetch and Axios are useful tools for making HTTP requests in JavaScript, but Axios provides more advanced features and a more powerful API that can be very helpful for building more complex applications.</p>  \n    \n  <p><b>Axios</b> is a library for making HTTP requests from the browser or Node.js. It makes it easy to send requests using promises and handle responses.</p> \n\n  <p>To use Axios in React.js, you first need to install it using the command:</p>\n\n  <b>npm install axios</b>\n\n  <p>After that, you can use Axios in your React components. For example, the following code sends a GET request to a remote server and displays the response on the page:</p> \n   \n\n  <code>\n  \n  <p>{'import React, { useState, useEffect } from \"react\";'}</p>  \n\n  <p>{'import axios from \"axios\"; '}</p>\n\n  <p>{'function App() { '}</p>  \n\n  <p>{'const [data, setData] = useState(\"\");'}</p>\n\n  <p>{'useEffect(() => { '}</p>\n\n  <p>{'axios.get(\" https://jsonplaceholder. typicode.com/todos/1 \"). then((response) => { '}</p>\n\n  <p>{'setData(response.data); '}</p>\n\n  <p>{'}); '}</p>\n\n  <p>{' }, []);'}</p>\n\n  <p>{' return <div>{data.title}</div>;'}</p>\n\n  <p>{'}'}</p>\n\n  <p>{'export default App; '}</p>\n   \n  </code> \n    \n  <p>In this example, the <b>useEffect</b> hook is used to send a GET request to the server and update the <b>data</b> state variable with the response. The data variable is then displayed on the page using JSX.</p>  \n    \n  <p>Axios also supports other HTTP methods, such as POST, PUT, and DELETE, which can be used to send data to the server and modify resources. The axios object also provides many configuration options, such as setting headers, timeouts, and request interceptors, which allow you to customize the behavior of the requests.</p>  \n\n  <p>Overall, Axios is a powerful and flexible library for working with HTTP requests in React.js, and it can simplify many common tasks, such as fetching data from a remote API.</p>\n\n  <p>The HTTP protocol supports several request methods that allow performing various operations with data. Here is a brief description of the four main request methods along with examples of using them in React:</p>\n    \n  <p>1. <b>GET</b>: a request method used for retrieving data from the server. In React, you can use the <b>axios.get</b> method</p>  \n    \n  <code>\n  \n  <p>{\" axios.get('/api/data')\"}</p>\n\n  <p>{'.then(response => { '}</p>\n\n  <p>{'console.log(response.data); '}</p>\n\n  <p>{'})'}</p>\n\n  <p>{'.catch(error => {' }</p>\n\n  <p>{'console.log(error);'}</p>\n  \n  <p>{'});'}</p>  \n    \n  </code> \n\n  <p>In this example, we are retrieving data from the <b>/api/data</b> endpoint. The response data is logged to the console if the request is successful, and any errors are caught and logged to the console.</p>\n    \n  <p>2. <b>PUT</b>: a request method used for updating existing data on the server. In React, you can use the <b>axios.put</b> method:</p>  \n\n  <code>\n  \n  <p>{\"axios.put('/api/data/1', { newData: 'updatedData' })\"}</p>\n\n  <p>{ '.then(response => {' }</p>\n\n  <p>{'console.log(response.data);'}</p>  \n\n  <p>{'})'}</p>\n\n  <p>{'.catch(error => {'}</p>\n\n  <p>{'console.log(error);'}</p>\n\n  <p>{'});'}</p>\n\n  </code>\n\n  <p>In this example, we are updating data at the <b>/api/data/1</b> endpoint. We are sending a payload with the new data as the second argument to <b>axios.put</b>. The response data is logged to the console if the request is successful, and any errors are caught and logged to the console.</p>    \n    \n  <p>3. <b>POST </b>: a request method used for creating new data on the server. In React, you can use the <b>axios.post</b> method</p>  \n    \n  <code>\n  \n  <p>{\"axios.post('/api/data', { newData: 'newData' })\"}</p>\n\n  <p>{'.then(response => {'}</p>\n\n  <p>{'console.log(response.data);'}</p>\n\n  <p>{'})'}</p>  \n\n  <p>{'.catch(error => {'}</p>\n\n  <p>{' console.log(error);'}</p> \n\n  <p>{'});'}</p> \n    \n  </code>  \n\n  <p>In this example, we are creating new data at the <b>/api/data</b> endpoint. We are sending a payload with the new data as the second argument to <b>axios.post</b>. The response data is logged to the console if the request is successful, and any errors are caught and logged to the console.</p>\n    \n  <p>4. <b>DELETE </b>: a request method used for deleting existing data on the server. In React, you can use the <b>axios.delete</b> method:</p>  \n    \n   <code>\n    <p>{\" axios.delete('/api/data/1') \"}</p>\n\n    <p>{'.then(response => { '}</p>\n\n    <p>{'console.log(response.data); '}</p>\n\n    <p>{'}) '}</p>\n\n    <p>{'.catch(error => { '}</p>\n\n    <p>{'console.log(error);'}</p>\n\n    <p>{'});'}</p>\n    \n    </code> \n\n    <p>In this example, we are deleting data at the <b>/api/data/1</b> endpoint. The response data is logged to the console if the request is successful, and any errors are caught and logged to the console</p>\n\n   <p> For more information on Axios, please visit their official website: <a href=\" https://axios-http.com\" target='_blank' > 👉🏼  https://axios-http.com</a></p>\n\n   </div>\n     )}\n      {language === 'ru' && (\n        <div>\n          <RuReact_4 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmReact_4 />\n        </div>\n      )} \n\n\n    \n    </div>\n  )\n}\n\nexport default React_4;","/home/artashes/Desktop/codeex/codeex/src/pages/React_5.js",["1041","1042","1043"],[],"import React,{ useState } from 'react';\nimport RuReact_5 from '../lang/RuReact_5';\nimport AmReact_5 from '../lang/AmReact_5';\n\nfunction React_5() {\n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  return (\n    <div className='java-script'>\n       <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n {language === 'en' && (\n        <div>\n      \n      <h1>Ract Router DOM</h1>\n\n<p>React Router Dom is a popular library used in React applications for managing client-side routing. It allows developers to create different routes for different components and render them based on the current URL. This provides a more intuitive and seamless user experience, as users can navigate through different pages and components without having to reload the entire page.</p>\n\n<p>React Router Dom is based on the React Router library and specifically designed for use in the browser. It uses the browser's History API to manipulate the URL and keep the user interface in sync with the current URL. It also provides a declarative approach to defining routes, making it easy to manage complex applications with multiple routes and nested components.</p>\n\n<p>Some of the key features of React Router Dom include:</p>\n\n<p> • Declarative routing: You can define your routes as JSX components, making it easy to understand and manage the routing logic.</p>\n\n<p> • Nested routes: You can nest routes within other routes, allowing for more complex routing scenarios</p>\n\n<p> • Route parameters: You can define dynamic parameters within your routes, allowing you to pass data between components based on the current URL.</p>\n\n<p> • History management: React Router Dom provides tools for managing the browser's history, allowing you to programmatically navigate between pages and handle back/forward navigation. </p>\n \n<p>Here's a simple example of how React Router Dom might be used in a React application: <b>(old version)v5</b></p>\n\n<code>\n  <p>{\"import React from 'react'; \"}</p>\n\n  <p>{\"import { BrowserRouter as Router, Route, Link } from 'react-router-dom'; \"}</p>\n\n  <p>{'const Home = () => <h1>Home</h1>; '}</p>\n\n  <p>{'const About = () => <h1>About</h1>; '}</p>\n\n  <p>{'const App = () => ( '}</p>\n\n  <p>{'<Router>'}</p>\n\n  <p>{'<nav>'}</p>\n\n  <p>{'<ul>'}</p>\n\n  <p>{'<li>'}</p>\n\n  <p>{'<Link to=\"/\">Home</Link> '}</p>\n\n  <p>{'</li> '}</p>\n\n  <p>{'<li>'}</p>\n\n  <p>{'<Link to=\"/about\">About</Link>'}</p>\n\n  <p>{'</li> '}</p>\n\n  <p>{'</ul>'}</p>\n\n  <p>{'</nav>'}</p>\n\n  <p>{'<Route exact path=\"/\" component={Home} />'}</p>\n\n  <p>{'<Route path=\"/about\" component={About} />'}</p>\n\n  <p>{'</Router>'}</p>\n\n  <p>{');'}</p>\n\n  <p>{'export default App;'}</p>\n</code>\n\n<p>In this example, we're importing the necessary components from React Router Dom (specifically, <b>BrowserRouter, Route, and Link</b>). We then define two simple components for our home and about pages.</p>\n\n<p>Inside the <b>App</b> component, we wrap everything in a <b>Router</b> component, which provides the routing context for the rest of the application. We then define a simple navigation bar using the <b>Link</b> component to navigate between our two pages.</p>\n\n<p>Finally, we define two <b>Route</b> components that render the <b>Home and About</b> components based on the current URL.</p>\n\n<p>React Router Dom 6.4 is the latest version of the library, released in February 2022. Some of the new features in this version include:</p>\n\n<p>The latest version (v6) has changes to some APIs and collections, so I can pick a new example using React Router Dom version 6.4:</p>\n\n<p>here's an example using React Router Dom version 6.4:</p>\n\n\n<code>\n  <p>{\"import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom'; \"}</p>\n\n  <p>{'const Home = () => <h1>Home</h1>; '}</p>\n\n  <p>{'const About = () => <h1>About</h1>;'}</p>\n\n  <p>{'const NotFound = () => <h1>404 Not Found</h1>;'}</p>\n\n  <p>{'const App = () => ( '}</p>\n\n  <p>{'<Router> '}</p>\n\n  <p>{'<nav>'}</p>\n\n  <p>{'<ul> '}</p>\n\n  <p>{'<li>'}</p>\n\n  <p>{'<Link to=\"/\">Home</Link> '}</p>\n\n  <p>{'</li> '}</p>\n\n  <p>{'<li>'}</p>\n\n  <p>{'<Link to=\"/about\">About</Link>'}</p>\n\n  <p>{'</li>'}</p>\n\n  <p>{'</ul>'}</p>\n\n  <p>{'</nav>'}</p>\n\n  <p>{'<Routes>'}</p>\n\n  <p>{' <Route path=\"/\" element={<Home />} />'}</p>\n\n  <p>{'<Route path=\"/about\" element={<About />} />'}</p>\n\n  <p>{'<Route path=\"*\" element={<NotFound />} />'}</p>\n\n  <p>{'</Routes>'}</p>\n\n  <p>{'</Router>'}</p>\n\n  <p>{');'}</p>\n\n  <p>{'export default App;'}</p>\n\n</code>\n\n<p>In this example, we use the same core components from React Router Dom (<b>such as BrowserRouter, Route, Link</b>), but some of them have a slightly different syntax.</p>\n\n<p>For example, we now use the <b>Routes</b> component instead of <b>Switch</b> to group multiple routes. Each route is now represented by a <b>Route</b> element with <b>path and element</b> props. The <b>path</b> prop sets the URL pattern for the route, and the <b>element</b> prop is the component to be rendered when the route matches.</p>\n\n<p>In this example, we also added a <b>NotFound</b> component that displays when the user lands on a non-existent page.</p>\n\n<p>Overall, React Router Dom 6 provides a more flexible and convenient way to handle routing in React applications.</p>    \n    \n<p>1. If you're using <b>npm</b>, open your terminal and run the following command:</p>\n\n<b>npm install react-router-dom</b>\n\n<p>2. If you're using <b>yarn</b>, open your terminal and run the following command:</p>\n\n<b>yarn add react-router-dom</b> \n\n<p>After installation, you can import the necessary components from the <b>react-router-dom</b> package, as I showed in the examples above</p>\n\n<p> For more information on React Router, please visit their official website: <a href=\"https://reactrouter.com/\" target='_blank' > 👉🏼  https://reactrouter.com/.</a></p>    \n    \n<p>On the website, you'll find a comprehensive guide to using React Router, including:</p>    \n    \n<p>•  An overview of React Router and its key concepts</p> \n\n<p>• Installation and setup instructions</p>\n\n<p>• Examples of different use cases and scenarios</p>\n\n<p>• API documentation for each of the core components and utilities</p>\n\n<p>• Advanced topics such as server rendering, code splitting, and nested routes</p>\n\n<p>In addition to the documentation, you can also find a number of helpful resources such as a community forum, a GitHub repository for bug reports and feature requests, and a collection of related projects and plugins.</p>\n\n</div>\n     )}\n      {language === 'ru' && (\n        <div>\n          <RuReact_5 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmReact_5 />\n        </div>\n      )} \n\n\n\n    </div>\n  )\n}\n\nexport default React_5;","/home/artashes/Desktop/codeex/codeex/src/pages/React_6.js",["1044","1045","1046"],[],"import React,{ useState } from 'react';\nimport RuReact_6 from '../lang/RuReact_6';\nimport AmReact_6 from '../lang/AmReact_6';\n\nfunction React_6() {\n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n\n  return (\n    <div className='java-script'>\n\n      <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n {language === 'en' && (\n        <div> \n     \n      <h1>Ract Refs</h1>\n\n    <p>In React, a <b>ref</b> is a way to access the underlying DOM node or React component instance of a rendered element. You can use refs to get access to certain properties or methods of a component, or to modify its behavior.</p>\n\n    <p>Here's an example of how to create a ref in React:</p>\n\n    <code>\n     <p>{\" import React, { useRef } from 'react'; \"}</p>\n\n     <p>{'function TextInput() {'}</p>\n\n     <p>{'const inputRef = useRef(null);'}</p> \n\n     <p>{'const handleClick = () => {'}</p>\n\n     <p>{'inputRef.current.focus(); '}</p>\n\n     <p>{' };'}</p>\n\n     <p>{'return ('}</p>\n\n     <p>{'<div>'}</p>\n\n     <p>{' <input type=\"text\" ref={inputRef} />'}</p>\n\n     <p>{'<button onClick={handleClick}>Focus Input</button>'}</p>\n\n     <p>{'</div>'}</p>\n\n     <p>{' );'}</p>\n\n     <p>{'}'}</p>\n    </code>\n\n    <p>In this example, we create a <b>ref</b> using the <b>useRef</b> hook. We then pass the <b>ref</b> to the <b>input</b> element using the <b>ref</b> prop.</p>\n\n    <p>We also create a <b>handleClick</b> function that uses the <b>current</b> property of the <b>ref</b> to call the <b>focus</b> method on the <b>input</b> element. This allows us to set focus to the input when the user clicks the \"Focus Input\" button.</p>\n\n     <p>Overall, using <b>refs</b> can be a powerful tool for accessing and manipulating components in React. However, it's important to use them sparingly and avoid relying too heavily on imperative code, as this can make your code harder to reason about and maintain.</p>\n\n    <b>Event Emitter</b>\n\n<p>An event emitter is a design pattern that allows objects in a program to communicate with each other by triggering and handling events. In simple terms, an event emitter is a mechanism for broadcasting and receiving messages within a program.</p>\n\n<p>In JavaScript, the EventEmitter class is a built-in module that provides a way to implement this pattern. Here's an example of how to use EventEmitter in Node.js:</p>\n\n<code>\n  <p>{\"const EventEmitter = require('events');\"}</p>\n\n  <p>{\"class MyEmitter extends EventEmitter {}\"}</p>\n\n  <p>{\"const myEmitter = new MyEmitter();\"}</p>\n\n  <p>{\"myEmitter.on('event', (arg) => {\"}</p>\n\n  <p>{\"console.log('Event triggered with argument:', arg);\"}</p>\n\n  <p>{\"});\"}</p>\n\n  <p>{\"myEmitter.emit('event', 'Hello, world!');\"}</p>\n</code>\n\n<p>In this example, we create a custom <b>MyEmitter</b> class that extends the <b>EventEmitter</b> class. We then create an instance of this class and define a listener for the <b>event</b> event using the <b>on</b> method. Finally, we emit the <b>event</b> event and pass a string argument, which triggers the listener and logs the argument to the console.</p>\n\n<p>Overall, using an event emitter can be a useful way to implement a pub-sub pattern in your code, where different parts of your program can communicate with each other without having to be tightly coupled together. However, it's important to use this pattern judiciously and not rely too heavily on events, as this can make your code harder to understand and debug.</p>\n\n<p><b>In React</b>, you can use an event emitter pattern to communicate between different components in your application. This can be useful for passing data or triggering actions between components that are not directly related to each other.</p>\n\n<p>One way to implement an event emitter pattern in React is to use a third-party library such as <b>eventemitter3 or mitt</b>. These libraries provide a simple API for creating and subscribing to events, and can be used with both class components and functional components with hooks.</p>\n\n<p>Here's an example of how to use <b>eventemitter3</b> in a React component:</p>\n\n<code>\n\n<p>{\"import React, { useEffect } from 'react'; \"}</p>\n\n<p>{\"import EventEmitter from 'eventemitter3'; \"}</p>\n\n<p>{\" const emitter = new EventEmitter(); \"}</p>\n\n<p>{\"function ComponentA() {\"}</p>\n\n<p>{\" useEffect(() => { \"}</p>\n\n<p>{\"emitter.emit('eventA', { data: 'Hello from ComponentA' });\"}</p>\n\n<p>{\"}, []);\"}</p>\n\n<p>{\"return <div>ComponentA</div>; \"}</p>\n\n<p>{\"} \"}</p>\n\n<p>{\"function ComponentB() {\"}</p>\n\n<p>{\"useEffect(() => {\"}</p>\n\n<p>{\"emitter.on('eventA', handleEventA);  \"}</p>\n\n<p>{\"return () => emitter.off('eventA', handleEventA);\"}</p>\n\n<p>{\" }, []);\"}</p>\n\n<p>{\"const handleEventA = (payload) => {\"}</p>\n\n<p>{\"console.log('Received eventA:', payload.data); \"}</p>\n\n<p>{\" }; \"}</p>\n\n<p>{\"return <div>ComponentB</div>; \"}</p>\n\n<p>{\"}\"}</p>\n\n</code>\n\n<p>In this example, we create an instance of <b>EventEmitter called emitter</b>. In <b>ComponentA</b>, we use the <b>useEffect</b> hook to emit an event called <b>eventA</b> with some data. In <b>ComponentB</b>, we use the <b>useEffect</b> hook to subscribe to the <b>eventA</b> event, and define a callback function called <b>handleEventA</b> that logs the data to the console.</p>\n\n<p>When ComponentA is mounted, it emits the eventA event with some data. When ComponentB is mounted, it subscribes to the eventA event and starts listening for any events with that name. When eventA is emitted, handleEventA is called with the data, and it logs the message to the console.</p>\n\n<p>Overall, using an event emitter pattern in React can be a useful way to implement communication between components that are not directly related to each other. However, it's important to use this pattern judiciously and not rely too heavily on events, as this can make your code harder to understand and debug.</p>\n\n<h4>React Animation</h4>\n\n<p>In React, you can add animations to your components using a variety of techniques. Animations can make your UI more engaging and provide visual feedback to the user when things change.</p>\n\n<p>One popular way to implement animations in React is to use CSS transitions or animations. You can add CSS classes to your components to trigger these animations, and use React's <b>className</b> prop to toggle the classes based on the component's state.</p>\n\n<p>Here's an example of how to use CSS transitions to animate a button when it's clicked:</p>\n\n<code>\n<p>{\"import React, { useState } from 'react';\"}</p> \n\n<p>{\" import './Button.css'; \"}</p>\n\n<p>{\"function Button() {\"}</p>\n\n<p>{\" const [isClicked, setIsClicked] = useState(false); \"}</p>\n\n<p>{\"const handleClick = () => { \"}</p>\n\n<p>{\" setIsClicked(true); \"}</p>\n\n<p>{\" setTimeout(() => setIsClicked(false), 1000); \"}</p>\n\n<p>{\" }; \"}</p>\n\n<p>{\"return (  \"}</p>\n\n<p>{\" <button className={`button ${isClicked ? 'clicked' : ''}`} onClick={handleClick}> \"}</p>\n\n<p>{\"Click me!  \"}</p>\n\n<p>{\"</button>  \"}</p>\n\n<p>{\"); \"}</p>\n\n<p>{\" }\"}</p>\n\n</code>\n\n<p>In this example, we define a component called <b>Button</b> that uses the <b>useState</b> hook to keep track of whether the button has been clicked or not. When the button is clicked, we set the <b>isClicked</b> state to <b>true</b>, which adds the <b>clicked</b> class to the button. We then use <b>setTimeout</b> to remove the <b>clicked</b> class after 1 second, which triggers the transition back to the original state.</p>\n\n<p>We also define a CSS file called <b>Button.css</b> that defines the styles for the button and the clicked <b>class</b>:</p>\n\n<code>\n  <p>{'.button {'}</p>\n\n  <p>{'background-color: blue;'}</p>\n\n  <p>{'color: white;'}</p>\n\n  <p>{'padding: 10px 20px;'}</p>\n\n  <p>{'border: none;'}</p>\n\n  <p>{'border-radius: 5px;'}</p>\n\n  <p>{'transition: background-color 0.5s;'}</p>\n\n  <p>{'}'}</p>\n\n  <p>{'.clicked {'}</p>\n\n  <p>{'background-color: red;'}</p>\n\n  <p>{'}'}</p>\n\n</code>\n\n<p>In this CSS file, we define the styles for the button and specify a <b>transition</b> property on the <b>button</b> class to animate changes to the <b>background-color</b> property. We also define the <b>clicked</b> class, which changes the <b>background-color</b> to red when applied.</p>\n\n<p>Another way to implement animations in React is to use a third-party library such as <b>react-spring or framer-motion</b>. These libraries provide a more flexible API for creating complex animations and can be useful for more advanced use cases.</p>\n    \n<p><b>react-transition-group</b> is a third-party library for React that provides a way to easily add CSS transitions and animations to your components. It provides a set of components and APIs for managing the lifecycle of transitions, including mounting and unmounting elements, adding and removing classes, and delaying animations.</p>\n\n<b>{'npm install react-transition-group'}</b>\n\n<p>The core components in <b>react-transition-group are Transition, CSSTransition, and TransitionGroup</b>. Here's a brief overview of each component:</p>\n\n<p>• <b>Transition</b>: This component defines the basic lifecycle of a transition, including entering, entered, exiting, and exited states. You can use this component to trigger  </p>\n\n<p>• <b>CSSTransition</b>: This component extends the <b>Transition</b> component and adds support for CSS transitions and animations. You can specify CSS classes to apply to your component during the different stages of the transition, such as <b>enter, enter-active, exit, and exit-active</b>.</p>\n\n<p>• <b>TransitionGroup</b>: This component is used to manage a set of <b>Transition or CSSTransition</b> components. It tracks the mounting and unmounting of components and can apply different transition effects to each component. </p>\n\n<p>Here's an example of how to use <b>react-transition-group</b> to add a fade-in animation to a component when it's mounted:</p>\n\n\n<code>\n  <p>{\"import React, { useState } from 'react'; \"}</p>\n\n  <p>{\"import { CSSTransition } from 'react-transition-group'; \"}</p>\n\n  <p>{\"import './FadeIn.css'; \"}</p>\n\n  <p>{\"function FadeIn() { \"}</p>\n\n  <p>{\"const [isMounted, setIsMounted] = useState(false); \"}</p>\n\n  <p>{\"const handleMount = () => setIsMounted(true); \"}</p>\n\n  <p>{\"return ( \"}</p>\n\n  <p>{\"<> \"}</p>\n\n  <p>{\" <button onClick={handleMount}>Mount component</button> \"}</p>\n\n  <p>{'<CSSTransition in={isMounted} timeout={300} classNames=\"fade\"> '}</p>\n\n  <p>{' <div className=\"content\">Hello, world!</div> '}</p>\n\n  <p>{\"</CSSTransition> \"}</p>\n\n  <p>{\" </> \"}</p>\n\n  <p>{\"); \"}</p>\n\n  <p>{\"} \"}</p>\n\n</code>\n\n<p>In this example, we define a component called <b>FadeIn</b> that uses the <b>useState</b> hook to keep track of whether the component has been mounted or not. When the button is clicked, we set the <b>isMounted</b> state to <b>true</b>, which triggers the <b>CSSTransition</b> component to render the <b>content</b> div with a fade-in animation. We also define a CSS file called <b>FadeIn.css</b> that defines the styles and animation for the fade-in effect:</p>\n\n<code>\n  <p>{\" .fade-enter { \"}</p>\n\n  <p>{\"opacity: 0; \"}</p>\n\n  <p>{\"} \"}</p>\n\n  <p>{\".fade-enter-active { \"}</p>\n\n  <p>{\" opacity: 1; \"}</p>\n\n  <p>{\" transition: opacity 300ms ease-in; \"}</p>\n\n  <p>{\"} \"}</p>\n\n  <p>{\".fade-exit { \"}</p>\n\n  <p>{\"opacity: 1; \"}</p>\n\n  <p>{\"} \"}</p>\n\n  <p>{\".fade-exit-active { \"}</p>\n\n  <p>{\"opacity: 0; \"}</p>\n  \n  <p>{\"transition: opacity 300ms ease-out; \"}</p>\n\n  <p>{\"}\"}</p>\n\n</code>\n\n<p>In this CSS file, we define the classes for the different stages of the transition. When the component enters, it has an opacity of 0 (<b>fade-enter</b>) and transitions to an opacity of 1 over 300ms (<b>fade-enter-active</b>). When the component exits, it has an opacity of 1 (<b>fade-exit</b>) and transitions to an opacity of 0 over 300ms (<b>fade-exit-active</b>).</p>\n\n<p>Overall, adding animations to your React components can make your UI more engaging and provide visual feedback to the user. By using CSS transitions or animations, or a third-party library, you can easily add animations to your components and make them more dynamic.</p>    \n    \n</div>\n     )}\n      {language === 'ru' && (\n        <div>\n          <RuReact_6 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmReact_6 />\n        </div>\n      )} \n\n    </div>\n  )\n}\n\nexport default React_6;","/home/artashes/Desktop/codeex/codeex/src/pages/React_7.js",["1047","1048"],[],"import React,{ useState } from 'react';\nimport RuReact_7 from '../lang/RuReact_7';\nimport AmReact_7 from '../lang/AmReact_7';\n\nfunction React_7() {\n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  \n  return (\n    <div className='java-script'>\n\n  <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n {language === 'en' && (\n        <div> \n\n      <h1>Redux</h1>\n   \n   <p>Redux is a state management library for JavaScript applications. It helps manage the state of your application in a predictable way, making it easier to reason about the flow of data in your application. With Redux, you store your application state in a single object called the store, and you use actions and reducers to modify that state</p>\n   \n   <p>Here's how it works: When you want to change the state of your application, you dispatch an action. The action is a plain JavaScript object that describes what happened in your application. For example, you might dispatch an action to add a new item to a list, or to update a user's profile information.</p>\n   \n   <p>Reducers are functions that take the current state of your application and an action, and return a new state. Reducers are pure functions, which means they don't have any side effects and they always return the same output for a given input.</p>\n   \n   <p>React-Redux is a library that integrates Redux with React. It provides a way to connect your React components to the Redux store, so that you can access and modify the state of your application from your components. React-Redux provides two key components: Provider and connect.</p>\n   \n   <p>The Provider component is used to wrap your entire React application. It takes a store object as a prop, and makes that store available to all components in your application.</p>\n   \n   <p>1. Install the required packages:</p>\n\n   <b>npm install redux react-redux</b>\n\n   <p>2. Create a Redux store:</p>\n\n    <code>\n     \n      <p>{\"import { createStore } from 'redux';\"}</p>\n      \n      <p>{\"import rootReducer from './reducers';\"}</p>\n\n      <p>{\" const store = createStore(rootReducer); \"}</p>\n    \n    </code>\n\n    <p>3. Create Redux actions:</p>\n\n    <code>\n     \n     <p>{\"export const increment = () => {\"}</p>\n     \n     <p>{\" return { \"}</p>\n\n     <p>{\" type: 'INCREMENT' \"}</p>\n\n     <p>{\" } \"}</p>\n\n     <p>{\" } \"}</p>\n\n     <p>{\" export const decrement = () => { \"}</p>\n\n     <p>{\"  return { \"}</p>\n\n     <p>{\" type: 'DECREMENT' \"}</p>\n\n     <p>{\" } \"}</p>\n\n     <p>{\" } \"}</p>\n\n   </code>\n\n   <p>4. Create Redux reducers:</p>\n\n   <code>\n    \n    <p>{\"const counterReducer = (state = 0, action) => { \"}</p>\n\n    <p>{\"switch (action.type) { \"}</p>\n\n    <p>{\"case 'INCREMENT': \"}</p>\n\n    <p>{\" return state + 1; \"}</p>\n\n    <p>{\"case 'DECREMENT': \"}</p>\n\n    <p>{\"return state - 1; \"}</p>\n\n    <p>{\"default: \"}</p>\n\n    <p>{\"return state; \"}</p>\n\n    <p>{\" }\"}</p>\n\n    <p>{\"} \"}</p>\n\n    <p>{\"export default counterReducer;\"}</p>\n   \n   </code>\n\n   <p>5. Connect Redux to a React component using React-Redux's <b>connect</b> function:</p>\n\n   <code>\n    \n    <p>{\"import { connect } from 'react-redux'; \"}</p>\n\n    <p>{\" import { increment, decrement } from './actions'; \"}</p>\n\n    <p>{\"const Counter = (props) => { \"}</p>\n\n    <p>{\"return ( \"}</p>\n\n    <p>{\"<div> \"}</p>\n\n    <p>{\" <h1>{props.count}</h1> \"}</p>\n\n    <p>{\"<button onClick={props.increment}>+</button> \"}</p>\n\n    <p>{\"<button onClick={props.decrement}>-</button> \"}</p>\n\n    <p>{\"</div> \"}</p>\n\n    <p>{\"); \"}</p>\n\n    <p>{\"} \"}</p>\n\n    <p>{\"const mapStateToProps = (state) => {\"}</p>\n\n    <p>{\"return { \"}</p>\n\n    <p>{\" count: state.counter \"}</p>\n\n    <p>{\"} \"}</p>\n\n    <p>{\"} \"}</p>\n\n    <p>{\"const mapDispatchToProps = (dispatch) => { \"}</p>\n\n    <p>{\"return { \"}</p>\n\n    <p>{\"increment: () => dispatch(increment()), \"}</p>\n\n    <p>{\"decrement: () => dispatch(decrement()) \"}</p>\n\n    <p>{\" } \"}</p>\n\n    <p>{\"}\"}</p>\n\n    <p>{\"export default connect(mapStateToProps, mapDispatchToProps)(Counter); \"}</p>\n   \n   </code>\n\n   <p>6. Wrap your app with the <b>Provider</b> component to make the Redux store available to all components:</p>\n\n    <code>\n      \n      <p>{\"import { Provider } from 'react-redux'; \"}</p>\n\n      <p>{\"import store from './store'; \"}</p>\n\n      <p>{\"import Counter from './Counter'; \"}</p>\n\n      <p>{\"const App = () => { \"}</p>\n\n      <p>{\"return (\"}</p>\n\n      <p>{\" <Provider store={store}> \"}</p>\n\n      <p>{\"<Counter /> \"}</p>\n\n      <p>{\"</Provider> \"}</p>\n\n      <p>{\"); \"}</p>\n\n      <p>{\"}\"}</p>\n\n      <p>{\"export default App;\"}</p>\n    \n    </code>\n\n    <p>This is a basic example of how to use Redux and React-Redux in a React application. Keep in mind that this is just the tip of the iceberg, and there's much more to learn about Redux and its ecosystem.</p>\n\n    <p>there are a few more things to keep in mind when using Redux in a React application:</p>\n\n    <p>1. Redux middleware: Middleware is a way to modify or intercept Redux actions before they reach the reducers. Middleware can be used for tasks such as logging, asynchronous requests, and more. Some popular middleware options for Redux include <b>redux-thunk, redux-saga, and redux-observable</b>.</p>\n\n    <p>2. Redux devtools: Redux devtools is a browser extension that provides a useful UI for debugging and inspecting the Redux store. It allows you to inspect actions and state changes, and also provides time-travel debugging functionality.</p>\n\n    <p>3. Redux selectors: Selectors are functions that extract specific pieces of data from the Redux store. They can be used to compute derived data, filter and transform data, and more. Selectors can help simplify your components by providing them with the exact data they need, without having to worry about the shape of the store.</p>\n\n    <p>4. Redux ducks: Ducks is a proposal for organizing Redux code into modules that contain all the related action types, action creators, and reducers for a specific feature or domain. This approach can help simplify your codebase and make it easier to maintain.</p>\n\n    <p>These are just a few of the additional topics you may want to explore when working with Redux. There are many other libraries and tools available in the Redux ecosystem, so it's important to take the time to learn about them and decide which ones are the best fit for your project.</p>\n    \n    </div>\n    )}\n      {language === 'ru' && (\n        <div>\n          <RuReact_7 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmReact_7 />\n        </div>\n      )} \n\n\n    </div>\n  )\n}\n\nexport default React_7;","/home/artashes/Desktop/codeex/codeex/src/pages/React_8.js",["1049","1050","1051"],[],"import React, { useState } from 'react';\nimport RuReact_8 from '../lang/RuReact_8';\nimport AmReact_8 from '../lang/AmReact_8';\n\nfunction React_8() {\n  \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n\n  return (\n    <div className='java-script'>\n      \n      <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n {language === 'en' && (\n        <div> \n\n      <h1>Redux Thunk</h1>\n      \n      <p>Redux Thunk is a middleware library for Redux that allows you to write async logic that interacts with the Redux store. It enables you to dispatch actions that contain async code, such as API requests or other side effects, by wrapping your action creators in a function that returns another function.</p>\n\n      <p>Here's an example of how Redux Thunk can be used in a React application:</p>\n\n      <code>\n        \n        <p>{\"// actions.js \"}</p>\n\n        <p>{\"import axios from 'axios'; \"}</p>\n\n        <p>{\"export const fetchUserRequest = () => ({ \"}</p>\n\n        <p>{\"type: 'FETCH_USER_REQUEST', \"}</p>\n\n        <p>{\"}); \"}</p>\n\n        <p>{\"export const fetchUserSuccess = (user) => ({ \"}</p>\n\n        <p>{\" type: 'FETCH_USER_SUCCESS', \"}</p>\n\n        <p>{\"payload: user, \"}</p>\n\n        <p>{\"}); \"}</p>\n\n        <p>{\"export const fetchUserError = (error) => ({ \"}</p>\n\n        <p>{\"type: 'FETCH_USER_ERROR', \"}</p>\n\n        <p>{\"payload: error, \"}</p>\n\n        <p>{\"}); \"}</p>\n        \n        <p>{\"export const fetchUser = (userId) => { \"}</p>\n\n        <p>{\"return (dispatch) => { \"}</p>\n\n        <p>{\"dispatch(fetchUserRequest()); \"}</p>\n\n        <p>{\"axios.get(` https://jsonplaceholder. typicode.com/users/${userId} `) \"}</p>\n\n        <p>{\".then((response) => {\"}</p>\n\n        <p>{\"const user = response.data;\"}</p>\n\n        <p>{\" dispatch(fetchUserSuccess(user));\"}</p>\n\n        <p>{\"})\"}</p>\n\n        <p>{\".catch((error) => {\"}</p>\n\n        <p>{\" dispatch(fetchUserError(error.message));\"}</p>\n\n        <p>{\"});\"}</p>\n\n        <p>{\"};\"}</p>\n\n        <p>{\"};\"}</p>\n\n      </code>\n\n      <p>In the example above, we define three action creators: <b>fetchUserRequest, fetchUserSuccess, and fetchUserError</b>. We also define a <b>fetchUser</b> action creator that returns a function instead of an action object. This function takes <b>dispatch</b> as an argument, which is the Redux store's <b>dispatch</b> function.</p>\n\n      <p>Inside the <b>fetchUser</b> function, we dispatch the <b>fetchUserRequest</b> action, which sets the <b>isLoading</b> state to <b>true</b>. We then make an API call using Axios and dispatch either the <b>fetchUserSuccess or fetchUserError</b> action based on the API response. These actions update the Redux store with the retrieved data or the error message, respectively.</p>\n\n      <p>To use this action creator in a component, we can import it and pass it to <b>dispatch</b> like this:</p>\n\n     <code>\n     \n     <p>{\"// MyComponent.js\"}</p>\n\n     <p>{\"import React, { useEffect } from 'react';\"}</p>\n\n     <p>{\"import { useDispatch, useSelector } from 'react-redux'; \"}</p>\n\n     <p>{\" import { fetchUser } from './actions'; \"}</p>\n\n     <p>{\" const MyComponent = ({ userId }) => { \"}</p>\n\n     <p>{\"const dispatch = useDispatch(); \"}</p>\n\n     <p>{\" const user = useSelector(state => state.user.data); \"}</p>\n\n     <p>{\" const isLoading = useSelector(state => state.user.isLoading); \"}</p>\n\n     <p>{\"const error = useSelector(state => state.user.error); \"}</p>\n\n     <p>{\"useEffect(() => { \"}</p>\n\n     <p>{\" dispatch(fetchUser(userId));\"}</p>\n\n     <p>{\"}, [dispatch, userId]); \"}</p>\n\n     <p>{\" if (isLoading) { \"}</p>\n\n     <p>{\" return <div>Loading...</div>; \"}</p>\n\n     <p>{\" } \"}</p>\n\n     <p>{\"if (error) {  \"}</p>\n\n     <p>{\"return <div>Error: {error}</div>;  \"}</p>\n\n     <p>{\" } \"}</p>\n\n     <p>{\" return (\"}</p>\n\n     <p>{\" <div> \"}</p>\n\n     <p>{\"  <h1>{user.name}</h1> \"}</p>\n\n     <p>{\"<p>{user.email}</p> \"}</p>\n     \n     <p>{\" <p>{user.phone}</p> \"}</p>\n     \n     <p>{\"</div> \"}</p>\n\n     <p>{\"  ); \"}</p>\n\n     <p>{\" }; \"}</p>\n     \n     </code>\n\n<p>In the example above, we use the useDispatch and useSelector hooks from the react-redux library to interact with the Redux store. We dispatch the fetchUser action creator in the useEffect hook, which will be called when the component mounts. We also use useSelector to extract the relevant pieces of data from the Redux store, such as the user data and the isLoading and error flags.</p>\n\n<p>Overall, Redux Thunk is a useful middleware library for Redux that allows you to write async logic that interacts with the Redux store. It can help simplify your code and make it easier to reason about async behavior in your React application.</p>\n\n<h3>Redux-Observable</h3>\n\n<p>Redux-Observable is a middleware for Redux that enables the use of reactive programming in Redux applications. It allows developers to handle complex asynchronous actions and events in a declarative, composable, and easy-to-test way using RxJS, a library for reactive programming.</p>\n\n<p>With Redux-Observable, developers can define \"epics\" which are functions that listen for certain actions, and then react to them with a stream of new actions. These epics are observables, which are functions that receive a stream of events and can transform, filter, or merge them in a declarative way.</p>\n\n<p>Here is an example of how to use Redux-Observable:</p>\n\n<code>\n<p>{\"import { createStore, applyMiddleware } from 'redux'; \"}</p>\n\n<p>{\"import { createEpicMiddleware, combineEpics } from 'redux-observable'; \"}</p>\n\n<p>{\"import { ajax } from 'rxjs/ajax'; \"}</p>\n\n<p>{\"import { mergeMap, map, catchError } from 'rxjs/operators'; \"}</p>\n\n<p>{\"const pingEpic = action$ =>\"}</p>\n\n<p>{\"action$.ofType('PING')\"}</p>\n\n<p>{\".mergeMap(action =>\"}</p>\n\n<p>{\"ajax.getJSON('/api/ping')\"}</p>\n\n<p>{\".map(response => ({ type: 'PONG', payload: response })) \"}</p>\n\n<p>{\".catch(error => ({ type: 'PING_ERROR', payload: error.message }))\"}</p>\n\n<p>{\"); \"}</p>\n\n<p>{\"const rootEpic = combineEpics(\"}</p>\n\n<p>{\"pingEpic, \"}</p>\n\n<p>{\"// more epics... \"}</p>\n\n<p>{\"); \"}</p>\n\n<p>{\"const epicMiddleware = createEpicMiddleware(); \"}</p>\n\n<p>{\"const store = createStore(\"}</p>\n\n<p>{\"reducer, \"}</p>\n\n<p>{\"applyMiddleware(epicMiddleware) \"}</p>\n\n<p>{\");\"}</p>\n\n<p>{\"epicMiddleware.run(rootEpic);\"}</p>\n\n</code>\n\n<p>In this example, we define an epic called <b>pingEpic</b> which listens for an action of type 'PING', and then makes an AJAX request to a server to ping it. If the request is successful, it dispatches an action of type 'PONG' with the response payload. If the request fails, it dispatches an action of type 'PING_ERROR' with the error message as the payload.</p>\n\n<p>We then combine all our epics into a single <b>rootEpic</b>, and create an instance of <b>createEpicMiddleware()</b> to use as a middleware in our Redux store. Finally, we apply the middleware to the store and run the root epic with <b>epicMiddleware.run(rootEpic)</b>.</p>\n   \n<p>Overall, Redux-Observable is a powerful tool for handling complex asynchronous actions and events in Redux applications. It provides a flexible and declarative way to manage async behavior using reactive programming concepts.</p>   \n\n</div>\n    )}\n      {language === 'ru' && (\n        <div>\n          <RuReact_8 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmReact_8 />\n        </div>\n      )} \n   \n    </div>\n  )\n}\n\nexport default React_8;","/home/artashes/Desktop/codeex/codeex/src/pages/React_9.js",["1052","1053"],[],"import React, { useState } from 'react';\nimport RuReact_9 from '../lang/RuReact_9';\nimport AmReact_9 from '../lang/AmReact_9';\n\nfunction React_9() {\n  \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  \n  return (\n    <div className='java-script'>\n\n<div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n {language === 'en' && (\n        <div> \n\n        <h1>Redux-Saga</h1>\n\n        <p>Redux-saga is a library for handling side effects, such as asynchronous requests and data fetching, in Redux applications. It uses generator functions to manage the flow of asynchronous operations and provides a centralized place for handling all side effects, making it easier to reason about and test application behavio</p>\n      \n      <p>Here is an example of how you can use redux-saga to handle an asynchronous API call:</p>\n\n    <code>\n      <p>{\"import { call, put, takeLatest } from 'redux-saga/effects';\"}</p>\n\n      <p>{\"import axios from 'axios';\"}</p>\n\n      <p>{\"// Action Types \"}</p>\n\n      <p>{\"const FETCH_USERS_REQUEST = 'FETCH_USERS_REQUEST'; \"}</p>\n\n      <p>{\"const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS'; \"}</p>\n\n      <p>{\"const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE';\"}</p>\n\n      <p>{\"// Action Creators\"}</p>\n\n      <p>{\"const fetchUsersRequest = () => ({ type: FETCH_USERS_REQUEST });\"}</p>\n\n      <p>{\"const fetchUsersSuccess = (users) => ({ type: FETCH_USERS_SUCCESS, users });\"}</p>\n\n      <p>{\"const fetchUsersFailure = (error) => ({ type: FETCH_USERS_FAILURE, error });\"}</p>\n\n      <p>{\"// Reducer\"}</p>\n\n      <p>{\"const initialState = { users: [], loading: false, error: null };\"}</p>\n\n      <p>{\"const usersReducer = (state = initialState, action) => {\"}</p>\n\n      <p>{\"switch (action.type) {\"}</p>\n\n      <p>{\"case FETCH_USERS_REQUEST:\"}</p>\n\n      <p>{\"return { ...state, loading: true };\"}</p>\n\n      <p>{\"case FETCH_USERS_SUCCESS:\"}</p>\n\n      <p>{\"return { ...state, users: action.users, loading: false };\"}</p>\n\n      <p>{\"case FETCH_USERS_FAILURE:\"}</p>\n\n      <p>{\"return { ...state, error: action.error, loading: false };\"}</p>\n\n      <p>{\"default:\"}</p>\n\n      <p>{\"return state;\"}</p>\n\n      <p>{\" }\"}</p>\n\n      <p>{\"};\"}</p>\n\n      <p>{\"// Sagas\"}</p>\n\n      <p>{\"function* fetchUsers() {\"}</p>\n\n      <p>{\"try {\"}</p>\n\n      <p>{\"const response = yield call(axios.get, 'https://jsonplaceholder. typicode.com/users');\"}</p>\n\n      <p>{\"yield put(fetchUsersSuccess(response.data));\"}</p>\n\n      <p>{\"} catch (error) {\"}</p>\n\n      <p>{\"yield put(fetchUsersFailure(error));\"}</p>\n\n      <p>{\"}\"}</p>\n\n      <p>{\"}\"}</p>\n\n      <p>{\"function* usersSaga() {\"}</p>\n\n      <p>{\"yield takeLatest(FETCH_USERS_REQUEST, fetchUsers);\"}</p>\n\n      <p>{\"}\"}</p>\n\n      <p>{\"export { usersReducer, usersSaga };\"}</p>\n\n    </code>\n\n<p>In this example, we define three action types (FETCH_USERS_REQUEST, FETCH_USERS_SUCCESS, and FETCH_USERS_FAILURE), three action creators (fetchUsersRequest, fetchUsersSuccess, and fetchUsersFailure), and a reducer function (usersReducer) to handle state updates.</p>\n\n<p>We also define two sagas: fetchUsers and usersSaga. The fetchUsers saga uses the call effect to make an API call using axios and dispatches either fetchUsersSuccess or fetchUsersFailure depending on whether the call succeeds or fails. The usersSaga saga listens to FETCH_USERS_REQUEST actions and runs the fetchUsers saga in response.</p>\n\n<p>Finally, we export both the reducer and saga so they can be used in our Redux store setup:</p>\n\n<code>\n  <p>{\"import { createStore, applyMiddleware } from 'redux';\"}</p>\n\n  <p>{\"import createSagaMiddleware from 'redux-saga';\"}</p>\n\n  <p>{\"import { usersReducer, usersSaga } from './users';\"}</p>\n\n  <p>{\"const sagaMiddleware = createSagaMiddleware();\"}</p>\n\n  <p>{\"const store = createStore(usersReducer, applyMiddleware(sagaMiddleware));\"}</p>\n\n  <p>{\"sagaMiddleware.run(usersSaga);\"}</p>\n\n  <p>{\"export default store;\"}</p>\n</code>\n\n<p>In this setup, we create a Redux store with our usersReducer and apply the sagaMiddleware. We then run the usersSaga using sagaMiddleware.run. This will ensure that our saga is active and listening for actions in our application.</p>\n\n</div>\n    )}\n      {language === 'ru' && (\n        <div>\n          <RuReact_9 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmReact_9 />\n        </div>\n      )} \n\n\n    </div>\n  )\n}\n\nexport default React_9;","/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_10.js",["1054","1055"],[],"import React,{useState} from 'react';\nimport RuEs5_10 from '../lang/RuEs5_10';\nimport AmEs5_10 from '../lang/AmEs5_10';\n\nfunction JsEs5_10() {\n \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n  \n  \n  \n  return (\n    <div className='java-script'>\n        \n        <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Russian</button>\n        <button onClick={handleArmenianClick}>Armenian</button>\n      </div>\n\n      {language === 'en' && (\n        <div>     \n        \n        \n        <h1>JavaScript ES5 Examples</h1>\n\n<b>Function to calculate the power of a number</b>\n    \n    <code>\n   \n    <p>{\"function pow(num, exp) { \"}</p>\n\n    <p>{\" var cnt = 0; \"}</p>\n\n    <p>{\"var res = 1; \"}</p>\n\n    <p>{\"while (cnt < exp) { \"}</p>\n\n    <p>{\" res *= num;\"}</p>\n\n    <p>{\" cnt++; \"}</p>\n\n    <p>{\" }\"}</p>\n\n    <p>{\"return res;\"}</p>\n\n    <p>{\"}\"}</p>\n    \n    </code>   \n\n<p><b>pow(num, exp)</b>: This function calculates the power of a number. It takes two parameters, num and exp, and returns the value of num raised to the power of exp. The function uses a while loop and a counter to repeatedly multiply num by itself exp number of times until the counter reaches exp.</p>\n\n\n<b>Function to calculate the power of a number (alternative version)</b>\n<code>\n\n<p>{'function pow2(num1, num2) {'}</p>\n\n<p>{'var num3 = 1;'}</p>\n\n<p>{'for (var i = 1; i <= num2; i++) {'}</p>\n\n<p>{'num3 *= num1;'}</p>\n\n<p>{'}'}</p>\n\n<p>{'return num3;'}</p>\n\n<p>{'}'}</p>\n\n</code>\n\n<p><b>pow2(num1, num2)</b>: This function calculates the power of a number. It takes two parameters, num1 and num2, and returns the value of num1 raised to the power of num2. The function uses a for loop to repeatedly multiply num1 by itself num2 number of times until the loop completes.</p>\n\n<b>Function to check if a number is prime</b>\n\n<code>\n  <p>{'function isPrime(number) {'}</p> \n\n  <p>{'if (number < 2) {'}</p> \n\n  <p>{'return false;'}</p> \n\n  <p>{'} else if (number == undefined) {'}</p> \n\n  <p>{' return undefined;'}</p> \n\n  <p>{'} else {'}</p> \n\n  <p>{'for (var i = 2; i < number; i++) {'}</p>\n\n   <p>{' if (number % i === 0) {'}</p> \n\n   <p>{'return false;'}</p>\n\n   <p>{' }'}</p>\n\n   <p>{'}'}</p>\n\n   <p>{'return true;'}</p>\n\n   <p>{'}'}</p>\n\n   <p>{'}'}</p>\n\n</code> \n\n<p><b>isPrime(number)</b>: This function checks whether a number is prime or not. It takes a parameter number and returns true if the number is prime, otherwise it returns false. The function first checks if the number is less than 2, in which case it immediately returns false. If the number is undefined, it returns undefined. Otherwise, the function uses a for loop to check if any number between 2 and number (exclusive) divides number evenly. If such a number is found, the function returns false. If no such number is found, the function returns true.</p>\n\n<h4>Creating a pyramid using asterisks in JavaScript</h4>\n\n<code>\n    <p>{\"var x = 6; \"}</p>\n\n    <p>{'var string = \"\";'}</p>\n\n    <p>{\"for (var i = 1; i <= x; i++) {\"}</p>\n\n    <p>{\"for (var y = 1; y <= x - i; y++) {\"}</p>\n\n    <p>{'string += \" \";'}</p>\n\n    <p>{\"}\"}</p>\n\n    <p>{\" for (var k = 0; k < 2 * i - 1; k++) {\"}</p>\n\n    <p>{' string += \"*\"; '}</p>\n\n    <p>{\" }\"}</p>\n\n    <p>{'string += \"\\n\";'}</p>\n\n    <p>{\"}\"}</p>\n\n    <p>{\"console.log(string);\"}</p>\n    \n</code>\n\n<p>The code creates a pyramid pattern using asterisks ('*') and spaces.</p>\n\n<p>The code starts by defining a variable 'x' with a value of 6 and an empty string variable 'string'. Then, it uses a for loop to iterate through each row of the pyramid, starting from 1 and going up to 'x'.</p>\n\n<p>Inside the first for loop, another for loop is used to add spaces before the asterisks. It adds (x-i) number of spaces before each row of asterisks.</p>\n\n<p>Then, the second for loop is used to add asterisks to the string. The number of asterisks added in each row is given by the formula 2*i-1, where 'i' is the current row number.</p>   \n\n<p>Finally, a newline character is added to the end of each row, and the completed string is printed to the console using the console.log() method.</p>  \n\n<b> Creating a Pyramid Pattern with Stars and Numbers</b>\n\n<code>\n    <p>{'var lineCount = 5;'}</p>\n\n    <p>{\"var symb = '*';\"}</p>\n\n    <p>{\"var result = ''; \"}</p>\n\n    <p>{'for (var i = 0; i < lineCount; i++){'}</p>\n\n    <p>{'for(var j = 0; j < lineCount - i; j++){'}</p>\n\n    <p>{\"result += '1'; \"}</p>\n\n    <p>{' }'}</p>\n\n    <p>{\"result += symb + '\\\\n;'\"}</p>\n\n    <p>{\" symb += ' *';\"}</p>\n\n    <p>{\"}\"}</p>\n\n    <p>{\"console.log(result)\"}</p>\n</code>\n\n<p>The code creates a pattern of stars and numbers in a pyramid shape. It first defines the number of lines for the pyramid and the symbol to use (in this case, ''). It then uses nested loops to build each line of the pyramid, starting with the base and adding one symbol at a time until it reaches the top. The numbers in the pattern are represented by the digit '1'. Each line of the pyramid is constructed by adding the appropriate number of '1's, followed by the symbol, and then a newline character. The symbol used for each line is updated using the string concatenation operator to add an additional '' for each new line. Finally, the resulting pattern is printed to the console using the 'console.log' function.</p>\n\n    <h3>JavaScript functions for generating Fibonacci series</h3>\n\n\n    <b>Explame</b>\n    <code>\n      <p>{\"function fibo(num) { \"}</p>\n\n      <p>{\"if (isNaN(+num)) { \"}</p>\n\n      <p>{\"return 'ERROR'; \"}</p>\n\n      <p>{\" } \"}</p>\n\n      <p>{\"var firstN = 0; \"}</p>\n\n      <p>{\" var secondN = 1; \"}</p>\n\n      <p>{\"while (firstN < num) {\"}</p>\n\n      <p>{\" console.log(firstN); \"}</p>\n\n      <p>{\" secondN = firstN + secondN; \"}</p>\n\n      <p>{\"firstN = secondN - firstN; \"}</p>\n\n      <p>{\"}\"}</p>\n\n      <p>{\"}\"}</p>\n\n      <p>{\"fibo(55);\"}</p>\n    </code>\n\n    <b>Explame</b>\n\n    <code>\n      <p>{\"function fibonachi(num) {\"}</p>\n\n      <p>{\"var num1 = 0;\"}</p>\n\n      <p>{\"var num2 = 1;\"}</p>\n\n      <p>{' if (typeof num !== \"number\") {'}</p>\n\n      <p>{'console.error(\"write only numbers\");'}</p>\n\n      <p>{\"} else {\"}</p>\n\n      <p>{\"for (var i; num1 < num;) {\"}</p>\n\n      <p>{\" console.log(num1);\"}</p>\n\n      <p>{\" i = num1 + num2;\"}</p>\n\n      <p>{\"num1 = num2;\"}</p>\n\n      <p>{\"num2 = i;\"}</p>\n\n      <p>{\" }\"}</p>\n\n      <p>{\" }\"}</p>\n\n      <p>{\"}\"}</p>\n\n      <p>{\"fibonachi(100);\"}</p>\n    </code>\n\n    <b>Example</b>\n    \n    <code>\n      \n      <p>{\"function fibonachi(n) {\"}</p>\n\n      <p>{' if (typeof n === \"number\") {'}</p>\n\n      <p>{\" var a = 0; \"}</p>\n\n      <p>{\"var b = 1; \"}</p>\n\n      <p>{\"var result = 0;\"}</p>\n\n      <p>{\" for (; a < n;) {\"}</p>\n\n      <p>{\" console.log(a)\"}</p>\n\n      <p>{\"result = a + b;\"}</p>\n\n      <p>{\"  a = b;\"}</p>\n\n      <p>{\" b = result; \"}</p>\n\n      <p>{\"}\"}</p>\n\n      <p>{\" } else {\"}</p>\n\n      <p>{'console.error(\"please write only number\")'}</p>\n\n      <p>{\"}\"}</p>\n\n      <p>{\"}\"}</p>\n    </code>\n\n<p>These are three different implementations of the Fibonacci sequence generator in JavaScript</p>\n\n<p>The first implementation (fibo) uses a while loop to generate Fibonacci numbers up to a given limit (num) and prints them using console.log(). It first checks if the input is a valid number, and if not, it returns an error message.</p>\n\n<p>The second implementation (fibonachi) uses a for loop to generate Fibonacci numbers up to a given limit (num) and prints them using console.log(). It first checks if the input is a valid number, and if not, it prints an error message to the console.</p>    \n\n <p>The third implementation (fibonachi) also uses a for loop to generate Fibonacci numbers up to a given limit (n) and prints them using console.log(). It first checks if the input is a valid number, and if not, it prints an error message to the console. This implementation uses three variables to generate the next Fibonacci number: a, b, and result. It starts with a = 0 and b = 1, and for each iteration, it calculates the sum of a and b, stores the result in result, sets a to b, and sets b to result.</p>   \n    \n   \n <h3>Chess board JavaScript</h3>\n\n <code>\n  <p>{\"function chess(rows, symbolOne, symbolTwo, currentRow) {\"}</p>\n\n  <p>{\"var symbol = ' ';\"}</p>\n\n  <p>{'if (typeof rows != \"number\"'}</p>\n\n  <p>{'|| typeof symbolOne != \"string\"'}</p>\n\n  <p>{'|| typeof symbolTwo != \"string\") {'}</p>\n\n  <p>{' console.error(\"Invalid params\");'}</p>\n\n  <p>{\"return; \"}</p>\n\n  <p>{\"}\"}</p>\n\n  <p>{\"rows = rows || 8;\"}</p>\n\n  <p>{' symbolOne = symbolOne || \" ⬛\";'}</p>\n  \n  <p>{'symbolTwo = symbolTwo || \" ⬜\";'}</p>\n\n  <p>{\"currentRow = currentRow || 1;\"}</p>\n\n  <p>{\" if (currentRow > rows) return '';\"}</p>\n\n  <p>{\" for (var i = 0; i < rows / 2; i++) {\"}</p>\n\n  <p>{\"symbol += symbolOne + symbolTwo;\"}</p>\n\n  <p>{\" }\"}</p>\n\n  <p>{' symbol += \"\\\\n\";'}</p>\n\n  <p>{\"symbol += chess(rows, symbolTwo, symbolOne, currentRow + 1);\"}</p>\n\n  <p>{\" return symbol;\"}</p>\n  \n  <p>{'}'}</p>\n\n  <p>{'console.log(chess(8, \"⬛\", \"⬜\"))'}</p>\n  \n  </code>  \n\n  <p>This code defines a recursive function called \"chess\" that takes four parameters: \"rows\", \"symbolOne\", \"symbolTwo\", and \"currentRow\". It aims to create a string representation of a chessboard pattern by alternating two symbols, \"symbolOne\" and \"symbolTwo\", for each square on the board.</p>\n   \n  <p>The function first checks whether the input parameters are valid, i.e., whether \"rows\" is a number and \"symbolOne\" and \"symbolTwo\" are strings. If any of the parameters are invalid, it returns an error message and exits the function</p>  \n    \n  <p>Then, it sets default values for \"rows\", \"symbolOne\", and \"symbolTwo\" if they were not provided. The default value for \"rows\" is 8, while the default values for \"symbolOne\" and \"symbolTwo\" are two Unicode characters that represent a black square and a white square, respectively.</p>  \n\n  <p>Next, the function checks whether it has reached the end of the chessboard (i.e., whether \"currentRow\" is greater than \"rows\"). If so, it returns an empty string and exits the function.</p>\n\n  <p>If the end of the chessboard has not been reached, the function creates a string \"symbol\" by appending \"symbolOne\" and \"symbolTwo\" alternately \"rows / 2\" times (since each row consists of \"rows / 2\" pairs of symbols).</p>\n\n  <p>It then appends a newline character to the \"symbol\" string and makes a recursive call to the \"chess\" function, swapping \"symbolOne\" and \"symbolTwo\" and increasing \"currentRow\" by 1.</p>  \n    \n  <p>Finally, it returns the \"symbol\" string, which contains the entire chessboard pattern. The last line of code invokes the \"chess\" function with \"rows\" set to 8 and \"symbolOne\" and \"symbolTwo\" set to the Unicode characters representing black and white squares, respectively, and logs the resulting chessboard pattern to the console.</p> \n   \n  </div>\n\n)}\n\n  \n  {language === 'ru' && (\n        <div>\n          <RuEs5_10 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmEs5_10 />\n        </div>\n      )}\n   \n  \n    </div>\n  )\n}\n\nexport default JsEs5_10;","/home/artashes/Desktop/codeex/codeex/src/lang/RuEs5_10.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmEs5_10.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_1.js",["1056","1057","1058","1059"],[],"import React from 'react'\n\nfunction RuReact_1() {\n  return (\n    <div>\n      <h1>React JS</h1>\n\n<p><b>ReactJS</b> - это популярная <b>библиотека JavaScript</b>, созданная <b>Facebook</b>. Она была выпущена впервые в 2013 году и с тех пор приобрела огромную популярность среди веб-разработчиков.</p>\n\n<p>ReactJS был создан, чтобы решить конкретную проблему - необходимость быстрого и эффективного способа создания сложных пользовательских интерфейсов с большим объемом данных, которые меняются со временем. До появления ReactJS создание таких интерфейсов требовало много кода и часто было медленным и трудным в управлении.</p>\n\n<p>Основная идея за ReactJS заключается в разбиении пользовательского интерфейса на отдельные компоненты, которые можно использовать повторно в разных частях приложения. Каждый компонент отвечает за рендеринг небольшой части пользовательского интерфейса и может быть легко объединен вместе для создания сложных интерфейсов.</p>\n\n<p>Одним из ключевых преимуществ ReactJS является то, что он использует виртуальный DOM, который представляет собой легковесное представление фактического DOM. Это позволяет ReactJS обновлять пользовательский интерфейс очень эффективным образом, не делая дорогостоящих обновлений фактического DOM.</p>\n\n<b>Вот пример простого компонента ReactJS:</b>\n\n<code>\n\n<p>{\"import React from 'react';\"}</p>\n\n<p>{'function MyComponent(props) {'}</p>\n\n<p>{' return ('}</p>\n\n<p>{'<div>'}</p>\n\n<p>{'<h1>{props.title}</h1>'}</p>\n\n<p>{'<p>{props.description}</p>'}</p>\n\n<p>{'</div>'}</p>\n\n<p>{' );'}</p>\n\n<p>{'}'}</p>\n\n<p>{'export default MyComponent;'}</p>  \n\n</code>\n\n<p>Этот компонент принимает два свойства - <b>title</b> и <b>description</b> - и выводит их в простой HTML-структуре. Затем этот компонент может быть использован в приложении для отображения информации пользователю.</p>\n\n<p>Если вы заинтересованы в изучении ReactJS, я рекомендую начать с официальной документации на сайте ReactJS: <a href=\"https://reactjs.org/\" target='_blank'>👉🏼<b>https://reactjs.org/.</b></a> Там вы найдете огромное количество информации о том, как начать работу с ReactJS, включая учебники, руководства и справочные материалы.</p>\n\n<p>Чтобы установить Node.js для работы с React, выполните следующие шаги:</p>\n\n<h1>Установка Node.js в Windows</h1>\n\n<p>1. Перейдите на официальный сайт Node.js: <a href=\"https://nodejs.org/\" target='_blank'>👉🏼 https://nodejs.org/ </a></p>\n\n<p>2. Нажмите кнопку \"Скачать\" для версии \"Установщик для Windows\"</p>\n\n<p>3. Запустите загруженный установщик и следуйте инструкциям для установки Node.js</p>\n\n<p>4. После завершения установки откройте командную строку и введите node -v, чтобы проверить, что Node.js установлен правильно</p>\n    \n<h1>Установка Node.js на Ubuntu</h1>\n\n<p>1. Откройте окно терминала</p>\n\n<p>2. Запустите команду <b>sudo apt update</b>, чтобы обновить менеджер пакетов</p>\n\n<p>3. Запустите команду <b>sudo apt install nodejs</b>, чтобы установить Node.js</p>\n\n<p>4. Запустите команду <b>node -v</b>, чтобы проверить, что Node.js установлен правильно</p>\n\n<b>Вот пример использования Node.js и React вместе:</b>\n\n<p>1. Создайте новое React-приложение, используя команду <b>npx create-react-app my-app</b></p>\n\n<p>2. Перейдите в каталог <b>my-app</b> с помощью команды <b>cd my-app</b></p>\n\n<p>3. Запустите сервер разработки, используя команду <b>npm start</b></p>    \n\n<p>4. Откройте веб-браузер и перейдите по адресу <b>http://localhost:3000</b>, чтобы увидеть работающее приложение React.</p>\n\n<p>Если вас интересует изучение Node.js и React, рекомендую обратиться к официальной документации по обоим технологиям. Вот ссылки на их соответствующие веб-сайты:</p>\n\n<b><a href=\"https://nodejs.org/\" target='_blank' > 👉🏼 Node.js</a></b> <br/>\n\n<b> <a href=\"https://reactjs.org/\" target='_blank' > 👉🏼 React</a> </b> <br/> <br/>\n\n<b>Для работы с React необходимо хорошо понимать следующее:</b>\n\n<p>1. HTML/CSS: Вам необходимо хорошо понимать HTML и CSS, так как React в основном используется для создания пользовательских интерфейсов (UI) и веб-приложений.</p>\n\n<p>2. JavaScript: React - это библиотека JavaScript, поэтому вам необходимо иметь хорошее понимание JavaScript, включая такие концепции, как функции, массивы, объекты и области видимости.</p>\n\n<p>3. ES6: React сильно опирается на функции ES6, такие как стрелочные функции, деструктуризация и классы, поэтому вам необходимо хорошо понимать эти функции.</p> \n\n<p>4. JSX: Как уже упоминалось ранее, JSX - это расширение синтаксиса для JavaScript, которое позволяет писать код, напоминающий HTML, в ваших файлов JavaScript. Вам нужно понимать, как работает JSX и как использовать его для определения компонентов UI.</p>\n\n<p>5. Node.js и npm: Приложения React обычно создаются с использованием Node.js и менеджера пакетов npm. Вам необходимо понимать, как устанавливать и использовать эти инструменты.</p>\n\n<p>6. Экосистема React: Существует широкий спектр инструментов и библиотек, которые обычно используются в экосистеме React, такие как React Router, Redux и Axios. Вам необходимо понимать, как работают эти инструменты и как использовать их для создания приложений React.</p>\n\n<p>7. Инструменты разработки: Вам также необходимо знать инструменты разработки, такие как Visual Studio Code, Chrome DevTools и Git.</p>    \n    \n    \n    \n    \n    \n    \n    \n    </div>\n  )\n}\n\nexport default RuReact_1;","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_1.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_2.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_2.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_3.js",["1060","1061"],[],"import React from 'react'\n\nfunction RuReact_3() {\n  return (\n    <div>\n      \n      <h1>События React</h1>\n\n<p>React предоставляет способ обработки событий в компонентах, аналогичный обработке событий в чистом JavaScript. В React вы можете добавлять обработчики событий для любого элемента JSX с помощью синтаксиса on<b>[ИмяСобытия]</b>.</p>\n\n<p>Например, допустим, у нас есть кнопка в компоненте React, для которой мы хотим обработать событие нажатия:</p>\n\n<code>\n  \n  <p>{'function MyButton(props) {'}</p>\n  \n  <p>{'function handleClick() {'}</p>\n  \n  <p>{\" console.log('Кнопка нажата'); \"}</p>\n  \n  <p>{' }'}</p>\n  \n  <p>{'return ( '}</p>\n  \n  <p>{'<button onClick={handleClick}>Нажми меня</button>  '}</p>\n  \n  <p>{');'}</p>\n  \n  <p>{'} '}</p>\n\n</code>\n\n <p>В этом примере мы определяем компонент <b>MyButton</b>, который содержит элемент кнопки с пропом <b>onClick</b>, установленным на функцию с именем <b>handleClick</b>. При нажатии на кнопку будет вызвана функция <b>handleClick</b>, и сообщение \"Button clicked\" будет записано в консоль.</p>\n  \n<p>Вы также можете передавать аргументы в функцию обработчика событий с помощью стрелочных функций. Допустим, у нас есть список элементов, которые мы хотим отобразить в виде кнопок:</p>\n\n<code>\n  \n  <p>{'function ItemList(props) { '}</p>\n  \n  <p>{'const items = props.items; '}</p>\n  \n  <p>{'function handleClick(item) { '}</p>\n  \n  <p>{' console.log(`Нажат элемент ${item.id}`); '}</p>\n  \n  <p>{' } '}</p>\n  \n  <p>{'const buttonList = items.map((item) => '}</p>\n  \n  <p>{'<button key={item.id} onClick={() => handleClick(item)}> '}</p>\n  \n  <p>{'{item.name} '}</p>\n  \n  <p>{'</button> '}</p>\n  \n  <p>{' ); '}</p>\n  \n  <p>{'return ( '}</p>\n  \n  <p>{'<div> '}</p>\n  \n  <p>{'{buttonList} '}</p>\n  \n  <p>{'</div> '}</p>\n  \n  <p>{'); '}</p>\n  \n  <p>{'} '}</p>\n\n</code>   \n\n <p>В этом примере мы определяем компонент <b>ItemList</b>, который принимает входной параметр <b>items</b>. Мы определяем функцию <b>handleClick</b>, которая принимает аргумент <b>item</b>, который будет использоваться для вывода сообщения в консоль при нажатии на соответствующую кнопку.</p>\n\n<p>Мы используем метод <b>map</b>, чтобы создать новый массив элементов <b>{'<button>'}</b>, где каждый элемент соответствует элементу из входного параметра <b>items</b>. Мы устанавливаем свойство <b>key</b> для каждого элемента <b>{'<button>'}</b> в значение <b>id</b> соответствующего элемента, что является требованием в React для оптимизации обновлений. Мы также используем стрелочную функцию, чтобы передать объект <b>item</b> функции <b>handleClick</b> при нажатии на кнопку.</p>\n\n<p>Затем мы возвращаем элемент <b>{'<div>'}</b>, который содержит массив <b>buttonList</b>.</p>   \n    \n<h5>React Events</h5>\n\n<p>onKeyDown</p>\n\n<p>onKeyPress </p>\n\n<p>onKeyUp</p>\n\n<p>onFocus</p>\n\n<p>onBlur</p>\n\n<p>onChange</p>\n\n<p>onInput</p>\n\n<p>onInvalid </p>\n\n<p>onSubmit</p>\n\n<p>onClick</p>\n\n<p>onContextMenu</p>\n\n<p>onDoubleClick</p>\n\n<p>onDrag</p>\n\n<p>onDragEnd</p>\n\n<p>onDragEnter</p>\n\n<p>onDragExit</p>\n\n<p>onDragLeave</p>\n\n<p> <a href=\"https://react.dev/reference/react-dom/components/common#react-event-object\" target='_blank' > 👉🏼 React https://react.dev/reference/react-dom/components/common#react-event-object</a> </p>\n    \n<b>Состояние React в классовых компонентах</b>\n\n<p>В React состояние также может быть управляемо с помощью классовых компонентов. Классовые компоненты - это классы JavaScript, которые расширяют класс <b>React.Component</b> и реализуют метод <b>render</b>, который возвращает пользовательский интерфейс компонента.</p>\n\n<p>Вот пример классового компонента, который управляет состоянием:</p>\n\n<code>\n    <p>{\"import React, { Component } from 'react';\"}</p>\n\n    <p>{'class Counter extends Component { '}</p>\n    \n    <p>{'constructor(props) {'}</p>\n\n    <p>{'super(props);'}</p>\n\n    <p>{'this.state = { count: 0 };'}</p>\n\n    <p>{'this.handleClick = this.handleClick.bind(this);'}</p>\n\n    <p>{'}'}</p>\n\n    <p>{'handleClick() { '}</p>\n\n    <p>{'this.setState({ count: this.state.count + 1 }); '}</p>\n\n    <p>{'}'}</p>\n\n    <p>{' render() {'}</p>\n\n    <p>{'return ('}</p>\n\n    <p>{'<div>'}</p>\n\n    <p>{'<p>You clicked {this.state.count} раз(а)</p>'}</p>\n\n    <p>{'<button onClick={this.handleClick}>Нажми меня</button>'}</p>\n\n    <p>{' </div>'}</p>\n\n    <p>{');'}</p>\n\n    <p>{'}'}</p>\n\n    <p>{'}'}</p>\n</code>    \n    \n<p>В этом примере мы определяем класс <b>Counter</b>, который расширяет класс <b>React.Component</b>. Внутри класса мы определяем конструктор, который устанавливает начальное состояние компонента в объект со свойством <b>count</b> равным 0. Мы также связываем метод <b>handleClick</b> с экземпляром компонента, используя метод <b>bind</b>.</p>\n\n<p>Метод <b>handleClick</b> обновляет состояние компонента, вызывая метод this.setState с новым объектом, у которого свойство <b>count</b> увеличено на 1.</p>\n\n<p>Метод <b>render</b> возвращает пользовательский интерфейс компонента, который включает элемент <b>{'<p>'}</b>, отображающий текущее значение <b>count</b>, и кнопку, которая вызывает метод <b>handleClick</b> при нажатии.</p>\n\n<p>Как и в функциональных компонентах, важно никогда не изменять состояние напрямую. Вместо этого всегда используйте метод <b>this.setState</b> для обновления состояния.</p>\n\n<p>Хотя классовые компоненты все еще поддерживаются в React, функциональные компоненты обычно предпочтительнее, особенно с введением хуков. Однако понимание классовых компонентов все еще важно для поддержки и обновления старых кодовых баз.</p>\n\n<b>Жизненный цикл React</b>\n\n<p>В React компоненты имеют жизненный цикл, который описывает различные стадии, через которые они проходят в течение своего существования. Понимание жизненного цикла React важно для создания и поддержки надежных приложений на React.</p>\n\n<p>Вот краткий обзор методов жизненного цикла компонента React, сгруппированных по фазам:</p>\n\n<h4>Фаза монтирования:</h4>    \n\n<p><b>{'constructor()'}</b>: Вызывается при инициализации компонента.</p>\n\n<p><b>{'static getDerivedStateFromProps()'}</b>: Вызывается при инициализации компонента, а затем снова, когда ему передаются новые свойства (props). Редко используется.</p>\n\n<p><b>{'render()'}</b>: Вызывается каждый раз, когда компонент должен быть перерисован.</p>\n\n<p><b>{'componentDidMount()'}</b>: Вызывается после того, как компонент был отрисован в первый раз.</p>\n\n<h4>Фаза обновления:</h4>\n\n<p><b>{'static getDerivedStateFromProps()'}</b>: Вызывается при передаче компоненту новых свойств (props).</p>\n\n<p><b>{'shouldComponentUpdate()'}</b>: Вызывается перед повторной отрисовкой компонента. Позволяет отменить обновление.</p>\n\n<p><b>{'render()'}</b>: Вызывается каждый раз, когда компонент должен быть перерисован.</p>\n\n<p><b>{'getSnapshotBeforeUpdate()'}</b>: Вызывается перед обновлением компонента. Редко используется.</p>\n\n<p><b>{'componentDidUpdate()'}</b>: Вызывается после того, как компонент был обновлен.</p>\n\n<h4>Фаза удаления (Unmounting phase):</h4>\n\n<p><b>{'componentWillUnmount()'}</b>: Вызывается, когда компонент готовится быть удален из DOM-дерева.</p>\n\n<p>Вот пример, который демонстрирует методы жизненного цикла:</p>\n\n<code>\n  \n  <b>{\"import React, { Component } from 'react';\"}</b>\n  \n  <p>{'class LifecycleDemo extends Component {'}</p>\n  \n  <p>{'constructor(props) {'}</p>\n  \n  <p>{'super(props);'}</p>  \n  \n  <p>{'this.state = { count: 0 };'}</p>\n  \n  <p>{\"console.log('constructor');\"}</p>\n  \n  <p>{'}'}</p>\n  \n  <p>{'static getDerivedStateFromProps(props, state) {'}</p>\n  \n  <p>{\"console.log('getDerivedStateFromProps');\"}</p>\n  \n  <p>{'return null;'}</p>\n  \n  <p>{'}'}</p>\n  \n  <p>{'componentDidMount() {'}</p>\n  \n  <p>{\"console.log('componentDidMount'); \"}</p>\n  \n  <p>{'}'}</p>\n  \n  <p>{' shouldComponentUpdate(nextProps, nextState) {'}</p>\n  \n  <p>{\" console.log('shouldComponentUpdate');\"}</p>\n  \n  <p>{'return true;'}</p>\n  \n  <p>{' }'}</p>\n  \n  <p>{'getSnapshotBeforeUpdate(prevProps, prevState) {'}</p>\n  \n  <p>{\" console.log('getSnapshotBeforeUpdate'); \"}</p>\n  \n  <p>{'return null;'}</p>\n  \n  <p>{'}'}</p>\n  \n  <p>{'componentDidUpdate(prevProps, prevState, snapshot) {'}</p>\n  \n  <p>{\"console.log('componentDidUpdate'); \"}</p>\n  \n  <p>{'}'}</p>\n  \n  <p>{'componentWillUnmount() { '}</p>\n  \n  <p>{\"console.log('componentWillUnmount'); \"}</p>\n  \n  <p>{'}'}</p>\n  \n  <p>{' handleClick = () => {'}</p>\n  \n  <p>{' this.setState({ count: this.state.count + 1 });'}</p>\n  \n  <p>{'}; '}</p>\n  \n  <p>{'render() { '}</p>\n  \n  <p>{\"console.log('render');\"}</p>\n  \n  <p>{'return ('}</p>\n  \n  <p>{'<div>'}</p>\n  \n  <p>{' <p>You clicked {this.state.count} раз(а)</p>'}</p>\n  \n  <p>{'<button onClick={this.handleClick}>Нажми меня</button>'}</p>\n  \n  <p>{'</div>'}</p>\n  \n  <p>{');'}</p>\n  \n  <p>{'}'}</p>\n  \n  <p>{'}'}</p>\n\n</code>\n\n<p>В этом примере мы определяем класс <b>LifecycleDemo</b>, который записывает сообщения в консоль во время каждой фазы жизненного цикла компонента. Мы также определяем метод <b>handleClick</b>, который обновляет состояние компонента.</p>\n\n<p>При первом монтировании компонента вызываются следующие методы в порядке: <b>constructor, getDerivedStateFromProps, render и componentDidMount</b>. Когда состояние компонента изменяется, вызываются методы <b>shouldComponentUpdate, render и componentDidUpdate</b>, в указанном порядке.</p>\n   \n <p>При удалении компонента вызывается метод <b>componentWillUnmount</b>.</p>  \n    \n  <p>Важно понимать жизненный цикл компонента React, чтобы оптимизировать свои компоненты и избегать распространенных проблем, таких как утечки памяти и бесконечные циклы. Но не беспокойтесь, если вначале кажется, что это сложно – с практикой вы станете более уверенными в этом.</p>  \n    \n    \n    </div>\n  )\n}\n\nexport default RuReact_3;","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_3.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_4.js",["1062"],[],"import React from 'react'\n\nfunction RuReact_4() {\n  return (\n    <div>\n      \n      <h1>Получение данных в React(Fetch Data)</h1>\n\n      <p>1. Получение данных с помощью API fetch:</p>\n\n  <code>\n    \n    <p>{\" fetch('https://api.example.com/data') \"}</p>\n\n    <p>{'.then(response => response.json())'}</p>\n\n    <p>{'.then(data => console.log(data))'}</p>\n\n    <p>{'.catch(error => console.error(error))'}</p>\n\n  </code>\n\n<p>В этом примере мы отправляем запрос на сервер, используя API <b>fetch</b>. Объект <b>response</b> преобразуется в формат JSON с помощью метода <b>json()</b>, а полученные данные выводятся в консоль. Если происходит ошибка, она перехватывается и выводится в консоль.</p>\n\n\n<p>2. Отображение полученных данных в состоянии компонента:</p>\n\n<code>\n\n    <p><b>{\"import React, { useState, useEffect } from 'react'; \"}</b></p>\n\n    <p>{'function MyComponent() { '}</p>\n\n    <p>{'const [data, setData] = useState([]); '}</p>\n\n    <p>{'useEffect(() => { '}</p>\n\n    <p>{\"fetch('https://api.example.com/data') \"}</p>\n\n    <p>{'.then(response => response.json()) '}</p>\n\n    <p>{'.then(data => setData(data))'}</p>\n\n    <p>{'.catch(error => console.error(error));'}</p>\n\n    <p>{'}, []);'}</p>\n\n    <p>{'return ( '}</p>\n\n    <p>{'<div>'}</p>\n\n    <p>{'{data.map(item => ('}</p>\n\n    <p>{'<p key={item.id}>{item.name}</p> '}</p>\n\n    <p>{'))} '}</p>\n\n    <p>{'</div> '}</p>\n\n    <p>{'); '}</p>\n\n    <p>{'}'}</p>\n    \n</code>    \n\n<p>В этом примере мы используем хук <b>useState</b> для определения переменной состояния с именем <b>data</b>. Мы также используем хук <b>useEffect</b> для получения данных с сервера при монтировании компонента и обновления переменной состояния <b>data</b> полученными данными. Наконец, мы используем метод <b>map</b> для перебора массива данных и отображения каждого элемента в виде элемента параграфа.</p>\n  \n  <h1>Axios</h1>\n  \n  <p>Как Fetch, так и Axios являются библиотеками JavaScript, используемыми для выполнения HTTP-запросов из браузера или среды Node.js. Однако между ними есть некоторые отличия.</p>\n  \n  <p>Fetch является встроенным в браузер API, который использует промисы для обработки запросов и ответов. У него более простой синтаксис и проще использовать для простых запросов, но у него отсутствуют некоторые расширенные функции, такие как отмена запроса, события прогресса и автоматическая повторная отправка запроса.</p>  \n  \n  <p>Axios является популярной сторонней библиотекой, которая предоставляет более функциональный и мощный API для выполнения HTTP-запросов. Он поддерживает отмену запроса, события прогресса и автоматическую повторную отправку из коробки, а также имеет встроенную поддержку для обработки данных ответа, таких как JSON, XML и FormData.</p>\n  \n  <p>В отношении того, почему лучше использовать Axios вместо Fetch, это действительно зависит от конкретных потребностей вашего проекта. Если вы создаете простое веб-приложение, которому нужно только выполнять базовые запросы, то Fetch может быть достаточным. Однако, если вам нужны более расширенные функции и мощный API для обработки запросов и ответов, то Axios является лучшим выбором.</p>  \n  \n  <p>Некоторые преимущества использования Axios перед Fetch включают:</p>\n  \n  <p>1. Лучшая обработка ошибок: Axios имеет более надежную систему обработки ошибок и предоставляет более полезные сообщения об ошибках по сравнению с Fetch.</p>  \n\n  <p>2. Перехватчики: Axios предоставляет перехватчики, которые позволяют вам изменять запросы или ответы перед их отправкой или получением.</p>  \n  \n  <p>3. Автоматическое преобразование данных запросов и ответов: Axios может автоматически преобразовывать данные запросов и ответов в различные форматы, такие как JSON, что может быть очень полезным при работе с API.</p>  \n  \n  <p>4. Легкая отмена запросов: Axios предоставляет простой способ отмены запросов, что может быть полезно при работе с медленными или ненадежными сетями.</p>  \n  \n  <p>В общем, как Fetch, так и Axios являются полезными инструментами для отправки HTTP-запросов в JavaScript, но Axios предоставляет более продвинутые функции и более мощный API, который может быть очень полезен при создании более сложных приложений.</p>  \n  \n  <p><b>Axios</b> - это библиотека для отправки HTTP-запросов из браузера или Node.js. Она упрощает отправку запросов с использованием обещаний и обработку ответов.</p> \n  \n  <p>Чтобы использовать Axios в React.js, вам сначала необходимо установить его с помощью команды:</p> \n  \n  <b>npm install axios</b>\n\n<p>После этого вы можете использовать Axios в своих компонентах React. Например, следующий код отправляет GET-запрос на удаленный сервер и отображает ответ на странице:</p>\n\n<code>\n  \n  <p>{'import React, { useState, useEffect } from \"react\";'}</p>  \n\n  <p>{'import axios from \"axios\"; '}</p>\n\n  <p>{'function App() { '}</p>  \n\n  <p>{'const [data, setData] = useState(\"\");'}</p>\n\n  <p>{'useEffect(() => { '}</p>\n\n  <p>{'axios.get(\" https://jsonplaceholder. typicode.com/todos/1 \"). then((response) => { '}</p>\n\n  <p>{'setData(response.data); '}</p>\n\n  <p>{'}); '}</p>\n\n  <p>{' }, []);'}</p>\n\n  <p>{' return <div>{data.title}</div>;'}</p>\n\n  <p>{'}'}</p>\n\n  <p>{'export default App; '}</p>\n   \n  </code> \n\n  <p>В этом примере используется хук <b>useEffect</b> для отправки GET-запроса на сервер и обновления переменной состояния <b>data</b> ответом. Затем переменная data отображается на странице с помощью JSX.</p>  \n\n  <p>Кроме того, Axios поддерживает другие методы HTTP, такие как POST, PUT и DELETE, которые можно использовать для отправки данных на сервер и изменения ресурсов. Объект axios также предоставляет множество параметров конфигурации, таких как установка заголовков, тайм-аутов и перехватчиков запросов, которые позволяют настраивать поведение запросов.</p>  \n\n  <p>В целом, Axios является мощной и гибкой библиотекой для работы с HTTP-запросами в React.js, которая может упростить многие общие задачи, такие как получение данных из удаленного API.</p> \n\n  <p>Протокол HTTP поддерживает несколько методов запросов, которые позволяют выполнять различные операции с данными. Вот краткое описание четырех основных методов запросов, а также примеры их использования в React:</p> \n\n  <p>1. <b>GET</b>: метод запроса, используемый для получения данных с сервера. В React вы можете использовать метод <b>axios.get</b>.</p>\n\n  <code>\n  \n  <p>{\" axios.get('/api/data')\"}</p>\n\n  <p>{'.then(response => { '}</p>\n\n  <p>{'console.log(response.data); '}</p>\n\n  <p>{'})'}</p>\n\n  <p>{'.catch(error => {' }</p>\n\n  <p>{'console.log(error);'}</p>\n  \n  <p>{'});'}</p>  \n    \n  </code> \n\n  <p>В этом примере мы получаем данные из конечной точки <b>/api/data</b>. Данные ответа записываются в консоль в случае успешного запроса, а любые ошибки перехватываются и записываются в консоль.</p>\n  \n  <p>2. <b>PUT</b>: метод запроса, используемый для обновления существующих данных на сервере. В React вы можете использовать метод <b>axios.put</b>:</p>\n\n  <code>\n  \n  <p>{\"axios.put('/api/data/1', { newData: 'updatedData' })\"}</p>\n\n  <p>{ '.then(response => {' }</p>\n\n  <p>{'console.log(response.data);'}</p>  \n\n  <p>{'})'}</p>\n\n  <p>{'.catch(error => {'}</p>\n\n  <p>{'console.log(error);'}</p>\n\n  <p>{'});'}</p>\n\n  </code>\n\n  <p>В этом примере мы обновляем данные в конечной точке <b>/api/data/1</b>. Мы отправляем полезную нагрузку с новыми данными вторым аргументом в <b>axios.put</b>. Данные ответа записываются в консоль в случае успешного запроса, а любые ошибки перехватываются и записываются в консоль.</p>\n  \n  <p>3. <b>POST</b>: метод запроса, используемый для создания новых данных на сервере. В React вы можете использовать метод <b>axios.post</b>:</p>\n\n  <code>\n  \n  <p>{\"axios.post('/api/data', { newData: 'newData' })\"}</p>\n\n  <p>{'.then(response => {'}</p>\n\n  <p>{'console.log(response.data);'}</p>\n\n  <p>{'})'}</p>  \n\n  <p>{'.catch(error => {'}</p>\n\n  <p>{' console.log(error);'}</p> \n\n  <p>{'});'}</p> \n    \n  </code>  \n\n  <p>В этом примере мы создаем новые данные в конечной точке <b>/api/data</b>. Мы отправляем полезную нагрузку с новыми данными вторым аргументом в <b>axios.post</b>. Данные ответа записываются в консоль в случае успешного запроса, а любые ошибки перехватываются и записываются в консоль.</p>\n  \n  <p>4. <b>DELETE</b>: метод запроса, используемый для удаления существующих данных на сервере. В React вы можете использовать метод <b>axios.delete</b>:</p>\n\n  <code>\n    <p>{\" axios.delete('/api/data/1') \"}</p>\n\n    <p>{'.then(response => { '}</p>\n\n    <p>{'console.log(response.data); '}</p>\n\n    <p>{'}) '}</p>\n\n    <p>{'.catch(error => { '}</p>\n\n    <p>{'console.log(error);'}</p>\n\n    <p>{'});'}</p>\n    \n    </code> \n\n    <p>В этом примере мы удаляем данные по адресу <b>/api/data/1</b>. Если запрос выполнен успешно, то ответные данные будут зарегистрированы в консоли, а любые ошибки будут перехвачены и зарегистрированы в консоли.</p>\n    \n    <p>Для получения дополнительной информации о библиотеке Axios, пожалуйста, посетите их официальный веб-сайт: <a href=\"https://axios-http.com\" target='_blank'>👉🏼 https://axios-http.com</a></p>\n\n\n    </div>\n  )\n}\n\nexport default RuReact_4;","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_4.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_5.js",["1063"],[],"import React from 'react'\n\nfunction RuReact_5() {\n  return (\n    <div>\n      \n      <h1>React Router DOM</h1>\n\n<p>React Router Dom – это популярная библиотека, используемая в приложениях React для управления клиентским маршрутизацией. Она позволяет разработчикам создавать разные маршруты для разных компонентов и рендерить их на основе текущего URL. Это обеспечивает более интуитивный и плавный пользовательский опыт, так как пользователи могут перемещаться по разным страницам и компонентам без необходимости перезагрузки всей страницы.</p>\n\n<p>React Router Dom основан на библиотеке React Router и специально разработан для использования в браузере. Он использует API истории браузера для управления URL-адресом и синхронизации пользовательского интерфейса с текущим URL. Кроме того, он обеспечивает декларативный подход к определению маршрутов, что делает управление сложными приложениями с несколькими маршрутами и вложенными компонентами более простым.</p>\n\n<p>Некоторые из ключевых функций React Router Dom включают:</p>\n\n<p> • Декларативная маршрутизация: вы можете определить свои маршруты как компоненты JSX, что упрощает понимание и управление логикой маршрутизации.</p>\n\n<p> • Вложенные маршруты: вы можете вкладывать маршруты внутри других маршрутов, что позволяет решать более сложные сценарии маршрутизации.</p>\n\n<p> • Параметры маршрута: вы можете определить динамические параметры в своих маршрутах, позволяя передавать данные между компонентами на основе текущего URL.</p>\n\n<p> • Управление историей: React Router Dom предоставляет инструменты для управления историей браузера, позволяя программно перемещаться между страницами и обрабатывать навигацию вперед/назад.</p>\n\n<p> Вот простой пример того, как может использоваться React Router Dom в приложении React: <b>(старая версия)v5</b></p>\n   \n<code>\n  <p>{\"import React from 'react'; \"}</p>\n\n  <p>{\"import { BrowserRouter as Router, Route, Link } from 'react-router-dom'; \"}</p>\n\n  <p>{'const Home = () => <h1>Home</h1>; '}</p>\n\n  <p>{'const About = () => <h1>About</h1>; '}</p>\n\n  <p>{'const App = () => ( '}</p>\n\n  <p>{'<Router>'}</p>\n\n  <p>{'<nav>'}</p>\n\n  <p>{'<ul>'}</p>\n\n  <p>{'<li>'}</p>\n\n  <p>{'<Link to=\"/\">Home</Link> '}</p>\n\n  <p>{'</li> '}</p>\n\n  <p>{'<li>'}</p>\n\n  <p>{'<Link to=\"/about\">About</Link>'}</p>\n\n  <p>{'</li> '}</p>\n\n  <p>{'</ul>'}</p>\n\n  <p>{'</nav>'}</p>\n\n  <p>{'<Route exact path=\"/\" component={Home} />'}</p>\n\n  <p>{'<Route path=\"/about\" component={About} />'}</p>\n\n  <p>{'</Router>'}</p>\n\n  <p>{');'}</p>\n\n  <p>{'export default App;'}</p>\n\n</code>\n\n<p>В этом примере мы импортируем необходимые компоненты из библиотеки React Router Dom (в частности, <b>BrowserRouter, Route и Link</b>). Затем мы определяем два простых компонента для наших домашней и страницы \"О нас\".</p>\n\n<p>Внутри компонента <b>App</b> мы оборачиваем все в компонент <b>Router</b>, который обеспечивает контекст маршрутизации для остальной части приложения. Затем мы определяем простую навигационную панель, используя компонент <b>Link</b>, чтобы перемещаться между нашими двумя страницами.</p>\n\n<p>Наконец, мы определяем два компонента <b>Route</b>, которые отображают компоненты <b>Home</b> и <b>About</b> в зависимости от текущего URL.</p>\n\n<p>React Router Dom 6.4 - это последняя версия библиотеки, выпущенная в феврале 2022 года. Некоторые из новых функций в этой версии включают:</p>\n\n<p>В последней версии (v6) изменились некоторые API и коллекции, поэтому я могу привести новый пример, используя версию React Router Dom 6.4:</p>\n\n<p>Вот пример использования React Router Dom версии 6.4:</p>   \n\n<code>\n  <p>{\"import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom'; \"}</p>\n\n  <p>{'const Home = () => <h1>Home</h1>; '}</p>\n\n  <p>{'const About = () => <h1>About</h1>;'}</p>\n\n  <p>{'const NotFound = () => <h1>404 Not Found</h1>;'}</p>\n\n  <p>{'const App = () => ( '}</p>\n\n  <p>{'<Router> '}</p>\n\n  <p>{'<nav>'}</p>\n\n  <p>{'<ul> '}</p>\n\n  <p>{'<li>'}</p>\n\n  <p>{'<Link to=\"/\">Home</Link> '}</p>\n\n  <p>{'</li> '}</p>\n\n  <p>{'<li>'}</p>\n\n  <p>{'<Link to=\"/about\">About</Link>'}</p>\n\n  <p>{'</li>'}</p>\n\n  <p>{'</ul>'}</p>\n\n  <p>{'</nav>'}</p>\n\n  <p>{'<Routes>'}</p>\n\n  <p>{' <Route path=\"/\" element={<Home />} />'}</p>\n\n  <p>{'<Route path=\"/about\" element={<About />} />'}</p>\n\n  <p>{'<Route path=\"*\" element={<NotFound />} />'}</p>\n\n  <p>{'</Routes>'}</p>\n\n  <p>{'</Router>'}</p>\n\n  <p>{');'}</p>\n\n  <p>{'export default App;'}</p>\n\n</code>\n\n<p>В этом примере мы используем те же основные компоненты из React Router Dom (<b>такие как BrowserRouter, Route, Link</b>), но некоторые из них имеют немного другой синтаксис.</p>\n\n<p>Например, теперь мы используем компонент <b>Routes</b> вместо <b>Switch</b> для группировки нескольких маршрутов. Каждый маршрут теперь представлен элементом <b>Route</b> с параметрами <b>path и element</b>. Параметр <b>path</b> задает шаблон URL для маршрута, а параметр <b>element</b> - компонент, который должен быть отрисован, когда маршрут соответствует.</p>\n\n<p>В этом примере мы также добавили компонент <b>NotFound</b>, который отображается, когда пользователь попадает на несуществующую страницу.</p>\n\n<p>В целом, React Router Dom 6 предоставляет более гибкий и удобный способ обработки маршрутизации в приложениях React.</p>\n\n<p>1. Если вы используете <b>npm</b>, откройте терминал и выполните следующую команду:</p>\n\n<b>npm install react-router-dom</b>\n\n<p>2. Если вы используете <b>yarn</b>, откройте терминал и выполните следующую команду:</p>\n\n<b>yarn add react-router-dom</b>\n\n<p>После установки вы можете импортировать необходимые компоненты из пакета <b>react-router-dom</b>, как показано в приведенных выше примерах.</p>\n\n<p>Для получения дополнительной информации о React Router посетите их официальный веб-сайт: <a href=\"https://reactrouter.com/\" target='_blank' > 👉🏼  https://reactrouter.com/.</a></p>\n\n<p>На веб-сайте вы найдете всеобъемлющее руководство по использованию React Router, включая:</p>\n\n<p>• Обзор React Router и его ключевых концепций</p>\n\n<p>• Инструкции по установке и настройке</p>\n\n<p>• Примеры различных случаев использования и сценариев</p>\n\n<p>• Документация API для каждого из основных компонентов и утилит</p>\n\n<p>• Расширенные темы, такие как серверный рендеринг, разделение кода и вложенные маршруты</p>\n   \n<p>Кроме документации, вы также можете найти ряд полезных ресурсов, таких как форум сообщества, репозиторий GitHub для отчетов об ошибках и запросов функций, а также коллекцию связанных проектов и плагинов.</p>   \n   \n    </div>\n  )\n}\n\nexport default RuReact_5;","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_5.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_6.js",["1064"],[],"import React from 'react'\n\nfunction RuReact_6() {\n  return (\n    <div>\n      <h1>Реакт ссылки (Refs)</h1>\n\n<p>В React, <b>ссылка (ref)</b> - это способ доступа к базовому узлу DOM или экземпляру компонента React отображаемого элемента. Вы можете использовать ссылки, чтобы получить доступ к определенным свойствам или методам компонента, или изменить его поведение.</p>\n\n<p>Вот пример того, как создать ссылку в React:</p>\n\n<code>\n     <p>{\" import React, { useRef } from 'react'; \"}</p>\n\n     <p>{'function TextInput() {'}</p>\n\n     <p>{'const inputRef = useRef(null);'}</p> \n\n     <p>{'const handleClick = () => {'}</p>\n\n     <p>{'inputRef.current.focus(); '}</p>\n\n     <p>{' };'}</p>\n\n     <p>{'return ('}</p>\n\n     <p>{'<div>'}</p>\n\n     <p>{' <input type=\"text\" ref={inputRef} />'}</p>\n\n     <p>{'<button onClick={handleClick}>Focus Input</button>'}</p>\n\n     <p>{'</div>'}</p>\n\n     <p>{' );'}</p>\n\n     <p>{'}'}</p>\n    \n  </code>\n\n  <p>В React <b>ref</b> - это способ получения доступа к базовому узлу DOM или экземпляру компонента React отрендеренного элемента. Вы можете использовать refs, чтобы получить доступ к определенным свойствам или методам компонента или изменить его поведение.</p>\n  \n  <p>Вот пример того, как создать ref в React:</p>\n  \n  <p>В этом примере мы создаем <b>ref</b> с помощью хука <b>useRef</b>. Затем мы передаем <b>ref</b> элементу <b>input</b> с помощью свойства <b>ref</b>.</p>\n  \n  <p>Мы также создаем функцию <b>handleClick</b>, которая использует свойство <b>current</b> у <b>ref</b>, чтобы вызвать метод <b>focus</b> на элементе <b>input</b>. Это позволяет установить фокус на вводе, когда пользователь нажимает кнопку \"Focus Input\".</p>\n  \n  <p>В целом, использование <b>ref</b> может быть мощным инструментом для доступа и управления компонентами в React. Однако важно использовать их с осторожностью и избегать чрезмерной зависимости от императивного кода, так как это может усложнить понимание и поддержку кода.</p>\n  \n  <b>Event Emitter</b>\n\n<p>Event Emitter - это шаблон проектирования, который позволяет объектам в программе взаимодействовать друг с другом, запуская и обрабатывая события. Простыми словами, Event Emitter - это механизм для передачи и получения сообщений в программе.</p>\n\n<p>В JavaScript класс EventEmitter является встроенным модулем, который обеспечивает способ реализации этого шаблона. Вот пример того, как использовать EventEmitter в Node.js:</p>\n\n<code>\n\n  <p>{\"const EventEmitter = require('events');\"}</p>\n\n  <p>{\"class MyEmitter extends EventEmitter {}\"}</p>\n\n  <p>{\"const myEmitter = new MyEmitter();\"}</p>\n\n  <p>{\"myEmitter.on('event', (arg) => {\"}</p>\n\n  <p>{\"console.log('Event triggered with argument:', arg);\"}</p>\n\n  <p>{\"});\"}</p>\n\n  <p>{\"myEmitter.emit('event', 'Hello, world!');\"}</p>\n\n</code>\n\n<p>В этом примере мы создаем пользовательский класс <b>MyEmitter</b>, который расширяет класс <b>EventEmitter</b>. Затем мы создаем экземпляр этого класса и определяем слушатель для события <b>event</b>, используя метод <b>on</b>. Наконец, мы генерируем событие <b>event</b> и передаем строковый аргумент, который вызывает слушатель и записывает аргумент в консоль.</p>\n\n<p>В целом использование эмиттера событий может быть полезным способом реализации шаблона издатель-подписчик в вашем коде, где различные части вашей программы могут общаться друг с другом, не будучи тесно связанными друг с другом. Однако важно использовать этот шаблон с умом и не полагаться слишком сильно на события, так как это может сделать ваш код более сложным для понимания и отладки.</p>\n\n<p><b>В React</b> вы можете использовать шаблон эмиттера событий для связи между различными компонентами в вашем приложении. Это может быть полезно для передачи данных или запуска действий между компонентами, которые не связаны напрямую друг с другом.</p>\n\n<p>Один из способов реализации шаблона эмиттера событий в React - использовать стороннюю библиотеку, такую как <b>eventemitter3 или mitt</b>. Эти библиотеки предоставляют простой API для создания и подписки на события, и могут использоваться как с классовыми, так и с функциональными компонентами с хуками.</p>\n\n<p>Вот пример того, как использовать <b>eventemitter3</b> в компоненте React:</p>\n\n<code>\n\n<p>{\"import React, { useEffect } from 'react'; \"}</p>\n\n<p>{\"import EventEmitter from 'eventemitter3'; \"}</p>\n\n<p>{\" const emitter = new EventEmitter(); \"}</p>\n\n<p>{\"function ComponentA() {\"}</p>\n\n<p>{\" useEffect(() => { \"}</p>\n\n<p>{\"emitter.emit('eventA', { data: 'Hello from ComponentA' });\"}</p>\n\n<p>{\"}, []);\"}</p>\n\n<p>{\"return <div>ComponentA</div>; \"}</p>\n\n<p>{\"} \"}</p>\n\n<p>{\"function ComponentB() {\"}</p>\n\n<p>{\"useEffect(() => {\"}</p>\n\n<p>{\"emitter.on('eventA', handleEventA);  \"}</p>\n\n<p>{\"return () => emitter.off('eventA', handleEventA);\"}</p>\n\n<p>{\" }, []);\"}</p>\n\n<p>{\"const handleEventA = (payload) => {\"}</p>\n\n<p>{\"console.log('Received eventA:', payload.data); \"}</p>\n\n<p>{\" }; \"}</p>\n\n<p>{\"return <div>ComponentB</div>; \"}</p>\n\n<p>{\"}\"}</p>\n\n</code>\n\n<p>В этом примере мы создаем экземпляр <b>EventEmitter, называемый emitter</b>. В <b>ComponentA</b> мы используем хук <b>useEffect</b>, чтобы вызвать событие <b>eventA</b> с некоторыми данными. В <b>ComponentB</b> мы используем хук <b>useEffect</b>, чтобы подписаться на событие <b>eventA</b> и определяем функцию обратного вызова <b>handleEventA</b>, которая записывает данные в консоль.</p>\n\n<p>Когда монтируется ComponentA, оно вызывает событие eventA с некоторыми данными. Когда монтируется ComponentB, он подписывается на событие eventA и начинает прослушивать любые события с этим именем. Когда происходит событие eventA, вызывается handleEventA с данными, и она записывает сообщение в консоль.</p>\n\n<p>В целом, использование шаблона эмиттера событий в React может быть полезным способом реализации коммуникации между компонентами, которые не прямо связаны между собой. Однако важно использовать этот шаблон с умом и не полагаться на него слишком сильно, так как это может сделать ваш код более сложным для понимания и отладки.</p>\n\n<h4>Анимация в React</h4>\n\n<p>В React вы можете добавлять анимации в ваши компоненты, используя различные техники. Анимации могут сделать ваш пользовательский интерфейс более увлекательным и обеспечить визуальную обратную связь пользователю, когда что-то меняется.</p>\n\n<p>Один из популярных способов реализации анимаций в React - это использование CSS-переходов или анимаций. Вы можете добавлять CSS-классы к вашим компонентам, чтобы запускать эти анимации, и использовать проп <b>className</b> в React, чтобы переключать классы на основе состояния компонента.</p>\n\n<p>Вот пример того, как использовать CSS-переходы для анимации кнопки при щелчке:</p>\n\n<code>\n<p>{\"import React, { useState } from 'react';\"}</p> \n\n<p>{\" import './Button.css'; \"}</p>\n\n<p>{\"function Button() {\"}</p>\n\n<p>{\" const [isClicked, setIsClicked] = useState(false); \"}</p>\n\n<p>{\"const handleClick = () => { \"}</p>\n\n<p>{\" setIsClicked(true); \"}</p>\n\n<p>{\" setTimeout(() => setIsClicked(false), 1000); \"}</p>\n\n<p>{\" }; \"}</p>\n\n<p>{\"return (  \"}</p>\n\n<p>{\" <button className={`button ${isClicked ? 'clicked' : ''}`} onClick={handleClick}> \"}</p>\n\n<p>{\"Click me!  \"}</p>\n\n<p>{\"</button>  \"}</p>\n\n<p>{\"); \"}</p>\n\n<p>{\" }\"}</p>\n\n</code>\n\n<p>В этом примере мы определяем компонент с названием <b>Button</b>, который использует хук <b>useState</b>, чтобы отслеживать, была ли нажата кнопка или нет. Когда кнопка нажимается, мы устанавливаем состояние <b>isClicked</b> в значение <b>true</b>, что добавляет класс <b>clicked</b> к кнопке. Затем мы используем <b>setTimeout</b>, чтобы через 1 секунду удалить класс <b>clicked</b>, что запускает переход обратно в исходное состояние.</p>\n\n<p>Мы также определяем файл CSS с названием <b>Button.css</b>, который определяет стили для кнопки и класса <b>clicked</b>:</p>\n\n<code>\n  <p>{'.button {'}</p>\n\n  <p>{'background-color: blue;'}</p>\n\n  <p>{'color: white;'}</p>\n\n  <p>{'padding: 10px 20px;'}</p>\n\n  <p>{'border: none;'}</p>\n\n  <p>{'border-radius: 5px;'}</p>\n\n  <p>{'transition: background-color 0.5s;'}</p>\n\n  <p>{'}'}</p>\n\n  <p>{'.clicked {'}</p>\n\n  <p>{'background-color: red;'}</p>\n\n  <p>{'}'}</p>\n\n</code>\n\n<p>В этом CSS-файле мы определяем стили для кнопки и указываем свойство <b>transition</b> на классе <b>button</b> для анимации изменений свойства <b>background-color</b>. Мы также определяем класс <b>clicked</b>, который изменяет цвет фона на красный, когда он применяется.</p>\n\n<p>Еще один способ реализации анимаций в React - использовать стороннюю библиотеку, такую ​​как <b>react-spring или framer-motion</b>. Эти библиотеки обеспечивают более гибкий API для создания сложных анимаций и могут быть полезны для более продвинутых случаев использования.</p>\n\n<p><b>react-transition-group</b> - это сторонняя библиотека для React, которая предоставляет способ легко добавлять CSS-переходы и анимации к вашим компонентам. Он предоставляет набор компонентов и API для управления жизненным циклом переходов, включая монтирование и демонтаж элементов, добавление и удаление классов и задержку анимаций.</p>\n\n<b>{'npm install react-transition-group'}</b>\n\n<p>Основные компоненты в <b>react-transition-group</b> - это Transition, CSSTransition и TransitionGroup. Вот краткий обзор каждого компонента:</p>\n\n<p>• <b>Transition</b>: Этот компонент определяет основной жизненный цикл перехода, включая состояния входа, введенного, выхода и выведенного. Вы можете использовать этот компонент, чтобы запускать </p>\n\n<p>• <b>CSSTransition</b>: Этот компонент расширяет компонент <b>Transition</b> и добавляет поддержку CSS-переходов и анимаций. Вы можете указать CSS-классы, которые применяются к вашему компоненту в различных стадиях перехода, таких как <b>enter, enter-active, exit и exit-active</b>.</p>\n\n<p>• <b>TransitionGroup</b>: Этот компонент используется для управления набором компонентов <b>Transition or CSSTransition</b>. Он отслеживает монтирование и демонтаж компонентов и может применять различные эффекты перехода к каждому компоненту. </p>\n\n<p>Вот пример использования <b>react-transition-group</b> для добавления анимации появления при монтировании компонента:</p>\n\n<code>\n  <p>{\"import React, { useState } from 'react'; \"}</p>\n\n  <p>{\"import { CSSTransition } from 'react-transition-group'; \"}</p>\n\n  <p>{\"import './FadeIn.css'; \"}</p>\n\n  <p>{\"function FadeIn() { \"}</p>\n\n  <p>{\"const [isMounted, setIsMounted] = useState(false); \"}</p>\n\n  <p>{\"const handleMount = () => setIsMounted(true); \"}</p>\n\n  <p>{\"return ( \"}</p>\n\n  <p>{\"<> \"}</p>\n\n  <p>{\" <button onClick={handleMount}>Mount component</button> \"}</p>\n\n  <p>{'<CSSTransition in={isMounted} timeout={300} classNames=\"fade\"> '}</p>\n\n  <p>{' <div className=\"content\">Hello, world!</div> '}</p>\n\n  <p>{\"</CSSTransition> \"}</p>\n\n  <p>{\" </> \"}</p>\n\n  <p>{\"); \"}</p>\n\n  <p>{\"} \"}</p>\n\n</code>\n\n<p>В этом примере мы определяем компонент с именем <b>FadeIn</b>, который использует хук <b>useState</b> для отслеживания того, был ли компонент смонтирован или нет. Когда кнопка нажимается, мы устанавливаем состояние <b>isMounted</b> в <b>true</b>, что запускает компонент <b>CSSTransition</b> для рендеринга элемента <b>content</b> с эффектом появления. Мы также определяем файл CSS с именем <b>FadeIn.css</b>, который определяет стили и анимацию для эффекта появления:</p>\n\n<code>\n  <p>{\" .fade-enter { \"}</p>\n\n  <p>{\"opacity: 0; \"}</p>\n\n  <p>{\"} \"}</p>\n\n  <p>{\".fade-enter-active { \"}</p>\n\n  <p>{\" opacity: 1; \"}</p>\n\n  <p>{\" transition: opacity 300ms ease-in; \"}</p>\n\n  <p>{\"} \"}</p>\n\n  <p>{\".fade-exit { \"}</p>\n\n  <p>{\"opacity: 1; \"}</p>\n\n  <p>{\"} \"}</p>\n\n  <p>{\".fade-exit-active { \"}</p>\n\n  <p>{\"opacity: 0; \"}</p>\n  \n  <p>{\"transition: opacity 300ms ease-out; \"}</p>\n\n  <p>{\"}\"}</p>\n\n</code>\n\n<p>В этом файле CSS мы определяем классы для разных стадий перехода. Когда компонент входит, у него непрозрачность равна 0 (<b>fade-enter</b>), и он переходит к непрозрачности 1 за 300 мс (<b>fade-enter-active</b>). Когда компонент выходит, у него непрозрачность равна 1 (<b>fade-exit</b>), и он переходит к непрозрачности 0 за 300 мс (<b>fade-exit-active</b>).</p>\n\n<p>В целом, добавление анимаций к вашим компонентам React может сделать ваш интерфейс более привлекательным и обеспечить визуальную обратную связь пользователю. Используя CSS-переходы или анимации, или стороннюю библиотеку, вы можете легко добавлять анимации к своим компонентам и делать их более динамичными.</p>\n\n    </div>\n  )\n}\n\nexport default RuReact_6;","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_6.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_7.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_7.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_8.js",["1065"],[],"import React from 'react'\n\nfunction RuReact_8() {\n  return (\n    <div>\n      <h1>Redux Thunk</h1>\n\n<p>Redux Thunk - это библиотека промежуточного программного обеспечения для Redux, которая позволяет вам писать асинхронную логику, взаимодействующую с хранилищем Redux. Он позволяет вам диспетчеризовать действия, которые содержат асинхронный код, такой как запросы API или другие побочные эффекты, обернув ваши создатели действий в функцию, которая возвращает другую функцию.</p>\n\n<p>Вот пример того, как Redux Thunk может быть использован в приложении React:</p>\n    \n<code>\n        \n        <p>{\"// actions.js \"}</p>\n\n        <p>{\"import axios from 'axios'; \"}</p>\n\n        <p>{\"export const fetchUserRequest = () => ({ \"}</p>\n\n        <p>{\"type: 'FETCH_USER_REQUEST', \"}</p>\n\n        <p>{\"}); \"}</p>\n\n        <p>{\"export const fetchUserSuccess = (user) => ({ \"}</p>\n\n        <p>{\" type: 'FETCH_USER_SUCCESS', \"}</p>\n\n        <p>{\"payload: user, \"}</p>\n\n        <p>{\"}); \"}</p>\n\n        <p>{\"export const fetchUserError = (error) => ({ \"}</p>\n\n        <p>{\"type: 'FETCH_USER_ERROR', \"}</p>\n\n        <p>{\"payload: error, \"}</p>\n\n        <p>{\"}); \"}</p>\n        \n        <p>{\"export const fetchUser = (userId) => { \"}</p>\n\n        <p>{\"return (dispatch) => { \"}</p>\n\n        <p>{\"dispatch(fetchUserRequest()); \"}</p>\n\n        <p>{\"axios.get(` https://jsonplaceholder. typicode.com/users/${userId} `) \"}</p>\n\n        <p>{\".then((response) => {\"}</p>\n\n        <p>{\"const user = response.data;\"}</p>\n\n        <p>{\" dispatch(fetchUserSuccess(user));\"}</p>\n\n        <p>{\"})\"}</p>\n\n        <p>{\".catch((error) => {\"}</p>\n\n        <p>{\" dispatch(fetchUserError(error.message));\"}</p>\n\n        <p>{\"});\"}</p>\n\n        <p>{\"};\"}</p>\n\n        <p>{\"};\"}</p>\n\n      </code>\n\n      <p>В приведенном выше примере мы определяем три создателя действий: <b>fetchUserRequest, fetchUserSuccess и fetchUserError</b>. Мы также определяем создателя действий <b>fetchUser</b>, который возвращает функцию вместо объекта действия. Эта функция принимает аргументом <b>dispatch</b>, который является функцией <b>dispatch</b> хранилища Redux.</p>\n     \n      <p>Внутри функции <b>fetchUser</b> мы диспетчеризуем действие <b>fetchUserRequest</b>, которое устанавливает состояние <b>isLoading</b> в значение <b>true</b>. Затем мы делаем вызов API, используя Axios, и диспетчеризуем действие <b>fetchUserSuccess</b> или <b>fetchUserError</b> в зависимости от ответа API. Эти действия обновляют хранилище Redux полученными данными или сообщением об ошибке соответственно.</p>\n    \n      <p>Чтобы использовать этот создатель действий в компоненте, мы можем импортировать его и передать в <b>dispatch</b> следующим образом:</p>    \n    \n      <code>\n     \n     <p>{\"// MyComponent.js\"}</p>\n\n     <p>{\"import React, { useEffect } from 'react';\"}</p>\n\n     <p>{\"import { useDispatch, useSelector } from 'react-redux'; \"}</p>\n\n     <p>{\" import { fetchUser } from './actions'; \"}</p>\n\n     <p>{\" const MyComponent = ({ userId }) => { \"}</p>\n\n     <p>{\"const dispatch = useDispatch(); \"}</p>\n\n     <p>{\" const user = useSelector(state => state.user.data); \"}</p>\n\n     <p>{\" const isLoading = useSelector(state => state.user.isLoading); \"}</p>\n\n     <p>{\"const error = useSelector(state => state.user.error); \"}</p>\n\n     <p>{\"useEffect(() => { \"}</p>\n\n     <p>{\" dispatch(fetchUser(userId));\"}</p>\n\n     <p>{\"}, [dispatch, userId]); \"}</p>\n\n     <p>{\" if (isLoading) { \"}</p>\n\n     <p>{\" return <div>Loading...</div>; \"}</p>\n\n     <p>{\" } \"}</p>\n\n     <p>{\"if (error) {  \"}</p>\n\n     <p>{\"return <div>Error: {error}</div>;  \"}</p>\n\n     <p>{\" } \"}</p>\n\n     <p>{\" return (\"}</p>\n\n     <p>{\" <div> \"}</p>\n\n     <p>{\"  <h1>{user.name}</h1> \"}</p>\n\n     <p>{\"<p>{user.email}</p> \"}</p>\n     \n     <p>{\" <p>{user.phone}</p> \"}</p>\n     \n     <p>{\"</div> \"}</p>\n\n     <p>{\"  ); \"}</p>\n\n     <p>{\" }; \"}</p>\n     \n     </code>\n\n     <p>В приведенном выше примере мы используем хуки <b>useDispatch</b> и <b>useSelector</b> из библиотеки react-redux для взаимодействия с хранилищем Redux. Мы диспетчеризуем создатель действий <b>fetchUser</b> в хуке <b>useEffect</b>, который будет вызван при монтировании компонента. Мы также используем <b>useSelector</b>, чтобы извлечь соответствующие данные из хранилища Redux, такие как данные пользователя, флаги <b>isLoading</b> и <b>error</b>.</p>\n     \n     <p>В целом, Redux Thunk - это полезная библиотека промежуточного программного обеспечения для Redux, которая позволяет писать асинхронную логику, взаимодействующую с хранилищем Redux. Он может помочь упростить ваш код и сделать его более понятным в отношении асинхронного поведения в вашем приложении React.</p>\n     \n     <h3>Redux-Observable</h3>\n    \n    <p>Redux-Observable - это промежуточное программное обеспечение для Redux, которое позволяет использовать реактивное программирование в приложениях Redux. Он позволяет разработчикам обрабатывать сложные асинхронные действия и события в декларативном, компонуемом и легко тестируемом способе с использованием RxJS, библиотеки для реактивного программирования.</p>\n    \n    <p>С помощью Redux-Observable разработчики могут определять \"эпики\", которые являются функциями, прослушивающими определенные действия и затем реагирующими на них с потоком новых действий. Эти эпики являются наблюдаемыми объектами, которые получают поток событий и могут декларативно преобразовывать, фильтровать или объединять их.</p>\n    \n    <p>Вот пример того, как использовать Redux-Observable:</p>\n\n    <code>\n<p>{\"import { createStore, applyMiddleware } from 'redux'; \"}</p>\n\n<p>{\"import { createEpicMiddleware, combineEpics } from 'redux-observable'; \"}</p>\n\n<p>{\"import { ajax } from 'rxjs/ajax'; \"}</p>\n\n<p>{\"import { mergeMap, map, catchError } from 'rxjs/operators'; \"}</p>\n\n<p>{\"const pingEpic = action$ =>\"}</p>\n\n<p>{\"action$.ofType('PING')\"}</p>\n\n<p>{\".mergeMap(action =>\"}</p>\n\n<p>{\"ajax.getJSON('/api/ping')\"}</p>\n\n<p>{\".map(response => ({ type: 'PONG', payload: response })) \"}</p>\n\n<p>{\".catch(error => ({ type: 'PING_ERROR', payload: error.message }))\"}</p>\n\n<p>{\"); \"}</p>\n\n<p>{\"const rootEpic = combineEpics(\"}</p>\n\n<p>{\"pingEpic, \"}</p>\n\n<p>{\"// more epics... \"}</p>\n\n<p>{\"); \"}</p>\n\n<p>{\"const epicMiddleware = createEpicMiddleware(); \"}</p>\n\n<p>{\"const store = createStore(\"}</p>\n\n<p>{\"reducer, \"}</p>\n\n<p>{\"applyMiddleware(epicMiddleware) \"}</p>\n\n<p>{\");\"}</p>\n\n<p>{\"epicMiddleware.run(rootEpic);\"}</p>\n\n</code>\n\n<p>В этом примере мы определяем эпик с названием <b>pingEpic</b>, который ожидает действие типа \"PING\", а затем отправляет AJAX-запрос на сервер для его пинга. Если запрос выполнен успешно, он диспетчит действие типа \"PONG\" с ответом в качестве полезной нагрузки. Если запрос не удался, он диспетчит действие типа \"PING_ERROR\" с сообщением об ошибке в качестве полезной нагрузки.</p>\n\n<p>Затем мы объединяем все наши эпики в один <b>rootEpic</b> и создаем экземпляр <b>createEpicMiddleware()</b>, чтобы использовать его в качестве промежуточного программного обеспечения в нашем хранилище Redux. Наконец, мы применяем промежуточное программное обеспечение к хранилищу и запускаем корневой эпик с помощью <b>epicMiddleware.run(rootEpic)</b>.</p>\n\n<p>В целом, Redux-Observable - это мощный инструмент для управления сложными асинхронными действиями и событиями в приложениях Redux. Он обеспечивает гибкий и декларативный подход к управлению асинхронным поведением, используя концепции реактивного программирования.</p>\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    </div>\n  )\n}\n\nexport default RuReact_8;","/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_8.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/RuReact_9.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/lang/AmReact_9.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/Services.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/Weather.js",[],[],"/home/artashes/Desktop/codeex/codeex/src/pages/keyboard.js",[],[],"/home/artashes/Desktop/codeexx/src/index.js",[],[],"/home/artashes/Desktop/codeexx/src/App.js",["1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087"],[],"import React, { Component } from 'react';\nimport { BrowserRouter, Routes, Route, Outlet, Navigate } from 'react-router-dom';\nimport Wrapper from './components/Wrapper';\nimport Home from './pages/Home';\nimport About from './pages/About';\n//import Contact from './pages/Contact';\nimport NotFound from './pages/NotFound';\nimport JavaScript from './pages/JavaScript';\nimport Html from './pages/Html';\nimport ReactJS from './pages/ReactJS';\nimport JavaScript5 from './pages/JavaScript5';\nimport JavaScript6 from './pages/JavaScript6';\nimport JsEs5_1 from './pages/JSES5_1';\nimport JsEs5_2 from './pages/JSES5_2';\nimport JsEs5_3 from './pages/JsEs5_3';\nimport JsEs5_4 from './pages/JsEs5_4';\nimport JsEs5_5 from './pages/JsEs5_5';\nimport JsEs5_6 from './pages/JsEs5_6';\nimport JsEs5_7 from './pages/JsEs5_7';\nimport JsEs5_8 from './pages/JsEs5_8';\nimport JsEs5_9 from './pages/JsEs5_9';\nimport Html_2 from './pages/Html_2';\nimport Html_3 from './pages/Html_3';\nimport Html_1 from './pages/Html_1';\nimport Jquery from './pages/Jquery'; \nimport React_1 from './pages/React_1';\nimport React_2 from './pages/React_2';\nimport React_3 from './pages/React_3';\nimport React_4 from './pages/React_4';\nimport React_5 from './pages/React_5';\nimport React_6 from './pages/React_6';\nimport React_7 from './pages/React_7';\nimport React_8 from './pages/React_8';\nimport React_9 from './pages/React_9';\nimport JsEs5_10 from './pages/JsEs5_10';\nimport Services from './pages/Services';\nimport Weather from './pages/Weather';\nimport Keyboard from './pages/keyboard';\n \n \n \n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Routes>\n        <Route path='*' element ={<Navigate to= '/not-found'/>} />\n          \n          <Route path ='/' element={<Wrapper/>} >\n            \n            <Route index element={<Home/>} />\n              \n            <Route path ='services' element={<Services/>} />\n            <Route index element={<Services/>} />\n              <Route path ='weather' element={<Weather/>} />\n              <Route path='keyboard' element= {<Keyboard/> }/>\n               \n            \n           \n           \n            <Route path ='javascript' element={<Outlet/>}>\n              <Route index element={<JavaScript/>} />\n            </Route>\n            <Route path='html' element ={<Outlet />}>\n              <Route index element= {<Html/>} />\n            </Route>\n            <Route path='reactjs' element ={<Outlet />}>\n              <Route index element= {<ReactJS/>} />\n            </Route>\n           <Route path ='about' element={<About/>} />\n           <Route path ='javascript5' element={<Outlet/>}>\n              <Route index element={<JavaScript5/>} />\n            </Route>\n            <Route path ='es5_1' element={<Outlet/>}>\n              <Route index element={<JsEs5_1/>} />\n            </Route>\n            <Route path ='es5_2' element={<Outlet/>}>\n              <Route index element={<JsEs5_2/>} />\n            </Route>\n            <Route path ='es5_3' element={<Outlet/>}>\n              <Route index element={<JsEs5_3/>} />\n            </Route>\n            <Route path ='es5_4' element={<Outlet/>}>\n              <Route index element={<JsEs5_4/>} />\n            </Route>\n            <Route path ='es5_5' element={<Outlet/>}>\n              <Route index element={<JsEs5_5/>} />\n            </Route>\n            <Route path ='es5_6' element={<Outlet/>}>\n              <Route index element={<JsEs5_6/>} />\n            </Route>\n            <Route path ='es5_7' element={<Outlet/>}>\n              <Route index element={<JsEs5_7/>} />\n            </Route>\n            <Route path ='es5_8' element={<Outlet/>}>\n              <Route index element={<JsEs5_8/>} />\n            </Route>\n            <Route path ='es5_9' element={<Outlet/>}>\n              <Route index element={<JsEs5_9/>} />\n            </Route>\n            <Route path ='es5_10' element={<Outlet/>}>\n              <Route index element={<JsEs5_10/>} />\n            </Route>\n            <Route path ='javascript6' element={<Outlet/>}>\n              <Route index element={<JavaScript6/>} />\n            </Route>\n            <Route index element={<Html/>} />\n              <Route path ='html_1' element={<Outlet/>}>\n              <Route index element={<Html_1/>} />\n            </Route>\n            <Route path ='html_2' element={<Outlet/>}>\n            <Route index element={<Html_2/>} />\n            </Route>\n            <Route path ='html_3' element={<Outlet/>}>\n            <Route index element={<Html_3/>} />\n            </Route>\n            <Route path ='jquery' element ={<Jquery/>} />\n            <Route index element ={<Jquery/>}/>\n            \n            <Route index element={<ReactJS/>} />\n              <Route path ='react_1' element={<React_1/>}>\n              </Route>\n              <Route index element={<ReactJS/>} />\n              <Route path ='react_2' element={<React_2/>}>\n              </Route>\n              <Route index element={<ReactJS/>} />\n              <Route path ='react_3' element={<React_3/>}>\n              </Route>\n\n              <Route index element={<ReactJS/>} />\n              <Route path ='react_4' element={<React_4/>}>\n              </Route>\n\n              <Route index element={<ReactJS/>} />\n              <Route path ='react_5' element={<React_5/>}>\n              </Route>\n              \n              <Route index element={<ReactJS/>} />\n              <Route path ='react_6' element={<React_6/>}>\n              </Route>\n              \n              <Route index element={<ReactJS/>} />\n              <Route path ='react_7' element={<React_7/>}>\n              </Route>\n              \n              <Route index element={<ReactJS/>} />\n              <Route path ='react_8' element={<React_8/>}>\n              </Route>\n\n              <Route index element={<ReactJS/>} />\n              <Route path ='react_9' element={<React_9/>}>\n              </Route>\n          {/* <Route path ='contact' element={<Contact/>} />*/}\n          </Route> \n          <Route path = '/not-found' element = {<NotFound/>} />\n        </Routes>\n        \n      </BrowserRouter>\n    );\n  }\n}\n\n\n \n\nexport default App;","/home/artashes/Desktop/codeexx/src/reportWebVitals.js",[],[],"/home/artashes/Desktop/codeexx/src/components/Wrapper.js",["1088"],[],"/home/artashes/Desktop/codeexx/src/pages/Home.js",[],[],"/home/artashes/Desktop/codeexx/src/pages/About.js",[],[],"/home/artashes/Desktop/codeexx/src/pages/NotFound.js",[],[],"/home/artashes/Desktop/codeexx/src/pages/JavaScript.js",[],[],"/home/artashes/Desktop/codeexx/src/pages/Html.js",[],[],"/home/artashes/Desktop/codeexx/src/pages/ReactJS.js",[],[],"/home/artashes/Desktop/codeexx/src/pages/JavaScript5.js",[],[],"/home/artashes/Desktop/codeexx/src/pages/JavaScript6.js",["1089","1090"],[],"/home/artashes/Desktop/codeexx/src/pages/JSES5_1.js",["1091","1092"],[],"import React,{useState} from 'react'\nimport RuEs5_1 from '../lang/RuEs5_1';\nimport AmEs5_1 from '../lang/AmEs5_1';\n\n\nfunction JsEs5_1() {\n   \n  const [language, setLanguage] = useState('en'); // по умолчанию язык выбран английский\n\n  const handleEnglishClick = () => {\n    setLanguage('en');\n  };\n\n  const handleRussianClick = () => {\n    setLanguage('ru');\n  };\n\n  const handleArmenianClick = () => {\n    setLanguage('am');\n  };\n\n  return (\n    <div className='java-script'>\n    <div>\n        <button onClick={handleEnglishClick}>English</button>\n        <button onClick={handleRussianClick}>Русский</button>\n        <button onClick={handleArmenianClick}>Հայերեն</button>\n      </div>\n {language === 'en' && (\n        <div>\n          <h1>JavaScript</h1>\n          \n      <p>\n      JavaScript was created in 1995 by Brendan Eich while he was working at Netscape Communications Corporation. \n      The language was originally called Mocha, but was later renamed to LiveScript before finally being named JavaScript. \n      The name change was mainly due to marketing reasons and to capitalize on the popularity of Java at the time. \n      Brendan Eich is an American technologist and programmer who has worked for companies like Mozilla, Netscape, and Brave Software. \n      He is considered to be the creator of JavaScript and has made significant contributions to other programming languages as well.\n      </p>\n      <h3>ECMAScript defines 7 data types:</h3>\n      <ul>\n        <li>Number: represents numeric values, including integers and floating-point numbers. Examples: 1, 3.14, -42.</li>\n        <li>String: represents textual data, enclosed in single or double quotes. Examples: \"hello\", 'world', \"123\".</li>\n        <li>Boolean: represents a logical entity and can have only two values: true or false. Examples: true, false.</li>\n        <li>Undefined: represents a variable that has been declared but has not been assigned a value. Examples: var x; console.log(x); // Output: undefined</li>\n        <li>Null: represents the intentional absence of any object value. Examples: var x = null; console.log(x); // Output: null</li>\n        <li>Symbol: represents a unique identifier that is not exposed to the calling code. Example: const sym1 = Symbol('foo');</li>\n        <li>Object: represents a collection of related data and/or functionality. Examples: var obj = {'{'} name: \"John\", age: 30 {'}'}; var arr = [1, 2, 3];</li>\n      </ul>\n      <h2>Boolean Data Type</h2>\n      <p>The Boolean data type has only two values: true and false. It is commonly used in comparison operations using the following operators:</p>\n      <ul>\n        <li>=== and ==</li>\n        <li>{'>'} and {'<'}=</li>\n        <li>{'>='} and {'<'}=</li>\n      </ul>\n      <p>Examples:</p>\n      <ul>\n        <li>10 {'<'} 16 == true</li>\n        <li>16 {'>'} 10 == false</li>\n      </ul>\n      <h2>Boolean Operators</h2>\n      <ul>\n        <li>NOT (!)</li>\n        <li>AND (&&)</li>\n        <li>OR (||)</li>\n      </ul>\n      <p>When evaluating a condition, the Boolean data type is used. The following values are converted to false: 0 and an empty string. The following values are converted to true: all other numbers and non-empty strings.</p>\n      <h3>Examples:</h3>\n      <p>5 && 6 // 6</p>\n  <p>6 && 0 // 0</p>\n  <p>true && false // false</p>\n  <p>5 || 6 // 5</p>\n  <p>0 || false // false</p>\n  <p>false || true // true</p>\n  <p>6 || 7 // 6</p>\n  <p>0 || false // false</p>\n  <p>false || true // true</p>\n  <p>50 && 6 // 6</p>\n  <p>10 && 0 // 0</p>\n  <p>'Hello' && 'World'// \"World\"</p>\n  <p>''hello'' && '' '' // \" \"</p>\n  <p>!true // false</p>\n  <h3>Expressions and Statements</h3>\n  <p>These are examples of expressions and operators in JavaScript. An expression is a combination of values, variables, operators, that can be evaluated to some value. Expressions can be used in other expressions or in statements.</p>\n<p>Operators such as *, +, etc., are used to create expressions. The first three lines show examples of expressions with different data types: numbers, strings, and boolean values.</p>\n<p>Operators can be used in the form of operator expressions, which are part of operators. The next three lines show examples of operator expressions, which are operators.</p>\n<p>Each operator expression ends with an operator (;), which makes it a statement.</p>\n  <ul>\n    <li><strong>Expression:</strong> 8 * 3 + 2</li>\n    <li><strong>Expression:</strong> \"Hello, there!\"</li>\n    <li><strong>Expression:</strong> false</li>\n    <li><strong>Statement:</strong> 8 * 3 + 2;</li>\n    <li><strong>Statement:</strong> \"Hello, there!\";</li>\n    <li><strong>Statement:</strong> false;</li>\n  </ul>\n  <h2>JavaScript Special Values and Functions</h2>\n  <h5>NaN</h5>\n  <p>NaN stands for \"Not a Number\" and is a special value in JavaScript that represents an undefined or unrepresentable value resulting from an arithmetic operation. For example, dividing zero by zero will result in NaN.</p>\n  <h5>typeof</h5>\n  <p>typeof is a unary operator in JavaScript that returns a string indicating the data type of an operand. For example, typeof \"hello\" will return \"string\" and typeof 42 will return \"number\".</p>\n  <h5>isNaN()</h5>\n  <p>isNaN() is a global function in JavaScript that returns true if the argument is NaN (Not a Number), and false otherwise. For example, isNaN(\"hello\") will return true, and isNaN(42) will return false.</p>\n  <h5>isFinite()</h5>\n  <p>isFinite() is a global function in JavaScript that returns true if the argument is a finite number, and false otherwise. For example, isFinite(42) will return true, and isFinite(Infinity) will return false.</p>\n  <h2>Variables</h2>\n<ul>\n  <li>Declaration of variables (a-A, $, _)</li>\n  <ul>\n    <li><code>var studentName;</code></li>\n    <li><code>var firstName, lastName, age;</code></li>\n  </ul>\n  <li>Declaration and assignment of variables</li>\n  <ul>\n    <li><code>var carModel = \"Tesla\";</code></li>\n    <li><code>var carModel = \"Tesla\", year = 2022, isElectric = true;</code></li>\n  </ul>\n  <li>Usage of variables</li>\n  <ul>\n    <li><code>var quantity = 5;</code></li>\n    <li><code>quantity = quantity + 3;</code></li>\n    <li><code>quantity += 2;</code></li>\n  </ul>\n</ul>\n<h2>Null and Undefined</h2>\n  <ul>\n    <li>Null is a special value in JavaScript that represents the absence of any object value. It is a primitive value and represents a deliberate non-value or empty value. It is often used to indicate that a variable has no value or that a function returns no value.</li>\n    <li>Undefined is a value that a variable can have if it has not been assigned a value or if it has been explicitly assigned the value undefined. It is also a primitive value in JavaScript.</li>\n    <li>The typeof operator is used to determine the type of a value. If the value is undefined, typeof returns the string \"undefined\". If the value is null, typeof returns the string \"object\". This is a known bug in JavaScript that has existed since the language was first created.</li>\n    <li>Null and undefined are often confused with each other because they both represent the absence of a value. However, they are not the same thing. null represents a deliberate absence of a value, while undefined represents an accidental absence of a value.</li>\n    <li>The == operator in JavaScript performs type coercion, which means that it will try to convert values of different types to a common type before comparing them. When comparing null and undefined with ==, the result is true because they are both considered falsy values.</li>\n    <li>The === operator in JavaScript performs a strict comparison that does not perform type coercion. When comparing null and undefined with ===, the result is false because they are not the same type of value.</li>\n    <li>The parseInt, parseFloat, and Number functions are used to convert a string to a number. When passed the value null, all three functions return NaN, which stands for \"Not a Number\". This is because null is not a valid number and cannot be converted to a number.</li>\n  </ul>\n  </div>\n     )}\n      {language === 'ru' && (\n        <div>\n          <RuEs5_1 />\n        </div>\n      )}\n      {language === 'am' && (\n        <div>\n          <AmEs5_1 />\n        </div>\n      )}\n    \n    </div>\n  )\n}\n\n\n\n\nexport default   JsEs5_1;","/home/artashes/Desktop/codeexx/src/pages/JSES5_2.js",["1093","1094"],[],"/home/artashes/Desktop/codeexx/src/pages/JsEs5_3.js",["1095","1096"],[],"/home/artashes/Desktop/codeexx/src/pages/JsEs5_4.js",["1097","1098"],[],"/home/artashes/Desktop/codeexx/src/pages/JsEs5_5.js",["1099","1100"],[],"/home/artashes/Desktop/codeexx/src/pages/JsEs5_6.js",["1101","1102","1103","1104"],[],"/home/artashes/Desktop/codeexx/src/pages/JsEs5_7.js",["1105","1106"],[],"/home/artashes/Desktop/codeexx/src/pages/JsEs5_8.js",["1107","1108"],[],"/home/artashes/Desktop/codeexx/src/pages/JsEs5_9.js",["1109","1110"],[],"/home/artashes/Desktop/codeexx/src/pages/Html_2.js",["1111","1112","1113"],[],"/home/artashes/Desktop/codeexx/src/pages/Html_3.js",["1114","1115"],[],"/home/artashes/Desktop/codeexx/src/pages/Html_1.js",["1116","1117","1118","1119"],[],"/home/artashes/Desktop/codeexx/src/pages/Jquery.js",["1120"],[],"/home/artashes/Desktop/codeexx/src/pages/React_1.js",["1121","1122","1123","1124","1125","1126"],[],"/home/artashes/Desktop/codeexx/src/pages/React_2.js",["1127","1128"],[],"/home/artashes/Desktop/codeexx/src/pages/React_3.js",["1129","1130","1131","1132"],[],"/home/artashes/Desktop/codeexx/src/pages/React_4.js",["1133","1134"],[],"/home/artashes/Desktop/codeexx/src/pages/React_5.js",["1135","1136","1137"],[],"/home/artashes/Desktop/codeexx/src/pages/React_6.js",["1138","1139","1140"],[],"/home/artashes/Desktop/codeexx/src/pages/React_7.js",["1141","1142"],[],"/home/artashes/Desktop/codeexx/src/pages/React_8.js",["1143","1144","1145"],[],"/home/artashes/Desktop/codeexx/src/pages/React_9.js",["1146","1147"],[],"/home/artashes/Desktop/codeexx/src/pages/JsEs5_10.js",["1148","1149"],[],"/home/artashes/Desktop/codeexx/src/pages/Services.js",[],[],"/home/artashes/Desktop/codeexx/src/pages/Weather.js",[],[],"/home/artashes/Desktop/codeexx/src/pages/keyboard.js",[],[],"/home/artashes/Desktop/codeexx/src/components/Header.js",[],[],"/home/artashes/Desktop/codeexx/src/components/Navigation.js",["1150","1151"],[],"/home/artashes/Desktop/codeexx/src/components/Features.js",[],[],"/home/artashes/Desktop/codeexx/src/components/Courses.js",[],[],"/home/artashes/Desktop/codeexx/src/components/Banner.js",[],[],"/home/artashes/Desktop/codeexx/src/components/AboutForm.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmEs6.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuEs6.js",["1152","1153"],[],"/home/artashes/Desktop/codeexx/src/lang/RuEs5_1.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmEs5_1.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuEs5_2.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmEs5_2.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuEs5_3.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmEs5_3.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuEs5_4.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmEs5_4.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuEs5_5.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmEs5_5.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuEs5_6.js",["1154","1155"],[],"/home/artashes/Desktop/codeexx/src/lang/AmEs5_6.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuEs5_7.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmEs5_7.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuEs5_8.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmEs5_8.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuEs5_9.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmEs5_9.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmHtml_2.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuHtml_2.js",["1156"],[],"/home/artashes/Desktop/codeexx/src/lang/AmHtml_3.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuHtml_3.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmHtml_1.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuHtml_1.js",["1157","1158"],[],"/home/artashes/Desktop/codeexx/src/lang/AmJquery.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuJquery.js",["1159"],[],"/home/artashes/Desktop/codeexx/src/lang/RuReact_1.js",["1160","1161","1162","1163"],[],"/home/artashes/Desktop/codeexx/src/lang/AmReact_1.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuReact_2.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmReact_2.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuReact_3.js",["1164","1165"],[],"/home/artashes/Desktop/codeexx/src/lang/AmReact_3.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuReact_4.js",["1166"],[],"/home/artashes/Desktop/codeexx/src/lang/AmReact_4.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuReact_5.js",["1167"],[],"/home/artashes/Desktop/codeexx/src/lang/AmReact_5.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuReact_6.js",["1168"],[],"/home/artashes/Desktop/codeexx/src/lang/AmReact_6.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuReact_7.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmReact_7.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuReact_8.js",["1169"],[],"/home/artashes/Desktop/codeexx/src/lang/AmReact_8.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuReact_9.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmReact_9.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/RuEs5_10.js",[],[],"/home/artashes/Desktop/codeexx/src/lang/AmEs5_10.js",[],[],{"ruleId":"1170","severity":1,"message":"1171","line":76,"column":37,"nodeType":"1172","messageId":"1173","endLine":76,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1174","line":79,"column":37,"nodeType":"1172","messageId":"1173","endLine":79,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1175","line":82,"column":37,"nodeType":"1172","messageId":"1173","endLine":82,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1176","line":85,"column":37,"nodeType":"1172","messageId":"1173","endLine":85,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1177","line":88,"column":37,"nodeType":"1172","messageId":"1173","endLine":88,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1178","line":91,"column":37,"nodeType":"1172","messageId":"1173","endLine":91,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1179","line":94,"column":37,"nodeType":"1172","messageId":"1173","endLine":94,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1180","line":97,"column":37,"nodeType":"1172","messageId":"1173","endLine":97,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1181","line":100,"column":37,"nodeType":"1172","messageId":"1173","endLine":100,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1182","line":103,"column":37,"nodeType":"1172","messageId":"1173","endLine":103,"endColumn":48},{"ruleId":"1170","severity":1,"message":"1183","line":110,"column":37,"nodeType":"1172","messageId":"1173","endLine":110,"endColumn":46},{"ruleId":"1170","severity":1,"message":"1184","line":113,"column":35,"nodeType":"1172","messageId":"1173","endLine":113,"endColumn":44},{"ruleId":"1170","severity":1,"message":"1185","line":116,"column":35,"nodeType":"1172","messageId":"1173","endLine":116,"endColumn":44},{"ruleId":"1170","severity":1,"message":"1186","line":122,"column":47,"nodeType":"1172","messageId":"1173","endLine":122,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1187","line":125,"column":47,"nodeType":"1172","messageId":"1173","endLine":125,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1188","line":128,"column":47,"nodeType":"1172","messageId":"1173","endLine":128,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1189","line":132,"column":47,"nodeType":"1172","messageId":"1173","endLine":132,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1190","line":136,"column":47,"nodeType":"1172","messageId":"1173","endLine":136,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1191","line":140,"column":47,"nodeType":"1172","messageId":"1173","endLine":140,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1192","line":144,"column":47,"nodeType":"1172","messageId":"1173","endLine":144,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1193","line":148,"column":47,"nodeType":"1172","messageId":"1173","endLine":148,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1194","line":152,"column":47,"nodeType":"1172","messageId":"1173","endLine":152,"endColumn":57},{"ruleId":"1195","severity":1,"message":"1196","line":2,"column":8,"nodeType":"1197","messageId":"1198","endLine":2,"endColumn":14},{"ruleId":"1199","severity":1,"message":"1200","line":68,"column":1,"nodeType":"1201","messageId":"1202","endLine":97,"endColumn":20},{"ruleId":"1199","severity":1,"message":"1200","line":98,"column":11,"nodeType":"1201","messageId":"1202","endLine":107,"endColumn":4},{"ruleId":"1203","severity":1,"message":"1204","line":428,"column":9,"nodeType":"1205","messageId":"1206","endLine":428,"endColumn":89},{"ruleId":"1203","severity":1,"message":"1204","line":460,"column":11,"nodeType":"1205","messageId":"1206","endLine":460,"endColumn":91},{"ruleId":"1170","severity":1,"message":"1207","line":111,"column":11,"nodeType":"1172","messageId":"1173","endLine":111,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1208","line":116,"column":11,"nodeType":"1172","messageId":"1173","endLine":116,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1209","line":219,"column":11,"nodeType":"1172","messageId":"1173","endLine":219,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1210","line":224,"column":11,"nodeType":"1172","messageId":"1173","endLine":224,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1211","line":273,"column":11,"nodeType":"1172","messageId":"1173","endLine":273,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1212","line":278,"column":11,"nodeType":"1172","messageId":"1173","endLine":278,"endColumn":22},{"ruleId":"1213","severity":1,"message":"1214","line":263,"column":22,"nodeType":"1205","messageId":"1215","endLine":263,"endColumn":23,"suggestions":"1216"},{"ruleId":"1213","severity":1,"message":"1217","line":263,"column":26,"nodeType":"1205","messageId":"1215","endLine":263,"endColumn":27,"suggestions":"1218"},{"ruleId":"1170","severity":1,"message":"1219","line":290,"column":11,"nodeType":"1172","messageId":"1173","endLine":290,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1220","line":295,"column":11,"nodeType":"1172","messageId":"1173","endLine":295,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1221","line":315,"column":11,"nodeType":"1172","messageId":"1173","endLine":315,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1222","line":320,"column":11,"nodeType":"1172","messageId":"1173","endLine":320,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1223","line":154,"column":11,"nodeType":"1172","messageId":"1173","endLine":154,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1224","line":159,"column":11,"nodeType":"1172","messageId":"1173","endLine":159,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1225","line":278,"column":11,"nodeType":"1172","messageId":"1173","endLine":278,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1226","line":283,"column":11,"nodeType":"1172","messageId":"1173","endLine":283,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1227","line":139,"column":11,"nodeType":"1172","messageId":"1173","endLine":139,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1228","line":144,"column":11,"nodeType":"1172","messageId":"1173","endLine":144,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1229","line":166,"column":11,"nodeType":"1172","messageId":"1173","endLine":166,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1230","line":171,"column":11,"nodeType":"1172","messageId":"1173","endLine":171,"endColumn":22},{"ruleId":"1213","severity":1,"message":"1214","line":268,"column":22,"nodeType":"1205","messageId":"1215","endLine":268,"endColumn":23,"suggestions":"1231"},{"ruleId":"1213","severity":1,"message":"1217","line":268,"column":26,"nodeType":"1205","messageId":"1215","endLine":268,"endColumn":27,"suggestions":"1232"},{"ruleId":"1203","severity":1,"message":"1204","line":380,"column":5,"nodeType":"1205","messageId":"1206","endLine":380,"endColumn":77},{"ruleId":"1203","severity":1,"message":"1204","line":406,"column":5,"nodeType":"1205","messageId":"1206","endLine":406,"endColumn":85},{"ruleId":"1233","severity":1,"message":"1234","line":81,"column":11,"nodeType":"1172","messageId":"1235","endLine":81,"endColumn":70,"fix":"1236"},{"ruleId":"1170","severity":1,"message":"1237","line":172,"column":11,"nodeType":"1172","messageId":"1173","endLine":172,"endColumn":23},{"ruleId":"1170","severity":1,"message":"1238","line":177,"column":11,"nodeType":"1172","messageId":"1173","endLine":177,"endColumn":23},{"ruleId":"1170","severity":1,"message":"1239","line":150,"column":11,"nodeType":"1172","messageId":"1173","endLine":150,"endColumn":23},{"ruleId":"1170","severity":1,"message":"1240","line":155,"column":11,"nodeType":"1172","messageId":"1173","endLine":155,"endColumn":23},{"ruleId":"1233","severity":1,"message":"1234","line":234,"column":8,"nodeType":"1172","messageId":"1235","endLine":234,"endColumn":84,"fix":"1241"},{"ruleId":"1233","severity":1,"message":"1234","line":238,"column":8,"nodeType":"1172","messageId":"1235","endLine":238,"endColumn":67,"fix":"1242"},{"ruleId":"1170","severity":1,"message":"1243","line":246,"column":11,"nodeType":"1172","messageId":"1173","endLine":246,"endColumn":23},{"ruleId":"1170","severity":1,"message":"1244","line":251,"column":11,"nodeType":"1172","messageId":"1173","endLine":251,"endColumn":23},{"ruleId":"1233","severity":1,"message":"1234","line":189,"column":4,"nodeType":"1172","messageId":"1235","endLine":189,"endColumn":80,"fix":"1245"},{"ruleId":"1233","severity":1,"message":"1234","line":191,"column":4,"nodeType":"1172","messageId":"1235","endLine":191,"endColumn":63,"fix":"1246"},{"ruleId":"1233","severity":1,"message":"1234","line":46,"column":4,"nodeType":"1172","messageId":"1235","endLine":46,"endColumn":63,"fix":"1247"},{"ruleId":"1233","severity":1,"message":"1234","line":83,"column":61,"nodeType":"1172","messageId":"1235","endLine":83,"endColumn":117,"fix":"1248"},{"ruleId":"1233","severity":1,"message":"1234","line":51,"column":59,"nodeType":"1172","messageId":"1235","endLine":51,"endColumn":115,"fix":"1249"},{"ruleId":"1233","severity":1,"message":"1234","line":71,"column":140,"nodeType":"1172","messageId":"1235","endLine":71,"endColumn":188,"fix":"1250"},{"ruleId":"1233","severity":1,"message":"1234","line":77,"column":42,"nodeType":"1172","messageId":"1235","endLine":77,"endColumn":89,"fix":"1251"},{"ruleId":"1233","severity":1,"message":"1234","line":108,"column":5,"nodeType":"1172","messageId":"1235","endLine":108,"endColumn":52,"fix":"1252"},{"ruleId":"1233","severity":1,"message":"1234","line":110,"column":6,"nodeType":"1172","messageId":"1235","endLine":110,"endColumn":54,"fix":"1253"},{"ruleId":"1170","severity":1,"message":"1254","line":132,"column":11,"nodeType":"1172","messageId":"1173","endLine":132,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1255","line":137,"column":11,"nodeType":"1172","messageId":"1173","endLine":137,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1256","line":207,"column":11,"nodeType":"1172","messageId":"1173","endLine":207,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1257","line":212,"column":11,"nodeType":"1172","messageId":"1173","endLine":212,"endColumn":24},{"ruleId":"1203","severity":1,"message":"1204","line":69,"column":9,"nodeType":"1205","messageId":"1206","endLine":69,"endColumn":52},{"ruleId":"1233","severity":1,"message":"1234","line":138,"column":9,"nodeType":"1172","messageId":"1235","endLine":138,"endColumn":111,"fix":"1258"},{"ruleId":"1170","severity":1,"message":"1259","line":329,"column":11,"nodeType":"1172","messageId":"1173","endLine":329,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1260","line":334,"column":11,"nodeType":"1172","messageId":"1173","endLine":334,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1261","line":256,"column":11,"nodeType":"1172","messageId":"1173","endLine":256,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1262","line":261,"column":11,"nodeType":"1172","messageId":"1173","endLine":261,"endColumn":24},{"ruleId":"1233","severity":1,"message":"1234","line":174,"column":80,"nodeType":"1172","messageId":"1235","endLine":174,"endColumn":132,"fix":"1263"},{"ruleId":"1170","severity":1,"message":"1264","line":194,"column":11,"nodeType":"1172","messageId":"1173","endLine":194,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1265","line":199,"column":11,"nodeType":"1172","messageId":"1173","endLine":199,"endColumn":24},{"ruleId":"1203","severity":1,"message":"1204","line":179,"column":5,"nodeType":"1205","messageId":"1206","endLine":179,"endColumn":90},{"ruleId":"1170","severity":1,"message":"1266","line":313,"column":11,"nodeType":"1172","messageId":"1173","endLine":313,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1267","line":318,"column":11,"nodeType":"1172","messageId":"1173","endLine":318,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1268","line":212,"column":11,"nodeType":"1172","messageId":"1173","endLine":212,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1269","line":217,"column":11,"nodeType":"1172","messageId":"1173","endLine":217,"endColumn":24},{"ruleId":"1203","severity":1,"message":"1204","line":73,"column":13,"nodeType":"1205","messageId":"1206","endLine":73,"endColumn":84},{"ruleId":"1170","severity":1,"message":"1270","line":224,"column":11,"nodeType":"1172","messageId":"1173","endLine":224,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1271","line":229,"column":11,"nodeType":"1172","messageId":"1173","endLine":229,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1272","line":144,"column":11,"nodeType":"1172","messageId":"1173","endLine":144,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1273","line":149,"column":11,"nodeType":"1172","messageId":"1173","endLine":149,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1274","line":366,"column":11,"nodeType":"1172","messageId":"1173","endLine":366,"endColumn":23},{"ruleId":"1170","severity":1,"message":"1275","line":371,"column":11,"nodeType":"1172","messageId":"1173","endLine":371,"endColumn":23},{"ruleId":"1233","severity":1,"message":"1234","line":44,"column":112,"nodeType":"1172","messageId":"1235","endLine":44,"endColumn":159,"fix":"1276"},{"ruleId":"1233","severity":1,"message":"1234","line":50,"column":46,"nodeType":"1172","messageId":"1235","endLine":50,"endColumn":92,"fix":"1277"},{"ruleId":"1233","severity":1,"message":"1234","line":80,"column":4,"nodeType":"1172","messageId":"1235","endLine":80,"endColumn":51,"fix":"1278"},{"ruleId":"1233","severity":1,"message":"1234","line":82,"column":5,"nodeType":"1172","messageId":"1235","endLine":82,"endColumn":53,"fix":"1279"},{"ruleId":"1203","severity":1,"message":"1204","line":45,"column":7,"nodeType":"1205","messageId":"1206","endLine":45,"endColumn":51},{"ruleId":"1233","severity":1,"message":"1234","line":115,"column":5,"nodeType":"1172","messageId":"1235","endLine":115,"endColumn":107,"fix":"1280"},{"ruleId":"1233","severity":1,"message":"1234","line":221,"column":114,"nodeType":"1172","messageId":"1235","endLine":221,"endColumn":163,"fix":"1281"},{"ruleId":"1233","severity":1,"message":"1234","line":151,"column":93,"nodeType":"1172","messageId":"1235","endLine":151,"endColumn":145,"fix":"1282"},{"ruleId":"1203","severity":1,"message":"1204","line":160,"column":5,"nodeType":"1205","messageId":"1206","endLine":160,"endColumn":90},{"ruleId":"1203","severity":1,"message":"1204","line":46,"column":13,"nodeType":"1205","messageId":"1206","endLine":46,"endColumn":84},{"ruleId":"1170","severity":1,"message":"1171","line":76,"column":37,"nodeType":"1172","messageId":"1173","endLine":76,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1174","line":79,"column":37,"nodeType":"1172","messageId":"1173","endLine":79,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1175","line":82,"column":37,"nodeType":"1172","messageId":"1173","endLine":82,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1176","line":85,"column":37,"nodeType":"1172","messageId":"1173","endLine":85,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1177","line":88,"column":37,"nodeType":"1172","messageId":"1173","endLine":88,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1178","line":91,"column":37,"nodeType":"1172","messageId":"1173","endLine":91,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1179","line":94,"column":37,"nodeType":"1172","messageId":"1173","endLine":94,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1180","line":97,"column":37,"nodeType":"1172","messageId":"1173","endLine":97,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1181","line":100,"column":37,"nodeType":"1172","messageId":"1173","endLine":100,"endColumn":47},{"ruleId":"1170","severity":1,"message":"1182","line":103,"column":37,"nodeType":"1172","messageId":"1173","endLine":103,"endColumn":48},{"ruleId":"1170","severity":1,"message":"1183","line":110,"column":37,"nodeType":"1172","messageId":"1173","endLine":110,"endColumn":46},{"ruleId":"1170","severity":1,"message":"1184","line":113,"column":35,"nodeType":"1172","messageId":"1173","endLine":113,"endColumn":44},{"ruleId":"1170","severity":1,"message":"1185","line":116,"column":35,"nodeType":"1172","messageId":"1173","endLine":116,"endColumn":44},{"ruleId":"1170","severity":1,"message":"1186","line":122,"column":47,"nodeType":"1172","messageId":"1173","endLine":122,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1187","line":125,"column":47,"nodeType":"1172","messageId":"1173","endLine":125,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1188","line":128,"column":47,"nodeType":"1172","messageId":"1173","endLine":128,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1189","line":132,"column":47,"nodeType":"1172","messageId":"1173","endLine":132,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1190","line":136,"column":47,"nodeType":"1172","messageId":"1173","endLine":136,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1191","line":140,"column":47,"nodeType":"1172","messageId":"1173","endLine":140,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1192","line":144,"column":47,"nodeType":"1172","messageId":"1173","endLine":144,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1193","line":148,"column":47,"nodeType":"1172","messageId":"1173","endLine":148,"endColumn":57},{"ruleId":"1170","severity":1,"message":"1194","line":152,"column":47,"nodeType":"1172","messageId":"1173","endLine":152,"endColumn":57},{"ruleId":"1195","severity":1,"message":"1196","line":2,"column":8,"nodeType":"1197","messageId":"1198","endLine":2,"endColumn":14},{"ruleId":"1203","severity":1,"message":"1204","line":428,"column":9,"nodeType":"1205","messageId":"1206","endLine":428,"endColumn":89},{"ruleId":"1203","severity":1,"message":"1204","line":460,"column":11,"nodeType":"1205","messageId":"1206","endLine":460,"endColumn":91},{"ruleId":"1170","severity":1,"message":"1227","line":139,"column":11,"nodeType":"1172","messageId":"1173","endLine":139,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1228","line":144,"column":11,"nodeType":"1172","messageId":"1173","endLine":144,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1229","line":166,"column":11,"nodeType":"1172","messageId":"1173","endLine":166,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1230","line":171,"column":11,"nodeType":"1172","messageId":"1173","endLine":171,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1207","line":111,"column":11,"nodeType":"1172","messageId":"1173","endLine":111,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1208","line":116,"column":11,"nodeType":"1172","messageId":"1173","endLine":116,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1209","line":219,"column":11,"nodeType":"1172","messageId":"1173","endLine":219,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1210","line":224,"column":11,"nodeType":"1172","messageId":"1173","endLine":224,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1211","line":273,"column":11,"nodeType":"1172","messageId":"1173","endLine":273,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1212","line":278,"column":11,"nodeType":"1172","messageId":"1173","endLine":278,"endColumn":22},{"ruleId":"1213","severity":1,"message":"1214","line":263,"column":22,"nodeType":"1205","messageId":"1215","endLine":263,"endColumn":23,"suggestions":"1283"},{"ruleId":"1213","severity":1,"message":"1217","line":263,"column":26,"nodeType":"1205","messageId":"1215","endLine":263,"endColumn":27,"suggestions":"1284"},{"ruleId":"1170","severity":1,"message":"1219","line":290,"column":11,"nodeType":"1172","messageId":"1173","endLine":290,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1220","line":295,"column":11,"nodeType":"1172","messageId":"1173","endLine":295,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1221","line":315,"column":11,"nodeType":"1172","messageId":"1173","endLine":315,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1222","line":320,"column":11,"nodeType":"1172","messageId":"1173","endLine":320,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1223","line":154,"column":11,"nodeType":"1172","messageId":"1173","endLine":154,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1224","line":159,"column":11,"nodeType":"1172","messageId":"1173","endLine":159,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1225","line":278,"column":11,"nodeType":"1172","messageId":"1173","endLine":278,"endColumn":22},{"ruleId":"1170","severity":1,"message":"1226","line":283,"column":11,"nodeType":"1172","messageId":"1173","endLine":283,"endColumn":22},{"ruleId":"1233","severity":1,"message":"1234","line":81,"column":11,"nodeType":"1172","messageId":"1235","endLine":81,"endColumn":70,"fix":"1285"},{"ruleId":"1170","severity":1,"message":"1237","line":172,"column":11,"nodeType":"1172","messageId":"1173","endLine":172,"endColumn":23},{"ruleId":"1170","severity":1,"message":"1238","line":177,"column":11,"nodeType":"1172","messageId":"1173","endLine":177,"endColumn":23},{"ruleId":"1170","severity":1,"message":"1239","line":150,"column":11,"nodeType":"1172","messageId":"1173","endLine":150,"endColumn":23},{"ruleId":"1170","severity":1,"message":"1240","line":155,"column":11,"nodeType":"1172","messageId":"1173","endLine":155,"endColumn":23},{"ruleId":"1233","severity":1,"message":"1234","line":234,"column":8,"nodeType":"1172","messageId":"1235","endLine":234,"endColumn":84,"fix":"1286"},{"ruleId":"1233","severity":1,"message":"1234","line":238,"column":8,"nodeType":"1172","messageId":"1235","endLine":238,"endColumn":67,"fix":"1287"},{"ruleId":"1170","severity":1,"message":"1243","line":246,"column":11,"nodeType":"1172","messageId":"1173","endLine":246,"endColumn":23},{"ruleId":"1170","severity":1,"message":"1244","line":251,"column":11,"nodeType":"1172","messageId":"1173","endLine":251,"endColumn":23},{"ruleId":"1233","severity":1,"message":"1234","line":83,"column":61,"nodeType":"1172","messageId":"1235","endLine":83,"endColumn":117,"fix":"1288"},{"ruleId":"1233","severity":1,"message":"1234","line":71,"column":140,"nodeType":"1172","messageId":"1235","endLine":71,"endColumn":188,"fix":"1289"},{"ruleId":"1233","severity":1,"message":"1234","line":77,"column":42,"nodeType":"1172","messageId":"1235","endLine":77,"endColumn":89,"fix":"1290"},{"ruleId":"1233","severity":1,"message":"1234","line":108,"column":5,"nodeType":"1172","messageId":"1235","endLine":108,"endColumn":52,"fix":"1291"},{"ruleId":"1233","severity":1,"message":"1234","line":110,"column":6,"nodeType":"1172","messageId":"1235","endLine":110,"endColumn":54,"fix":"1292"},{"ruleId":"1170","severity":1,"message":"1254","line":132,"column":11,"nodeType":"1172","messageId":"1173","endLine":132,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1255","line":137,"column":11,"nodeType":"1172","messageId":"1173","endLine":137,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1256","line":207,"column":11,"nodeType":"1172","messageId":"1173","endLine":207,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1257","line":212,"column":11,"nodeType":"1172","messageId":"1173","endLine":212,"endColumn":24},{"ruleId":"1203","severity":1,"message":"1204","line":69,"column":9,"nodeType":"1205","messageId":"1206","endLine":69,"endColumn":52},{"ruleId":"1233","severity":1,"message":"1234","line":138,"column":9,"nodeType":"1172","messageId":"1235","endLine":138,"endColumn":111,"fix":"1293"},{"ruleId":"1170","severity":1,"message":"1259","line":329,"column":11,"nodeType":"1172","messageId":"1173","endLine":329,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1260","line":334,"column":11,"nodeType":"1172","messageId":"1173","endLine":334,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1261","line":256,"column":11,"nodeType":"1172","messageId":"1173","endLine":256,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1262","line":261,"column":11,"nodeType":"1172","messageId":"1173","endLine":261,"endColumn":24},{"ruleId":"1233","severity":1,"message":"1234","line":174,"column":80,"nodeType":"1172","messageId":"1235","endLine":174,"endColumn":132,"fix":"1294"},{"ruleId":"1170","severity":1,"message":"1264","line":194,"column":11,"nodeType":"1172","messageId":"1173","endLine":194,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1265","line":199,"column":11,"nodeType":"1172","messageId":"1173","endLine":199,"endColumn":24},{"ruleId":"1203","severity":1,"message":"1204","line":179,"column":5,"nodeType":"1205","messageId":"1206","endLine":179,"endColumn":90},{"ruleId":"1170","severity":1,"message":"1266","line":313,"column":11,"nodeType":"1172","messageId":"1173","endLine":313,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1267","line":318,"column":11,"nodeType":"1172","messageId":"1173","endLine":318,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1268","line":212,"column":11,"nodeType":"1172","messageId":"1173","endLine":212,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1269","line":217,"column":11,"nodeType":"1172","messageId":"1173","endLine":217,"endColumn":24},{"ruleId":"1203","severity":1,"message":"1204","line":73,"column":13,"nodeType":"1205","messageId":"1206","endLine":73,"endColumn":84},{"ruleId":"1170","severity":1,"message":"1270","line":224,"column":11,"nodeType":"1172","messageId":"1173","endLine":224,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1271","line":229,"column":11,"nodeType":"1172","messageId":"1173","endLine":229,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1272","line":144,"column":11,"nodeType":"1172","messageId":"1173","endLine":144,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1273","line":149,"column":11,"nodeType":"1172","messageId":"1173","endLine":149,"endColumn":24},{"ruleId":"1170","severity":1,"message":"1274","line":366,"column":11,"nodeType":"1172","messageId":"1173","endLine":366,"endColumn":23},{"ruleId":"1170","severity":1,"message":"1275","line":371,"column":11,"nodeType":"1172","messageId":"1173","endLine":371,"endColumn":23},{"ruleId":"1199","severity":1,"message":"1200","line":68,"column":1,"nodeType":"1201","messageId":"1202","endLine":97,"endColumn":20},{"ruleId":"1199","severity":1,"message":"1200","line":98,"column":11,"nodeType":"1201","messageId":"1202","endLine":107,"endColumn":4},{"ruleId":"1203","severity":1,"message":"1204","line":380,"column":5,"nodeType":"1205","messageId":"1206","endLine":380,"endColumn":77},{"ruleId":"1203","severity":1,"message":"1204","line":406,"column":5,"nodeType":"1205","messageId":"1206","endLine":406,"endColumn":85},{"ruleId":"1213","severity":1,"message":"1214","line":268,"column":22,"nodeType":"1205","messageId":"1215","endLine":268,"endColumn":23,"suggestions":"1295"},{"ruleId":"1213","severity":1,"message":"1217","line":268,"column":26,"nodeType":"1205","messageId":"1215","endLine":268,"endColumn":27,"suggestions":"1296"},{"ruleId":"1233","severity":1,"message":"1234","line":46,"column":4,"nodeType":"1172","messageId":"1235","endLine":46,"endColumn":63,"fix":"1297"},{"ruleId":"1233","severity":1,"message":"1234","line":189,"column":4,"nodeType":"1172","messageId":"1235","endLine":189,"endColumn":80,"fix":"1298"},{"ruleId":"1233","severity":1,"message":"1234","line":191,"column":4,"nodeType":"1172","messageId":"1235","endLine":191,"endColumn":63,"fix":"1299"},{"ruleId":"1233","severity":1,"message":"1234","line":51,"column":59,"nodeType":"1172","messageId":"1235","endLine":51,"endColumn":115,"fix":"1300"},{"ruleId":"1233","severity":1,"message":"1234","line":44,"column":112,"nodeType":"1172","messageId":"1235","endLine":44,"endColumn":159,"fix":"1301"},{"ruleId":"1233","severity":1,"message":"1234","line":50,"column":46,"nodeType":"1172","messageId":"1235","endLine":50,"endColumn":92,"fix":"1302"},{"ruleId":"1233","severity":1,"message":"1234","line":80,"column":4,"nodeType":"1172","messageId":"1235","endLine":80,"endColumn":51,"fix":"1303"},{"ruleId":"1233","severity":1,"message":"1234","line":82,"column":5,"nodeType":"1172","messageId":"1235","endLine":82,"endColumn":53,"fix":"1304"},{"ruleId":"1203","severity":1,"message":"1204","line":45,"column":7,"nodeType":"1205","messageId":"1206","endLine":45,"endColumn":51},{"ruleId":"1233","severity":1,"message":"1234","line":115,"column":5,"nodeType":"1172","messageId":"1235","endLine":115,"endColumn":107,"fix":"1305"},{"ruleId":"1233","severity":1,"message":"1234","line":221,"column":114,"nodeType":"1172","messageId":"1235","endLine":221,"endColumn":163,"fix":"1306"},{"ruleId":"1233","severity":1,"message":"1234","line":151,"column":93,"nodeType":"1172","messageId":"1235","endLine":151,"endColumn":145,"fix":"1307"},{"ruleId":"1203","severity":1,"message":"1204","line":160,"column":5,"nodeType":"1205","messageId":"1206","endLine":160,"endColumn":90},{"ruleId":"1203","severity":1,"message":"1204","line":46,"column":13,"nodeType":"1205","messageId":"1206","endLine":46,"endColumn":84},"react/jsx-pascal-case","Imported JSX component JsEs5_1 must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component JsEs5_2 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JsEs5_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JsEs5_4 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JsEs5_5 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JsEs5_6 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JsEs5_7 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JsEs5_8 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JsEs5_9 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component JsEs5_10 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Html_1 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Html_2 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Html_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component React_1 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component React_2 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component React_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component React_4 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component React_5 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component React_6 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component React_7 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component React_8 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component React_9 must be in PascalCase or SCREAMING_SNAKE_CASE","no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","Imported JSX component RuEs5_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmEs5_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuEs5_4 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmEs5_4 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuEs5_5 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmEs5_5 must be in PascalCase or SCREAMING_SNAKE_CASE","no-useless-escape","Unnecessary escape character: \\w.","unnecessaryEscape",["1308","1309"],"Unnecessary escape character: \\s.",["1310","1311"],"Imported JSX component RuEs5_6 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmEs5_6 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuEs5_7 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmEs5_7 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuEs5_8 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmEs5_8 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuEs5_9 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmEs5_9 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuEs5_1 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmEs5_1 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuEs5_2 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmEs5_2 must be in PascalCase or SCREAMING_SNAKE_CASE",["1312","1313"],["1314","1315"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"1316","text":"1317"},"Imported JSX component RuHtml_2 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmHtml_2 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuHtml_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmHtml_3 must be in PascalCase or SCREAMING_SNAKE_CASE",{"range":"1318","text":"1317"},{"range":"1319","text":"1317"},"Imported JSX component RuHtml_1 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmHtml_1 must be in PascalCase or SCREAMING_SNAKE_CASE",{"range":"1320","text":"1317"},{"range":"1321","text":"1317"},{"range":"1322","text":"1317"},{"range":"1323","text":"1317"},{"range":"1324","text":"1317"},{"range":"1325","text":"1317"},{"range":"1326","text":"1317"},{"range":"1327","text":"1317"},{"range":"1328","text":"1317"},"Imported JSX component RuReact_1 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmReact_1 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuReact_2 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmReact_2 must be in PascalCase or SCREAMING_SNAKE_CASE",{"range":"1329","text":"1317"},"Imported JSX component RuReact_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmReact_3 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuReact_4 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmReact_4 must be in PascalCase or SCREAMING_SNAKE_CASE",{"range":"1330","text":"1317"},"Imported JSX component RuReact_5 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmReact_5 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuReact_6 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmReact_6 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuReact_7 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmReact_7 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuReact_8 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmReact_8 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuReact_9 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmReact_9 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component RuEs5_10 must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component AmEs5_10 must be in PascalCase or SCREAMING_SNAKE_CASE",{"range":"1331","text":"1317"},{"range":"1332","text":"1317"},{"range":"1333","text":"1317"},{"range":"1334","text":"1317"},{"range":"1335","text":"1317"},{"range":"1336","text":"1317"},{"range":"1337","text":"1317"},["1338","1339"],["1340","1341"],{"range":"1342","text":"1317"},{"range":"1343","text":"1317"},{"range":"1344","text":"1317"},{"range":"1345","text":"1317"},{"range":"1346","text":"1317"},{"range":"1347","text":"1317"},{"range":"1348","text":"1317"},{"range":"1349","text":"1317"},{"range":"1350","text":"1317"},{"range":"1351","text":"1317"},["1352","1353"],["1354","1355"],{"range":"1356","text":"1317"},{"range":"1357","text":"1317"},{"range":"1358","text":"1317"},{"range":"1359","text":"1317"},{"range":"1360","text":"1317"},{"range":"1361","text":"1317"},{"range":"1362","text":"1317"},{"range":"1363","text":"1317"},{"range":"1364","text":"1317"},{"range":"1365","text":"1317"},{"range":"1366","text":"1317"},{"messageId":"1367","fix":"1368","desc":"1369"},{"messageId":"1370","fix":"1371","desc":"1372"},{"messageId":"1367","fix":"1373","desc":"1369"},{"messageId":"1370","fix":"1374","desc":"1372"},{"messageId":"1367","fix":"1375","desc":"1369"},{"messageId":"1370","fix":"1376","desc":"1372"},{"messageId":"1367","fix":"1377","desc":"1369"},{"messageId":"1370","fix":"1378","desc":"1372"},[3413,3413]," rel=\"noreferrer\"",[7460,7460],[7659,7659],[6505,6505],[6693,6693],[2314,2314],[2527,2527],[1854,1854],[2571,2571],[2952,2952],[4285,4285],[4367,4367],[3846,3846],[6158,6158],[1988,1988],[2374,2374],[3704,3704],[3785,3785],[3143,3143],[9018,9018],[5806,5806],{"messageId":"1367","fix":"1379","desc":"1369"},{"messageId":"1370","fix":"1380","desc":"1372"},{"messageId":"1367","fix":"1381","desc":"1369"},{"messageId":"1370","fix":"1382","desc":"1372"},[3413,3413],[7460,7460],[7659,7659],[2527,2527],[2571,2571],[2952,2952],[4285,4285],[4367,4367],[3846,3846],[6158,6158],{"messageId":"1367","fix":"1383","desc":"1369"},{"messageId":"1370","fix":"1384","desc":"1372"},{"messageId":"1367","fix":"1385","desc":"1369"},{"messageId":"1370","fix":"1386","desc":"1372"},[2314,2314],[6505,6505],[6693,6693],[1854,1854],[1988,1988],[2374,2374],[3704,3704],[3785,3785],[3143,3143],[9018,9018],[5806,5806],"removeEscape",{"range":"1387","text":"1388"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1389","text":"1390"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1391","text":"1388"},{"range":"1392","text":"1390"},{"range":"1393","text":"1388"},{"range":"1394","text":"1390"},{"range":"1395","text":"1388"},{"range":"1396","text":"1390"},{"range":"1397","text":"1388"},{"range":"1398","text":"1390"},{"range":"1399","text":"1388"},{"range":"1400","text":"1390"},{"range":"1401","text":"1388"},{"range":"1402","text":"1390"},{"range":"1403","text":"1388"},{"range":"1404","text":"1390"},[10461,10462],"",[10461,10461],"\\",[10465,10466],[10465,10465],[9360,9361],[9360,9360],[9364,9365],[9364,9364],[10461,10462],[10461,10461],[10465,10466],[10465,10465],[9360,9361],[9360,9360],[9364,9365],[9364,9364]]