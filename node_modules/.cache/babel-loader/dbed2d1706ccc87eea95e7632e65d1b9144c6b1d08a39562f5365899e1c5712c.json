{"ast":null,"code":"var _jsxFileName = \"/home/artashes/Desktop/codeex/codeex/src/pages/JavaScript.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JavaScript() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-container\",\n    children: [/*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/javascript5\",\n      className: \"flex-item javascript\",\n      children: \" JavaScript ES5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n      to: \"/html\",\n      className: \"flex-item html\",\n      children: \"JavaScript ES5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 1\n  }, this);\n}\n_c = JavaScript;\nexport default JavaScript;\n{/*<div className='java-script'>\n  \n    <h1>JavaScript</h1>\n    <p>\n    JavaScript was created in 1995 by Brendan Eich while he was working at Netscape Communications Corporation. \n    The language was originally called Mocha, but was later renamed to LiveScript before finally being named JavaScript. \n    The name change was mainly due to marketing reasons and to capitalize on the popularity of Java at the time. \n    Brendan Eich is an American technologist and programmer who has worked for companies like Mozilla, Netscape, and Brave Software. \n    He is considered to be the creator of JavaScript and has made significant contributions to other programming languages as well.\n    </p>\n    <h3>ECMAScript defines 7 data types:</h3>\n    <ul>\n      <li>Number: represents numeric values, including integers and floating-point numbers. Examples: 1, 3.14, -42.</li>\n      <li>String: represents textual data, enclosed in single or double quotes. Examples: \"hello\", 'world', \"123\".</li>\n      <li>Boolean: represents a logical entity and can have only two values: true or false. Examples: true, false.</li>\n      <li>Undefined: represents a variable that has been declared but has not been assigned a value. Examples: var x; console.log(x); // Output: undefined</li>\n      <li>Null: represents the intentional absence of any object value. Examples: var x = null; console.log(x); // Output: null</li>\n      <li>Symbol: represents a unique identifier that is not exposed to the calling code. Example: const sym1 = Symbol('foo');</li>\n      <li>Object: represents a collection of related data and/or functionality. Examples: var obj = {'{'} name: \"John\", age: 30 {'}'}; var arr = [1, 2, 3];</li>\n    </ul>\n    <h2>Boolean Data Type</h2>\n    <p>The Boolean data type has only two values: true and false. It is commonly used in comparison operations using the following operators:</p>\n    <ul>\n      <li>=== and ==</li>\n      <li>{'>'} and {'<'}=</li>\n      <li>{'>='} and {'<'}=</li>\n    </ul>\n    <p>Examples:</p>\n    <ul>\n      <li>10 {'<'} 16 == true</li>\n      <li>16 {'>'} 10 == false</li>\n    </ul>\n    <h2>Boolean Operators</h2>\n    <ul>\n      <li>NOT (!)</li>\n      <li>AND (&&)</li>\n      <li>OR (||)</li>\n    </ul>\n    <p>When evaluating a condition, the Boolean data type is used. The following values are converted to false: 0 and an empty string. The following values are converted to true: all other numbers and non-empty strings.</p>\n    <h3>Examples:</h3>\n    <p>5 && 6 // 6</p>\n <p>6 && 0 // 0</p>\n <p>true && false // false</p>\n <p>5 || 6 // 5</p>\n <p>0 || false // false</p>\n <p>false || true // true</p>\n <p>6 || 7 // 6</p>\n <p>0 || false // false</p>\n <p>false || true // true</p>\n <p>50 && 6 // 6</p>\n <p>10 && 0 // 0</p>\n <p>'Hello' && 'World'// \"World\"</p>\n <p>''hello'' && '' '' // \" \"</p>\n <p>!true // false</p>\n <h3>Expressions and Statements</h3>\n <p>These are examples of expressions and operators in JavaScript. An expression is a combination of values, variables, operators, that can be evaluated to some value. Expressions can be used in other expressions or in statements.</p>\n <p>Operators such as *, +, etc., are used to create expressions. The first three lines show examples of expressions with different data types: numbers, strings, and boolean values.</p>\n <p>Operators can be used in the form of operator expressions, which are part of operators. The next three lines show examples of operator expressions, which are operators.</p>\n <p>Each operator expression ends with an operator (;), which makes it a statement.</p>\n <ul>\n  <li><strong>Expression:</strong> 8 * 3 + 2</li>\n  <li><strong>Expression:</strong> \"Hello, there!\"</li>\n  <li><strong>Expression:</strong> false</li>\n  <li><strong>Statement:</strong> 8 * 3 + 2;</li>\n  <li><strong>Statement:</strong> \"Hello, there!\";</li>\n  <li><strong>Statement:</strong> false;</li>\n </ul>\n <h2>JavaScript Special Values and Functions</h2>\n <h5>NaN</h5>\n <p>NaN stands for \"Not a Number\" and is a special value in JavaScript that represents an undefined or unrepresentable value resulting from an arithmetic operation. For example, dividing zero by zero will result in NaN.</p>\n <h5>typeof</h5>\n <p>typeof is a unary operator in JavaScript that returns a string indicating the data type of an operand. For example, typeof \"hello\" will return \"string\" and typeof 42 will return \"number\".</p>\n <h5>isNaN()</h5>\n <p>isNaN() is a global function in JavaScript that returns true if the argument is NaN (Not a Number), and false otherwise. For example, isNaN(\"hello\") will return true, and isNaN(42) will return false.</p>\n <h5>isFinite()</h5>\n <p>isFinite() is a global function in JavaScript that returns true if the argument is a finite number, and false otherwise. For example, isFinite(42) will return true, and isFinite(Infinity) will return false.</p>\n <h2>Variables</h2>\n <ul>\n <li>Declaration of variables (a-A, $, _)</li>\n <ul>\n  <li><code>var studentName;</code></li>\n  <li><code>var firstName, lastName, age;</code></li>\n </ul>\n <li>Declaration and assignment of variables</li>\n <ul>\n  <li><code>var carModel = \"Tesla\";</code></li>\n  <li><code>var carModel = \"Tesla\", year = 2022, isElectric = true;</code></li>\n </ul>\n <li>Usage of variables</li>\n <ul>\n  <li><code>var quantity = 5;</code></li>\n  <li><code>quantity = quantity + 3;</code></li>\n  <li><code>quantity += 2;</code></li>\n </ul>\n </ul>\n <h2>Null and Undefined</h2>\n <ul>\n  <li>Null is a special value in JavaScript that represents the absence of any object value. It is a primitive value and represents a deliberate non-value or empty value. It is often used to indicate that a variable has no value or that a function returns no value.</li>\n  <li>Undefined is a value that a variable can have if it has not been assigned a value or if it has been explicitly assigned the value undefined. It is also a primitive value in JavaScript.</li>\n  <li>The typeof operator is used to determine the type of a value. If the value is undefined, typeof returns the string \"undefined\". If the value is null, typeof returns the string \"object\". This is a known bug in JavaScript that has existed since the language was first created.</li>\n  <li>Null and undefined are often confused with each other because they both represent the absence of a value. However, they are not the same thing. null represents a deliberate absence of a value, while undefined represents an accidental absence of a value.</li>\n  <li>The == operator in JavaScript performs type coercion, which means that it will try to convert values of different types to a common type before comparing them. When comparing null and undefined with ==, the result is true because they are both considered falsy values.</li>\n  <li>The === operator in JavaScript performs a strict comparison that does not perform type coercion. When comparing null and undefined with ===, the result is false because they are not the same type of value.</li>\n  <li>The parseInt, parseFloat, and Number functions are used to convert a string to a number. When passed the value null, all three functions return NaN, which stands for \"Not a Number\". This is because null is not a valid number and cannot be converted to a number.</li>\n </ul>\n <h3>JavaScript Loops and Conditionals</h3>\n <b>1. The while loop</b>\n <p>The while loop is used to execute a block of code repeatedly while a specified condition is true.\n Here is an example:</p>\n <pre>\n  <code>\n  {'var i = 0; // initialize the counter variable\\nwhile (i < 5) { // set the condition\\n  console.log(i); // execute the code block\\n  i++; // update the counter variable\\n}'}\n  </code>\n </pre>\n <p>\n In this example, the loop will run as long as the value of i is less than 5. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 until it reaches 5.\n The output of this code will be:\n <br/>0<br/>1<br/>2<br/>3<br/>4\n </p>\n <b>2. The for loop</b>\n <p>The for loop is used to execute a block of code a specified number of times.\n Here is an example:</p>\n <pre>\n  <code>\n    {'for (var i = 0; i < 5; i++) {\\n  console.log(i);\\n}'}\n  </code>\n </pre>\n <p>\n In this example, the loop will run 5 times, since the condition specifies that i must be less than 5. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 each time.\n The output of this code will be the same as the previous example:\n <br/>0<br/>1<br/>2<br/>3<br/>4\n </p>\n <b>3. The do-while loop</b>\n <p>\n The do-while loop is similar to the while loop, but it executes the code block at least once, even if the condition is initially false.\n Here is an example:\n </p>\n <pre>\n  <code>\n    {'var i = 0; // initialize the counter variable\\ndo {\\n  console.log(i); // execute the code block\\n  i++; // update the counter variable\\n} while (i < 5); // set the condition'}\n  </code>\n </pre>\n <p>\n In this example, the loop will run at least once, since the condition is checked after the code block is executed. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 each time, until it reaches 5.\n The output of this code will be the same as the previous examples:\n <br/>0<br/>1<br/>2<br/>3<br/>4\n </p>\n <b>4. The ++ and -- operators</b>\n <p>\n The ++ and -- operators are used to increment or decrement a variable by 1.\n Here are some examples:\n </p>\n <pre>\n  <code>\n    {'var i = 0; // initialize a variable\\ni++; // increment the variable\\nconsole.log(i); // output: 1\\n\\nvar j = 2; // initialize another variable\\nj--; // decrement the variable\\nconsole.log(j); // output: 1'}\n  </code>\n </pre>\n <p>These operators are often used in loops to keep track of the current iteration.</p>\n <b>5. The if, else, and else if statements</b>\n <p>\n The if statement is used to execute a block of code if a specified condition is true. The else statement is used to execute a block of code if the condition is false. The else if statement is used to test multiple conditions.\n Here is an example:\n </p>\n <pre>\n  <code>\n    {'var x = 10; // initialize a variable\\nif (x > 10) { // check the condition\\n  console.log(\"x is greater than 10\")'}\n  </code>\n </pre>\n <h3>Conditional (ternary) Operator</h3>\n <p>\n The Conditional (ternary) Operator is a shorthand way of writing an if-else statement in JavaScript. It takes three operands: a condition, a value to return if the condition is true, and a value to return if the condition is false.\n The syntax for the conditional operator is: (condition) ? true-value : false-value\n Here are some examples of using the conditional operator in JavaScript:\n </p>\n <b>Example 1:</b>\n <pre>\n <code>\n  {'<div id=\"example1\"></div>\\n<script>\\n  var a = 5;\\n  var result = (a == 5) ? \"true\" : \"false\";\\n  document.getElementById(\"example1\").innerHTML = result;\\n</script>'}\n </code>\n </pre>\n <p>\n Output: true\n Explanation: In this example, we set the value of variable a to 5, and then we use the conditional operator to check if a is equal to 5. Since it is true, the value \"true\" is returned and assigned to the variable result, which is then printed in the HTML div element.\n </p>\n <b>Example 2:</b>\n <pre>\n <code>\n  {'<div id=\"example2\"></div>\\n<script>\\n  var a = 10;\\n  var result = (a == 5) ? \"true\" : \"false\";\\n  document.getElementById(\"example2\").innerHTML = result;\\n</script>'}\n </code>\n </pre>\n <p>\n Output: false\n Explanation: In this example, we set the value of variable a to 10, and then we use the conditional operator to check if a is equal to 5. Since it is false, the value \"false\" is returned and assigned to the variable result, which is then printed in the HTML div element.\n </p>\n <b>Example 3:</b>\n <pre>\n <code>\n {'<div id=\"example3\"></div>\\n<script>\\n var a = 7;\\n var result=(a>10)?\"greater than10\":(a < 5)?\"less than 5\":\"between5and10\";\\n document.getElementById(\"example3\").innerHTML=result;\\n</script>'}\n </code>\n </pre>\n <p>\n Output: between 5 and 10\n Explanation: In this example, we set the value of variable a to 7, and then we use the conditional operator to check if a is greater than 10. Since it is false, we move to the second condition which checks if a is less than 5. Since this is also false, we move to the third condition which returns the value \"between 5 and 10\" since it is the only option left. The result is then printed in the HTML div element.\n </p>\n  </div> */}\nvar _c;\n$RefreshReg$(_c, \"JavaScript\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","JavaScript","className","children","NavLink","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/artashes/Desktop/codeex/codeex/src/pages/JavaScript.js"],"sourcesContent":["import React from 'react'\n\nfunction JavaScript() {\n  return (\n  \n<div className=\"flex-container\">\n<NavLink to='/javascript5' className=\"flex-item javascript\"> JavaScript ES5</NavLink>\n<NavLink to='/html' className=\"flex-item html\">JavaScript ES5</NavLink>\n </div>\n  )\n}\n\n\n\nexport default JavaScript;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n  {/*<div className='java-script'>\n    \n      <h1>JavaScript</h1>\n      <p>\n      JavaScript was created in 1995 by Brendan Eich while he was working at Netscape Communications Corporation. \n      The language was originally called Mocha, but was later renamed to LiveScript before finally being named JavaScript. \n      The name change was mainly due to marketing reasons and to capitalize on the popularity of Java at the time. \n      Brendan Eich is an American technologist and programmer who has worked for companies like Mozilla, Netscape, and Brave Software. \n      He is considered to be the creator of JavaScript and has made significant contributions to other programming languages as well.\n      </p>\n      <h3>ECMAScript defines 7 data types:</h3>\n      <ul>\n        <li>Number: represents numeric values, including integers and floating-point numbers. Examples: 1, 3.14, -42.</li>\n        <li>String: represents textual data, enclosed in single or double quotes. Examples: \"hello\", 'world', \"123\".</li>\n        <li>Boolean: represents a logical entity and can have only two values: true or false. Examples: true, false.</li>\n        <li>Undefined: represents a variable that has been declared but has not been assigned a value. Examples: var x; console.log(x); // Output: undefined</li>\n        <li>Null: represents the intentional absence of any object value. Examples: var x = null; console.log(x); // Output: null</li>\n        <li>Symbol: represents a unique identifier that is not exposed to the calling code. Example: const sym1 = Symbol('foo');</li>\n        <li>Object: represents a collection of related data and/or functionality. Examples: var obj = {'{'} name: \"John\", age: 30 {'}'}; var arr = [1, 2, 3];</li>\n      </ul>\n      <h2>Boolean Data Type</h2>\n      <p>The Boolean data type has only two values: true and false. It is commonly used in comparison operations using the following operators:</p>\n      <ul>\n        <li>=== and ==</li>\n        <li>{'>'} and {'<'}=</li>\n        <li>{'>='} and {'<'}=</li>\n      </ul>\n      <p>Examples:</p>\n      <ul>\n        <li>10 {'<'} 16 == true</li>\n        <li>16 {'>'} 10 == false</li>\n      </ul>\n      <h2>Boolean Operators</h2>\n      <ul>\n        <li>NOT (!)</li>\n        <li>AND (&&)</li>\n        <li>OR (||)</li>\n      </ul>\n      <p>When evaluating a condition, the Boolean data type is used. The following values are converted to false: 0 and an empty string. The following values are converted to true: all other numbers and non-empty strings.</p>\n      <h3>Examples:</h3>\n      <p>5 && 6 // 6</p>\n  <p>6 && 0 // 0</p>\n  <p>true && false // false</p>\n  <p>5 || 6 // 5</p>\n  <p>0 || false // false</p>\n  <p>false || true // true</p>\n  <p>6 || 7 // 6</p>\n  <p>0 || false // false</p>\n  <p>false || true // true</p>\n  <p>50 && 6 // 6</p>\n  <p>10 && 0 // 0</p>\n  <p>'Hello' && 'World'// \"World\"</p>\n  <p>''hello'' && '' '' // \" \"</p>\n  <p>!true // false</p>\n  <h3>Expressions and Statements</h3>\n  <p>These are examples of expressions and operators in JavaScript. An expression is a combination of values, variables, operators, that can be evaluated to some value. Expressions can be used in other expressions or in statements.</p>\n<p>Operators such as *, +, etc., are used to create expressions. The first three lines show examples of expressions with different data types: numbers, strings, and boolean values.</p>\n<p>Operators can be used in the form of operator expressions, which are part of operators. The next three lines show examples of operator expressions, which are operators.</p>\n<p>Each operator expression ends with an operator (;), which makes it a statement.</p>\n  <ul>\n    <li><strong>Expression:</strong> 8 * 3 + 2</li>\n    <li><strong>Expression:</strong> \"Hello, there!\"</li>\n    <li><strong>Expression:</strong> false</li>\n    <li><strong>Statement:</strong> 8 * 3 + 2;</li>\n    <li><strong>Statement:</strong> \"Hello, there!\";</li>\n    <li><strong>Statement:</strong> false;</li>\n  </ul>\n  <h2>JavaScript Special Values and Functions</h2>\n  <h5>NaN</h5>\n  <p>NaN stands for \"Not a Number\" and is a special value in JavaScript that represents an undefined or unrepresentable value resulting from an arithmetic operation. For example, dividing zero by zero will result in NaN.</p>\n  <h5>typeof</h5>\n  <p>typeof is a unary operator in JavaScript that returns a string indicating the data type of an operand. For example, typeof \"hello\" will return \"string\" and typeof 42 will return \"number\".</p>\n  <h5>isNaN()</h5>\n  <p>isNaN() is a global function in JavaScript that returns true if the argument is NaN (Not a Number), and false otherwise. For example, isNaN(\"hello\") will return true, and isNaN(42) will return false.</p>\n  <h5>isFinite()</h5>\n  <p>isFinite() is a global function in JavaScript that returns true if the argument is a finite number, and false otherwise. For example, isFinite(42) will return true, and isFinite(Infinity) will return false.</p>\n  <h2>Variables</h2>\n<ul>\n  <li>Declaration of variables (a-A, $, _)</li>\n  <ul>\n    <li><code>var studentName;</code></li>\n    <li><code>var firstName, lastName, age;</code></li>\n  </ul>\n  <li>Declaration and assignment of variables</li>\n  <ul>\n    <li><code>var carModel = \"Tesla\";</code></li>\n    <li><code>var carModel = \"Tesla\", year = 2022, isElectric = true;</code></li>\n  </ul>\n  <li>Usage of variables</li>\n  <ul>\n    <li><code>var quantity = 5;</code></li>\n    <li><code>quantity = quantity + 3;</code></li>\n    <li><code>quantity += 2;</code></li>\n  </ul>\n</ul>\n<h2>Null and Undefined</h2>\n  <ul>\n    <li>Null is a special value in JavaScript that represents the absence of any object value. It is a primitive value and represents a deliberate non-value or empty value. It is often used to indicate that a variable has no value or that a function returns no value.</li>\n    <li>Undefined is a value that a variable can have if it has not been assigned a value or if it has been explicitly assigned the value undefined. It is also a primitive value in JavaScript.</li>\n    <li>The typeof operator is used to determine the type of a value. If the value is undefined, typeof returns the string \"undefined\". If the value is null, typeof returns the string \"object\". This is a known bug in JavaScript that has existed since the language was first created.</li>\n    <li>Null and undefined are often confused with each other because they both represent the absence of a value. However, they are not the same thing. null represents a deliberate absence of a value, while undefined represents an accidental absence of a value.</li>\n    <li>The == operator in JavaScript performs type coercion, which means that it will try to convert values of different types to a common type before comparing them. When comparing null and undefined with ==, the result is true because they are both considered falsy values.</li>\n    <li>The === operator in JavaScript performs a strict comparison that does not perform type coercion. When comparing null and undefined with ===, the result is false because they are not the same type of value.</li>\n    <li>The parseInt, parseFloat, and Number functions are used to convert a string to a number. When passed the value null, all three functions return NaN, which stands for \"Not a Number\". This is because null is not a valid number and cannot be converted to a number.</li>\n  </ul>\n  <h3>JavaScript Loops and Conditionals</h3>\n  <b>1. The while loop</b>\n  <p>The while loop is used to execute a block of code repeatedly while a specified condition is true.\n\nHere is an example:</p>\n  <pre>\n    <code>\n    {'var i = 0; // initialize the counter variable\\nwhile (i < 5) { // set the condition\\n  console.log(i); // execute the code block\\n  i++; // update the counter variable\\n}'}\n    </code>\n  </pre>\n  <p>\n  In this example, the loop will run as long as the value of i is less than 5. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 until it reaches 5.\nThe output of this code will be:\n<br/>0<br/>1<br/>2<br/>3<br/>4\n  </p>\n  <b>2. The for loop</b>\n  <p>The for loop is used to execute a block of code a specified number of times.\nHere is an example:</p>\n<pre>\n    <code>\n      {'for (var i = 0; i < 5; i++) {\\n  console.log(i);\\n}'}\n    </code>\n  </pre>\n  <p>\n  In this example, the loop will run 5 times, since the condition specifies that i must be less than 5. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 each time.\n\nThe output of this code will be the same as the previous example:\n<br/>0<br/>1<br/>2<br/>3<br/>4\n  </p>\n  <b>3. The do-while loop</b>\n  <p>\n  The do-while loop is similar to the while loop, but it executes the code block at least once, even if the condition is initially false.\nHere is an example:\n  </p>\n  <pre>\n    <code>\n      {'var i = 0; // initialize the counter variable\\ndo {\\n  console.log(i); // execute the code block\\n  i++; // update the counter variable\\n} while (i < 5); // set the condition'}\n    </code>\n  </pre>\n  <p>\n  In this example, the loop will run at least once, since the condition is checked after the code block is executed. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 each time, until it reaches 5.\nThe output of this code will be the same as the previous examples:\n<br/>0<br/>1<br/>2<br/>3<br/>4\n  </p>\n  <b>4. The ++ and -- operators</b>\n  <p>\n  The ++ and -- operators are used to increment or decrement a variable by 1.\n  Here are some examples:\n  </p>\n  <pre>\n    <code>\n      {'var i = 0; // initialize a variable\\ni++; // increment the variable\\nconsole.log(i); // output: 1\\n\\nvar j = 2; // initialize another variable\\nj--; // decrement the variable\\nconsole.log(j); // output: 1'}\n    </code>\n  </pre>\n  <p>These operators are often used in loops to keep track of the current iteration.</p>\n  <b>5. The if, else, and else if statements</b>\n  <p>\n  The if statement is used to execute a block of code if a specified condition is true. The else statement is used to execute a block of code if the condition is false. The else if statement is used to test multiple conditions.\nHere is an example:\n  </p>\n  <pre>\n    <code>\n      {'var x = 10; // initialize a variable\\nif (x > 10) { // check the condition\\n  console.log(\"x is greater than 10\")'}\n    </code>\n  </pre>\n  <h3>Conditional (ternary) Operator</h3>\n  <p>\n  The Conditional (ternary) Operator is a shorthand way of writing an if-else statement in JavaScript. It takes three operands: a condition, a value to return if the condition is true, and a value to return if the condition is false.\n\nThe syntax for the conditional operator is: (condition) ? true-value : false-value\n\nHere are some examples of using the conditional operator in JavaScript:\n  </p>\n  <b>Example 1:</b>\n  <pre>\n  <code>\n    {'<div id=\"example1\"></div>\\n<script>\\n  var a = 5;\\n  var result = (a == 5) ? \"true\" : \"false\";\\n  document.getElementById(\"example1\").innerHTML = result;\\n</script>'}\n  </code>\n</pre>\n<p>\nOutput: true\n\nExplanation: In this example, we set the value of variable a to 5, and then we use the conditional operator to check if a is equal to 5. Since it is true, the value \"true\" is returned and assigned to the variable result, which is then printed in the HTML div element.\n</p>\n<b>Example 2:</b>\n<pre>\n  <code>\n    {'<div id=\"example2\"></div>\\n<script>\\n  var a = 10;\\n  var result = (a == 5) ? \"true\" : \"false\";\\n  document.getElementById(\"example2\").innerHTML = result;\\n</script>'}\n  </code>\n</pre>\n<p>\nOutput: false\n\nExplanation: In this example, we set the value of variable a to 10, and then we use the conditional operator to check if a is equal to 5. Since it is false, the value \"false\" is returned and assigned to the variable result, which is then printed in the HTML div element.\n</p>\n<b>Example 3:</b>\n<pre>\n  <code>\n {'<div id=\"example3\"></div>\\n<script>\\n var a = 7;\\n var result=(a>10)?\"greater than10\":(a < 5)?\"less than 5\":\"between5and10\";\\n document.getElementById(\"example3\").innerHTML=result;\\n</script>'}\n  </code>\n</pre>\n<p>\nOutput: between 5 and 10\n\nExplanation: In this example, we set the value of variable a to 7, and then we use the conditional operator to check if a is greater than 10. Since it is false, we move to the second condition which checks if a is less than 5. Since this is also false, we move to the third condition which returns the value \"between 5 and 10\" since it is the only option left. The result is then printed in the HTML div element.\n</p>\n    </div> */}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,SAASC,UAAUA,CAAA,EAAG;EACpB,oBAEFD,OAAA;IAAKE,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC/BH,OAAA,CAACI,OAAO;MAACC,EAAE,EAAC,cAAc;MAACH,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAAC;IAAe;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAU,eACrFT,OAAA,CAACI,OAAO;MAACC,EAAE,EAAC,OAAO;MAACH,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAC;IAAc;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAU;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAChE;AAEP;AAACC,EAAA,GARQT,UAAU;AAYnB,eAAeA,UAAU;AAmBvmNW,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}