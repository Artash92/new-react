{"ast":null,"code":"var _jsxFileName = \"/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_7.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JsEs5_7() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"java-script\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Object-Oriented Programming, or OOP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Object-Oriented Programming, or OOP, is a programming paradigm that emphasizes objects, classes, and encapsulation. In JavaScript ES5, OOP is implemented through the use of constructor functions and prototypes.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"A constructor function is a special function that is used to create and initialize objects. Constructor functions are defined using the function keyword, and their names usually start with a capital letter to distinguish them from regular functions. The this keyword is used inside the constructor function to refer to the object being created. Here's an example:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: ' function Person(name, age) {\\n  this.name = name;\\n  this.age = age;\\n}\\n\\nvar person1 = new Person(\"Alice\", 25);\\nvar person2 = new Person(\"Bob\", 30);\\n\\nconsole.log(person1.name); // \"Alice\"\\nconsole.log(person2.age); // 30'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"In this example, the Person function is used as a constructor function to create two Person objects, person1 and person2. The name and age properties are set using the this keyword inside the constructor function.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"In addition to constructor functions, prototypes are used to implement inheritance and share methods and properties between objects. Every object in JavaScript has a prototype, which is another object that the object inherits from. Properties and methods can be added to an object's prototype using the prototype property. Here's an example:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: 'function Person(name, age) {\\n  this.name = name;\\n  this.age = age;\\n}\\n\\nPerson.prototype.greet = function() {\\nconsole.log(\"Hello, my name is \" + this.name + \"and I am \" + this.age + \"years old.\");\\n};\\n\\nvar person1 = new Person(\"Alice\", 25);\\nvar person2 = new Person(\"Bob\", 30);\\n\\nperson1.greet(); // \"Hello, my name is Alice and I am 25 years old.\"\\nperson2.greet(); // \"Hello, my name is Bob and I am 30 years old.\"'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"In this example, a greet method is added to the Person prototype using the prototype property. This method can then be called on any Person object, as demonstrated by the person1.greet() and person2.greet() calls.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Another OOP concept in JavaScript ES5 is encapsulation, which refers to the practice of hiding implementation details and exposing only the necessary interfaces to the outside world. This can be achieved using closures, which allow functions to access variables in their outer scope even after the outer function has returned. Here's an example:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: 'function Counter() {\\n  var count = 0;\\n\\n  this.increment = function() {\\n    count++;\\n    console.log(count);\\n  };\\n\\n  this.decrement = function() {\\n    count--;\\n    console.log(count);\\n  };\\n}\\n\\nvar counter1 = new Counter();\\nvar counter2 = new Counter();\\n\\ncounter1.increment(); // 1\\ncounter1.increment(); // 2\\ncounter1.decrement(); // 1\\n\\ncounter2.increment(); // 1 '\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"In this example, the Counter constructor function creates objects with increment and decrement methods, which access a private count variable using closures. This ensures that the count variable is hidden from the outside world and can only be accessed through the methods provided by the Counter object.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Object-Oriented Programming (OOP) with primitive values in JavaScript ES5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: 'function Person(name, age, gender) {\\n  this.name = name;\\n  this.age = age;\\n  this.gender = gender;\\n\\n  this.printDetails = function() {\\n    console.log(\"Name: \" + this.name);\\n    console.log(\"Age: \" + this.age);\\n    console.log(\"Gender: \" + this.gender);\\n  }\\n}\\n\\nvar person1 = new Person(\"John\", 25, \"male\");\\nvar person2 = new Person(\"Jane\", 30, \"female\");\\n\\nperson1.printDetails();\\nperson2.printDetails();\\n\\nvar bool = new Boolean(true);\\nconsole.log(bool.valueOf()); // true\\n\\nvar str = new String(\"Hello\");\\nconsole.log(str.concat(\" World\")); // \"Hello World\"\\n\\nvar num = new Number(10);\\nconsole.log(num.valueOf() + 5); // 15'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"In this example, we define a Person constructor function to create person objects with name, age, and gender properties. We also define a printDetails method on the Person object to print out the person's details.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"We then create two Person objects using the constructor function and call the printDetails method for each object.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Next, we create Boolean, String, and Number objects using their respective constructor functions and demonstrate some of their methods, such as valueOf, concat, and basic arithmetic operation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = JsEs5_7;\nexport default JsEs5_7;\nvar _c;\n$RefreshReg$(_c, \"JsEs5_7\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","JsEs5_7","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_7.js"],"sourcesContent":["import React from 'react'\n\n function JsEs5_7() {\n  return (\n    <div className='java-script'>\n      <h1>Object-Oriented Programming, or OOP</h1>\n      <p>Object-Oriented Programming, or OOP, is a programming paradigm that emphasizes objects, classes, and encapsulation. In JavaScript ES5, \n        OOP is implemented through the use of constructor functions and prototypes.</p>\n      <p>\n      A constructor function is a special function that is used to create and initialize objects. Constructor functions are defined using the function keyword, and their names usually start with a capital letter to distinguish them from regular functions. The this keyword is used inside the constructor \n      function to refer to the object being created. Here's an example:\n      </p>\n      <pre>\n  <code>\n    {' function Person(name, age) {\\n  this.name = name;\\n  this.age = age;\\n}\\n\\nvar person1 = new Person(\"Alice\", 25);\\nvar person2 = new Person(\"Bob\", 30);\\n\\nconsole.log(person1.name); // \"Alice\"\\nconsole.log(person2.age); // 30'}\n  </code>\n</pre>\n<p>In this example, the Person function is used as a constructor function to create two \n  Person objects, person1 and person2. The name and age properties are set using the this keyword inside the constructor function.\n</p>\n<p>\nIn addition to constructor functions, prototypes are used to implement inheritance and share methods and properties between objects. Every object in JavaScript has a prototype, which is another object that the object inherits from. Properties and methods can be added to an object's prototype using the prototype property. Here's an example:\n</p>\n<pre>\n  <code>\n    {'function Person(name, age) {\\n  this.name = name;\\n  this.age = age;\\n}\\n\\nPerson.prototype.greet = function() {\\nconsole.log(\"Hello, my name is \" + this.name + \"and I am \" + this.age + \"years old.\");\\n};\\n\\nvar person1 = new Person(\"Alice\", 25);\\nvar person2 = new Person(\"Bob\", 30);\\n\\nperson1.greet(); // \"Hello, my name is Alice and I am 25 years old.\"\\nperson2.greet(); // \"Hello, my name is Bob and I am 30 years old.\"'}\n  </code>\n</pre>\n<p>\nIn this example, a greet method is added to the Person prototype using the prototype property. This method can then be called on any Person object, as demonstrated by the person1.greet() and person2.greet() calls. \n</p>\n<p>\nAnother OOP concept in JavaScript ES5 is encapsulation, which refers to the practice of hiding implementation details and exposing only the necessary interfaces to the outside world. This can be achieved using closures, which allow functions to access variables in their outer scope even after the outer function has returned. Here's an example: \n</p>\n<pre>\n  <code>\n    {'function Counter() {\\n  var count = 0;\\n\\n  this.increment = function() {\\n    count++;\\n    console.log(count);\\n  };\\n\\n  this.decrement = function() {\\n    count--;\\n    console.log(count);\\n  };\\n}\\n\\nvar counter1 = new Counter();\\nvar counter2 = new Counter();\\n\\ncounter1.increment(); // 1\\ncounter1.increment(); // 2\\ncounter1.decrement(); // 1\\n\\ncounter2.increment(); // 1 '}\n  </code>\n</pre>\n<p>\nIn this example, the Counter constructor function creates objects with increment and decrement methods, which access a private count variable using closures. This ensures that the count variable is hidden from the outside world and can only be accessed through the methods provided by the Counter object. \n</p>\n<b>Object-Oriented Programming (OOP) with primitive values in JavaScript ES5</b>\n<pre>\n  <code>\n    {'function Person(name, age, gender) {\\n  this.name = name;\\n  this.age = age;\\n  this.gender = gender;\\n\\n  this.printDetails = function() {\\n    console.log(\"Name: \" + this.name);\\n    console.log(\"Age: \" + this.age);\\n    console.log(\"Gender: \" + this.gender);\\n  }\\n}\\n\\nvar person1 = new Person(\"John\", 25, \"male\");\\nvar person2 = new Person(\"Jane\", 30, \"female\");\\n\\nperson1.printDetails();\\nperson2.printDetails();\\n\\nvar bool = new Boolean(true);\\nconsole.log(bool.valueOf()); // true\\n\\nvar str = new String(\"Hello\");\\nconsole.log(str.concat(\" World\")); // \"Hello World\"\\n\\nvar num = new Number(10);\\nconsole.log(num.valueOf() + 5); // 15'}\n  </code>\n</pre>\n<p>\nIn this example, we define a Person constructor function to create person objects with name, age, and gender properties. We also define a printDetails method on the Person object to print out the person's details.  \n</p>\n<p>\nWe then create two Person objects using the constructor function and call the printDetails method for each object.\n</p>\n<p>\nNext, we create Boolean, String, and Number objects using their respective constructor functions and demonstrate some of their methods, such as valueOf, concat, and basic arithmetic operation  \n</p>\n    </div>\n  )\n}\n\n\n\nexport default JsEs5_7;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,OAAOA,CAAA,EAAG;EAClB,oBACED,OAAA;IAAKE,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BH,OAAA;MAAAG,QAAA,EAAI;IAAmC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC5CP,OAAA;MAAAG,QAAA,EAAG;IAC0E;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACjFP,OAAA;MAAAG,QAAA,EAAG;IAGH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACJP,OAAA;MAAAG,QAAA,eACJH,OAAA;QAAAG,QAAA,EACG;MAAoO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAChO;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACH,eACNP,OAAA;MAAAG,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACJP,OAAA;MAAAG,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACJP,OAAA;MAAAG,QAAA,eACEH,OAAA;QAAAG,QAAA,EACG;MAA0a;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACta;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACH,eACNP,OAAA;MAAAG,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACJP,OAAA;MAAAG,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACJP,OAAA;MAAAG,QAAA,eACEH,OAAA;QAAAG,QAAA,EACG;MAAgY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAC5X;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACH,eACNP,OAAA;MAAAG,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACJP,OAAA;MAAAG,QAAA,EAAG;IAAyE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eAChFP,OAAA;MAAAG,QAAA,eACEH,OAAA;QAAAG,QAAA,EACG;MAAuoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACnoB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACH,eACNP,OAAA;MAAAG,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACJP,OAAA;MAAAG,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACJP,OAAA;MAAAG,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACM;AAEV;AAACC,EAAA,GAzDSP,OAAO;AA6DjB,eAAeA,OAAO;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}