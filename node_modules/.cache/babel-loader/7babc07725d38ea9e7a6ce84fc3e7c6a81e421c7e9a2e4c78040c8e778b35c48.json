{"ast":null,"code":"var _jsxFileName = \"/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_4.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JsEs5_4() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"java-script\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Recursion \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Recursion is a programming technique where a function calls itself until it reaches a base case. It is often used to solve problems that can be broken down into smaller, similar sub-problems. In JavaScript ES5, recursion can be used to traverse through a tree or a nested structure, to perform certain calculations or to generate all possible combinations of a set of elements. Here's an example of a function that uses recursion to calculate the factorial of a given number:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: 'function factorial(num) {\\n  if (num <= 1) {\\n    return 1;\\n  } else {\\n    return num * factorial(num - 1);\\n  }\\n}\\n\\nconsole.log(factorial(5)); // Output: 120'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: [\"In this example, the factorial() function calls itself with a smaller \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 71\n        }, this), \"number until it reaches the base case of  \", 'num <=', \" , at which point it \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 149\n        }, this), \"returns 1. The final result is calculated by multiplying all the \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 220\n        }, this), \" returned values together.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"It's important to note that recursion can be memory-intensive, especially for large inputs, so it's important to design your recursive functions carefully and ensure they have a base case to prevent infinite loops.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: '<div id=\"example1\"></div>\\n<script>\\nfunction factorial(num) {\\n  if (num === 0 || num === 1) {\\n    return 1;\\n  } else {\\n    return num * factorial(num - 1);\\n  }\\n}\\n\\nvar result = factorial(5);\\nconsole.log(result); // Output: 120\\n</script>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n_c = JsEs5_4;\nexport default JsEs5_4;\nvar _c;\n$RefreshReg$(_c, \"JsEs5_4\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","JsEs5_4","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/artashes/Desktop/codeex/codeex/src/pages/JsEs5_4.js"],"sourcesContent":["import React from 'react'\n\n function JsEs5_4() {\n  return (\n    <div className='java-script'>\n      <h1>Recursion </h1>\n      <p>\n      Recursion is a programming technique where a function calls itself until it reaches a base case. It is often used to solve problems that can be broken down into smaller, similar sub-problems.\n\nIn JavaScript ES5, recursion can be used to traverse through a tree or a nested structure, to perform certain calculations or to generate all possible combinations of a set of elements.\n\nHere's an example of a function that uses recursion to calculate the factorial of a given number:\n      </p>\n      <pre>\n  <code>\n    {'function factorial(num) {\\n  if (num <= 1) {\\n    return 1;\\n  } else {\\n    return num * factorial(num - 1);\\n  }\\n}\\n\\nconsole.log(factorial(5)); // Output: 120'}\n  </code>\n</pre>\n<pre>\n  <code>\nIn this example, the factorial() function calls itself with a smaller <br/>number until it reaches the base case of  {'num <='} , at which point it <br />returns 1. The final result is calculated by multiplying all the <br/> returned values together.\n  </code>\n</pre>\n<p>\nIt's important to note that recursion can be memory-intensive, especially for large inputs, so it's important to design your recursive functions carefully and ensure they have a base case to prevent infinite loops.\n</p>\n<pre>\n  <code>\n    {'<div id=\"example1\"></div>\\n<script>\\nfunction factorial(num) {\\n  if (num === 0 || num === 1) {\\n    return 1;\\n  } else {\\n    return num * factorial(num - 1);\\n  }\\n}\\n\\nvar result = factorial(5);\\nconsole.log(result); // Output: 120\\n</script>'}\n  </code>\n</pre>\n    </div>\n  )\n}\n\n\n\nexport default JsEs5_4;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,OAAOA,CAAA,EAAG;EAClB,oBACED,OAAA;IAAKE,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BH,OAAA;MAAAG,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACnBP,OAAA;MAAAG,QAAA,EAAG;IAMH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACJP,OAAA;MAAAG,QAAA,eACJH,OAAA;QAAAG,QAAA,EACG;MAAoK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAChK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACH,eACNP,OAAA;MAAAG,QAAA,eACEH,OAAA;QAAAG,QAAA,GAAM,wEAC8D,eAAAH,OAAA;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,8CAA0C,EAAC,QAAQ,EAAC,uBAAqB,eAAAP,OAAA;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,qEAAiE,eAAAP,OAAA;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAK,8BAC9N;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAO;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACH,eACNP,OAAA;MAAAG,QAAA,EAAG;IAEH;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eACJP,OAAA;MAAAG,QAAA,eACEH,OAAA;QAAAG,QAAA,EACG;MAAwP;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACpP;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACI;AAEV;AAACC,EAAA,GA/BSP,OAAO;AAmCjB,eAAeA,OAAO;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}