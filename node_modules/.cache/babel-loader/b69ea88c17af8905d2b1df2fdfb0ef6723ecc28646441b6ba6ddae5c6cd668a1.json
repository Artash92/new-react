{"ast":null,"code":"var _jsxFileName = \"/home/artashes/Desktop/codeex/codeex/src/pages/JSES5_2.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction JsEs5_2() {\n  _s();\n  const [language, setLanguage] = useState('en');\n  const texts = {\n    en: {\n      title: 'HTML',\n      content: 'HTML, which stands for HyperText Markup Language, is a markup language used to create and structure' + 'content on the web. It is the backbone of every website and serves as the building blocks of web pages.' + 'HTML is a declarative language, meaning it is used to describe the content and structure of a web page,' + 'but not necessarily its appearance.' + 'HTML was created by Tim Berners-Lee in the early 1990s while working at CERN, the European Organization for Nuclear Research.' + 'Berners-Lee was looking for a way to share and organize information among researchers, and HTML was the solution he came up with.' + 'HTML was designed to be a simple language that could be easily understood and used by anyone, regardless of their technical background.' + 'HTML is made up of a series of elements, which are represented by tags. Tags are enclosed in angle brackets and are used to define the structure and content of a web page. For example,' + 'the  < head > tag is used to define the head section of a web page, which typically contains information such as the title of the page and links to external stylesheets and scripts. The  < body > ' + 'tag is used to define the body section of a web page, which contains the main content of the page.' + 'HTML is a constantly evolving language, with new versions being released periodically. ' + 'The current version of HTML is HTML5, which was released in 2014. HTML5 introduced many new ' + 'features and capabilities, such as video and audio tags, canvas elements for drawing graphics,' + 'and semantic tags for better accessibility and SEO.' + ' In summary, HTML is a markup language used to create and structure content on the web. It was created by Tim Berners-Lee in the early 1990s and is the backbone of every website. HTML is made up of a series of elements represented by tags, and it is a constantly evolving language with new versions being released periodically.'\n    },\n    ru: {\n      title: 'HTML',\n      content: 'HTML, что означает язык гипертекстовой разметки, является языком разметки, используемым для создания и структурирования контента в Интернете ...'\n    },\n    hy: {\n      title: 'HTML',\n      content: 'HTML, որը նշանակում է HyperText Markup Language, նշանակվում է նաև նշանակում է կառուցելու և կառուցելու բոլոր բովանդակությունները վեբում ։...'\n    }\n  };\n\n  // функция, которая изменяет состояние языка при нажатии на кнопку\n  const handleLanguageChange = lang => {\n    setLanguage(lang);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"java-script\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleLanguageChange('en'),\n      children: \"English\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleLanguageChange('ru'),\n      children: \"\\u0420\\u0443\\u0441\\u0441\\u043A\\u0438\\u0439\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleLanguageChange('hy'),\n      children: \"\\u0540\\u0561\\u0575\\u0565\\u0580\\u0565\\u0576\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: texts[language].title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: texts[language].content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"JavaScript Loops and Conditionals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"1. The while loop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The while loop is used to execute a block of code repeatedly while a specified condition is true. Here is an example:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: 'var i = 0; // initialize the counter variable\\nwhile (i < 5) { // set the condition\\n  console.log(i); // execute the code block\\n  i++; // update the counter variable\\n}'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"In this example, the loop will run as long as the value of i is less than 5. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 until it reaches 5. The output of this code will be:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 1\n      }, this), \"0\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }, this), \"1\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), \"2\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 19\n      }, this), \"3\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }, this), \"4\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"2. The for loop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The for loop is used to execute a block of code a specified number of times. Here is an example:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: 'for (var i = 0; i < 5; i++) {\\n  console.log(i);\\n}'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"In this example, the loop will run 5 times, since the condition specifies that i must be less than 5. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 each time. The output of this code will be the same as the previous example:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 1\n      }, this), \"0\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }, this), \"1\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), \"2\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }, this), \"3\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this), \"4\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"3. The do-while loop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The do-while loop is similar to the while loop, but it executes the code block at least once, even if the condition is initially false. Here is an example:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: 'var i = 0; // initialize the counter variable\\ndo {\\n  console.log(i); // execute the code block\\n  i++; // update the counter variable\\n} while (i < 5); // set the condition'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"In this example, the loop will run at least once, since the condition is checked after the code block is executed. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 each time, until it reaches 5. The output of this code will be the same as the previous examples:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 1\n      }, this), \"0\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this), \"1\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), \"2\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }, this), \"3\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }, this), \"4\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"4. The ++ and -- operators\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The ++ and -- operators are used to increment or decrement a variable by 1. Here are some examples:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: 'var i = 0; // initialize a variable\\ni++; // increment the variable\\nconsole.log(i); // output: 1\\n\\nvar j = 2; // initialize another variable\\nj--; // decrement the variable\\nconsole.log(j); // output: 1'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"These operators are often used in loops to keep track of the current iteration.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"5. The if, else, and else if statements\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The if statement is used to execute a block of code if a specified condition is true. The else statement is used to execute a block of code if the condition is false. The else if statement is used to test multiple conditions. Here is an example:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: 'var x = 10; // initialize a variable\\nif (x > 10) { // check the condition\\n  console.log(\"x is greater than 10\")'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Conditional (ternary) Operator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The Conditional (ternary) Operator is a shorthand way of writing an if-else statement in JavaScript. It takes three operands: a condition, a value to return if the condition is true, and a value to return if the condition is false. The syntax for the conditional operator is: (condition) ? true-value : false-value Here are some examples of using the conditional operator in JavaScript:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Example 1:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: '<div id=\"example1\"></div>\\n<script>\\n  var a = 5;\\n  var result = (a == 5) ? \"true\" : \"false\";\\n  document.getElementById(\"example1\").innerHTML = result;\\n</script>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Output: true Explanation: In this example, we set the value of variable a to 5, and then we use the conditional operator to check if a is equal to 5. Since it is true, the value \\\"true\\\" is returned and assigned to the variable result, which is then printed in the HTML div element.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Example 2:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: '<div id=\"example2\"></div>\\n<script>\\n  var a = 10;\\n  var result = (a == 5) ? \"true\" : \"false\";\\n  document.getElementById(\"example2\").innerHTML = result;\\n</script>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Output: false Explanation: In this example, we set the value of variable a to 10, and then we use the conditional operator to check if a is equal to 5. Since it is false, the value \\\"false\\\" is returned and assigned to the variable result, which is then printed in the HTML div element.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n      children: \"Example 3:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: '<div id=\"example3\"></div>\\n<script>\\n var a = 7;\\n var result=(a>10)?\"greater than10\":(a < 5)?\"less than 5\":\"between5and10\";\\n document.getElementById(\"example3\").innerHTML=result;\\n</script>'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Output: between 5 and 10 Explanation: In this example, we set the value of variable a to 7, and then we use the conditional operator to check if a is greater than 10. Since it is false, we move to the second condition which checks if a is less than 5. Since this is also false, we move to the third condition which returns the value \\\"between 5 and 10\\\" since it is the only option left. The result is then printed in the HTML div element.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(JsEs5_2, \"fVUtOCD1O58HgvMjnE8lxRQa0QA=\");\n_c = JsEs5_2;\nexport default JsEs5_2;\nvar _c;\n$RefreshReg$(_c, \"JsEs5_2\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","JsEs5_2","_s","language","setLanguage","useState","texts","en","title","content","ru","hy","handleLanguageChange","lang","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/artashes/Desktop/codeex/codeex/src/pages/JSES5_2.js"],"sourcesContent":["import React from 'react'\n\n function JsEs5_2() {\n  const [language, setLanguage] = useState('en');\n  \n  const texts = {\n    en: {\n      title: 'HTML',\n      content: 'HTML, which stands for HyperText Markup Language, is a markup language used to create and structure' +\n      'content on the web. It is the backbone of every website and serves as the building blocks of web pages.'+ \n      'HTML is a declarative language, meaning it is used to describe the content and structure of a web page,'+ \n      'but not necessarily its appearance.' +\n      'HTML was created by Tim Berners-Lee in the early 1990s while working at CERN, the European Organization for Nuclear Research.' +  \n      'Berners-Lee was looking for a way to share and organize information among researchers, and HTML was the solution he came up with.'  +\n      'HTML was designed to be a simple language that could be easily understood and used by anyone, regardless of their technical background.'+\n      'HTML is made up of a series of elements, which are represented by tags. Tags are enclosed in angle brackets and are used to define the structure and content of a web page. For example,' +\n      'the  < head > tag is used to define the head section of a web page, which typically contains information such as the title of the page and links to external stylesheets and scripts. The  < body > '+\n      'tag is used to define the body section of a web page, which contains the main content of the page.' +\n      'HTML is a constantly evolving language, with new versions being released periodically. '+ \n      'The current version of HTML is HTML5, which was released in 2014. HTML5 introduced many new '+\n      'features and capabilities, such as video and audio tags, canvas elements for drawing graphics,'+ \n      'and semantic tags for better accessibility and SEO.'+\n      ' In summary, HTML is a markup language used to create and structure content on the web. It was created by Tim Berners-Lee in the early 1990s and is the backbone of every website. HTML is made up of a series of elements represented by tags, and it is a constantly evolving language with new versions being released periodically.' \n    },\n    ru: {\n      title: 'HTML',\n      content: 'HTML, что означает язык гипертекстовой разметки, является языком разметки, используемым для создания и структурирования контента в Интернете ...',\n    },\n    hy: {\n      title: 'HTML',\n      content: 'HTML, որը նշանակում է HyperText Markup Language, նշանակվում է նաև նշանակում է կառուցելու և կառուցելու բոլոր բովանդակությունները վեբում ։...',\n    }\n  };\n\n  // функция, которая изменяет состояние языка при нажатии на кнопку\n  const handleLanguageChange = (lang) => {\n    setLanguage(lang);\n  }\n  \n  \n  \n  return (\n    <div className='java-script'>\n        <button onClick={() => handleLanguageChange('en')}>English</button>\n      <button onClick={() => handleLanguageChange('ru')}>Русский</button>\n      <button onClick={() => handleLanguageChange('hy')}>Հայերեն</button>\n      <h1>{texts[language].title}</h1>\n      <p>{texts[language].content}</p>\n        <h3>JavaScript Loops and Conditionals</h3>\n  <b>1. The while loop</b>\n  <p>The while loop is used to execute a block of code repeatedly while a specified condition is true.\n\nHere is an example:</p>\n  <pre>\n    <code>\n    {'var i = 0; // initialize the counter variable\\nwhile (i < 5) { // set the condition\\n  console.log(i); // execute the code block\\n  i++; // update the counter variable\\n}'}\n    </code>\n  </pre>\n  <p>\n  In this example, the loop will run as long as the value of i is less than 5. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 until it reaches 5.\nThe output of this code will be:\n<br/>0<br/>1<br/>2<br/>3<br/>4\n  </p>\n  <b>2. The for loop</b>\n  <p>The for loop is used to execute a block of code a specified number of times.\nHere is an example:</p>\n<pre>\n    <code>\n      {'for (var i = 0; i < 5; i++) {\\n  console.log(i);\\n}'}\n    </code>\n  </pre>\n  <p>\n  In this example, the loop will run 5 times, since the condition specifies that i must be less than 5. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 each time.\n\nThe output of this code will be the same as the previous example:\n<br/>0<br/>1<br/>2<br/>3<br/>4\n  </p>\n  <b>3. The do-while loop</b>\n  <p>\n  The do-while loop is similar to the while loop, but it executes the code block at least once, even if the condition is initially false.\nHere is an example:\n  </p>\n  <pre>\n    <code>\n      {'var i = 0; // initialize the counter variable\\ndo {\\n  console.log(i); // execute the code block\\n  i++; // update the counter variable\\n} while (i < 5); // set the condition'}\n    </code>\n  </pre>\n  <p>\n  In this example, the loop will run at least once, since the condition is checked after the code block is executed. The code block will be executed each time the loop runs, and the value of i will be incremented by 1 each time, until it reaches 5.\nThe output of this code will be the same as the previous examples:\n<br/>0<br/>1<br/>2<br/>3<br/>4\n  </p>\n  <b>4. The ++ and -- operators</b>\n  <p>\n  The ++ and -- operators are used to increment or decrement a variable by 1.\n  Here are some examples:\n  </p>\n  <pre>\n    <code>\n      {'var i = 0; // initialize a variable\\ni++; // increment the variable\\nconsole.log(i); // output: 1\\n\\nvar j = 2; // initialize another variable\\nj--; // decrement the variable\\nconsole.log(j); // output: 1'}\n    </code>\n  </pre>\n  <p>These operators are often used in loops to keep track of the current iteration.</p>\n  <b>5. The if, else, and else if statements</b>\n  <p>\n  The if statement is used to execute a block of code if a specified condition is true. The else statement is used to execute a block of code if the condition is false. The else if statement is used to test multiple conditions.\nHere is an example:\n  </p>\n  <pre>\n    <code>\n      {'var x = 10; // initialize a variable\\nif (x > 10) { // check the condition\\n  console.log(\"x is greater than 10\")'}\n    </code>\n  </pre>\n  <h3>Conditional (ternary) Operator</h3>\n  <p>\n  The Conditional (ternary) Operator is a shorthand way of writing an if-else statement in JavaScript. It takes three operands: a condition, a value to return if the condition is true, and a value to return if the condition is false.\n\nThe syntax for the conditional operator is: (condition) ? true-value : false-value\n\nHere are some examples of using the conditional operator in JavaScript:\n  </p>\n  <b>Example 1:</b>\n  <pre>\n  <code>\n    {'<div id=\"example1\"></div>\\n<script>\\n  var a = 5;\\n  var result = (a == 5) ? \"true\" : \"false\";\\n  document.getElementById(\"example1\").innerHTML = result;\\n</script>'}\n  </code>\n</pre>\n<p>\nOutput: true\n\nExplanation: In this example, we set the value of variable a to 5, and then we use the conditional operator to check if a is equal to 5. Since it is true, the value \"true\" is returned and assigned to the variable result, which is then printed in the HTML div element.\n</p>\n<b>Example 2:</b>\n<pre>\n  <code>\n    {'<div id=\"example2\"></div>\\n<script>\\n  var a = 10;\\n  var result = (a == 5) ? \"true\" : \"false\";\\n  document.getElementById(\"example2\").innerHTML = result;\\n</script>'}\n  </code>\n</pre>\n<p>\nOutput: false\n\nExplanation: In this example, we set the value of variable a to 10, and then we use the conditional operator to check if a is equal to 5. Since it is false, the value \"false\" is returned and assigned to the variable result, which is then printed in the HTML div element.\n</p>\n<b>Example 3:</b>\n<pre>\n  <code>\n {'<div id=\"example3\"></div>\\n<script>\\n var a = 7;\\n var result=(a>10)?\"greater than10\":(a < 5)?\"less than 5\":\"between5and10\";\\n document.getElementById(\"example3\").innerHTML=result;\\n</script>'}\n  </code>\n</pre>\n<p>\nOutput: between 5 and 10\n\nExplanation: In this example, we set the value of variable a to 7, and then we use the conditional operator to check if a is greater than 10. Since it is false, we move to the second condition which checks if a is less than 5. Since this is also false, we move to the third condition which returns the value \"between 5 and 10\" since it is the only option left. The result is then printed in the HTML div element.\n</p>\n    </div>\n  )\n}\n\n\n\nexport default JsEs5_2;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}