import React from 'react'

function RuReact_4() {
  return (
    <div>
      
      <h1>Получение данных в React(Fetch Data)</h1>

      <p>1. Получение данных с помощью API fetch:</p>

  <code>
    
    <p>{" fetch('https://api.example.com/data') "}</p>

    <p>{'.then(response => response.json())'}</p>

    <p>{'.then(data => console.log(data))'}</p>

    <p>{'.catch(error => console.error(error))'}</p>

  </code>

<p>В этом примере мы отправляем запрос на сервер, используя API <b>fetch</b>. Объект <b>response</b> преобразуется в формат JSON с помощью метода <b>json()</b>, а полученные данные выводятся в консоль. Если происходит ошибка, она перехватывается и выводится в консоль.</p>


<p>2. Отображение полученных данных в состоянии компонента:</p>

<code>

    <p><b>{"import React, { useState, useEffect } from 'react'; "}</b></p>

    <p>{'function MyComponent() { '}</p>

    <p>{'const [data, setData] = useState([]); '}</p>

    <p>{'useEffect(() => { '}</p>

    <p>{"fetch('https://api.example.com/data') "}</p>

    <p>{'.then(response => response.json()) '}</p>

    <p>{'.then(data => setData(data))'}</p>

    <p>{'.catch(error => console.error(error));'}</p>

    <p>{'}, []);'}</p>

    <p>{'return ( '}</p>

    <p>{'<div>'}</p>

    <p>{'{data.map(item => ('}</p>

    <p>{'<p key={item.id}>{item.name}</p> '}</p>

    <p>{'))} '}</p>

    <p>{'</div> '}</p>

    <p>{'); '}</p>

    <p>{'}'}</p>
    
</code>    

<p>В этом примере мы используем хук <b>useState</b> для определения переменной состояния с именем <b>data</b>. Мы также используем хук <b>useEffect</b> для получения данных с сервера при монтировании компонента и обновления переменной состояния <b>data</b> полученными данными. Наконец, мы используем метод <b>map</b> для перебора массива данных и отображения каждого элемента в виде элемента параграфа.</p>
  
  <h1>Axios</h1>
  
  <p>Как Fetch, так и Axios являются библиотеками JavaScript, используемыми для выполнения HTTP-запросов из браузера или среды Node.js. Однако между ними есть некоторые отличия.</p>
  
  <p>Fetch является встроенным в браузер API, который использует промисы для обработки запросов и ответов. У него более простой синтаксис и проще использовать для простых запросов, но у него отсутствуют некоторые расширенные функции, такие как отмена запроса, события прогресса и автоматическая повторная отправка запроса.</p>  
  
  <p>Axios является популярной сторонней библиотекой, которая предоставляет более функциональный и мощный API для выполнения HTTP-запросов. Он поддерживает отмену запроса, события прогресса и автоматическую повторную отправку из коробки, а также имеет встроенную поддержку для обработки данных ответа, таких как JSON, XML и FormData.</p>
  
  <p>В отношении того, почему лучше использовать Axios вместо Fetch, это действительно зависит от конкретных потребностей вашего проекта. Если вы создаете простое веб-приложение, которому нужно только выполнять базовые запросы, то Fetch может быть достаточным. Однако, если вам нужны более расширенные функции и мощный API для обработки запросов и ответов, то Axios является лучшим выбором.</p>  
  
  <p>Некоторые преимущества использования Axios перед Fetch включают:</p>
  
  <p>1. Лучшая обработка ошибок: Axios имеет более надежную систему обработки ошибок и предоставляет более полезные сообщения об ошибках по сравнению с Fetch.</p>  

  <p>2. Перехватчики: Axios предоставляет перехватчики, которые позволяют вам изменять запросы или ответы перед их отправкой или получением.</p>  
  
  <p>3. Автоматическое преобразование данных запросов и ответов: Axios может автоматически преобразовывать данные запросов и ответов в различные форматы, такие как JSON, что может быть очень полезным при работе с API.</p>  
  
  <p>4. Легкая отмена запросов: Axios предоставляет простой способ отмены запросов, что может быть полезно при работе с медленными или ненадежными сетями.</p>  
  
  <p>В общем, как Fetch, так и Axios являются полезными инструментами для отправки HTTP-запросов в JavaScript, но Axios предоставляет более продвинутые функции и более мощный API, который может быть очень полезен при создании более сложных приложений.</p>  
  
  <p><b>Axios</b> - это библиотека для отправки HTTP-запросов из браузера или Node.js. Она упрощает отправку запросов с использованием обещаний и обработку ответов.</p> 
  
  <p>Чтобы использовать Axios в React.js, вам сначала необходимо установить его с помощью команды:</p> 
  
  <b>npm install axios</b>

<p>После этого вы можете использовать Axios в своих компонентах React. Например, следующий код отправляет GET-запрос на удаленный сервер и отображает ответ на странице:</p>

<code>
  
  <p>{'import React, { useState, useEffect } from "react";'}</p>  

  <p>{'import axios from "axios"; '}</p>

  <p>{'function App() { '}</p>  

  <p>{'const [data, setData] = useState("");'}</p>

  <p>{'useEffect(() => { '}</p>

  <p>{'axios.get(" https://jsonplaceholder. typicode.com/todos/1 "). then((response) => { '}</p>

  <p>{'setData(response.data); '}</p>

  <p>{'}); '}</p>

  <p>{' }, []);'}</p>

  <p>{' return <div>{data.title}</div>;'}</p>

  <p>{'}'}</p>

  <p>{'export default App; '}</p>
   
  </code> 

  <p>В этом примере используется хук <b>useEffect</b> для отправки GET-запроса на сервер и обновления переменной состояния <b>data</b> ответом. Затем переменная data отображается на странице с помощью JSX.</p>  

  <p>Кроме того, Axios поддерживает другие методы HTTP, такие как POST, PUT и DELETE, которые можно использовать для отправки данных на сервер и изменения ресурсов. Объект axios также предоставляет множество параметров конфигурации, таких как установка заголовков, тайм-аутов и перехватчиков запросов, которые позволяют настраивать поведение запросов.</p>  

  <p>В целом, Axios является мощной и гибкой библиотекой для работы с HTTP-запросами в React.js, которая может упростить многие общие задачи, такие как получение данных из удаленного API.</p> 

  <p>Протокол HTTP поддерживает несколько методов запросов, которые позволяют выполнять различные операции с данными. Вот краткое описание четырех основных методов запросов, а также примеры их использования в React:</p> 

  <p>1. <b>GET</b>: метод запроса, используемый для получения данных с сервера. В React вы можете использовать метод <b>axios.get</b>.</p>

  <code>
  
  <p>{" axios.get('/api/data')"}</p>

  <p>{'.then(response => { '}</p>

  <p>{'console.log(response.data); '}</p>

  <p>{'})'}</p>

  <p>{'.catch(error => {' }</p>

  <p>{'console.log(error);'}</p>
  
  <p>{'});'}</p>  
    
  </code> 

  <p>В этом примере мы получаем данные из конечной точки <b>/api/data</b>. Данные ответа записываются в консоль в случае успешного запроса, а любые ошибки перехватываются и записываются в консоль.</p>
  
  <p>2. <b>PUT</b>: метод запроса, используемый для обновления существующих данных на сервере. В React вы можете использовать метод <b>axios.put</b>:</p>

  <code>
  
  <p>{"axios.put('/api/data/1', { newData: 'updatedData' })"}</p>

  <p>{ '.then(response => {' }</p>

  <p>{'console.log(response.data);'}</p>  

  <p>{'})'}</p>

  <p>{'.catch(error => {'}</p>

  <p>{'console.log(error);'}</p>

  <p>{'});'}</p>

  </code>

  <p>В этом примере мы обновляем данные в конечной точке <b>/api/data/1</b>. Мы отправляем полезную нагрузку с новыми данными вторым аргументом в <b>axios.put</b>. Данные ответа записываются в консоль в случае успешного запроса, а любые ошибки перехватываются и записываются в консоль.</p>
  
  <p>3. <b>POST</b>: метод запроса, используемый для создания новых данных на сервере. В React вы можете использовать метод <b>axios.post</b>:</p>

  <code>
  
  <p>{"axios.post('/api/data', { newData: 'newData' })"}</p>

  <p>{'.then(response => {'}</p>

  <p>{'console.log(response.data);'}</p>

  <p>{'})'}</p>  

  <p>{'.catch(error => {'}</p>

  <p>{' console.log(error);'}</p> 

  <p>{'});'}</p> 
    
  </code>  

  <p>В этом примере мы создаем новые данные в конечной точке <b>/api/data</b>. Мы отправляем полезную нагрузку с новыми данными вторым аргументом в <b>axios.post</b>. Данные ответа записываются в консоль в случае успешного запроса, а любые ошибки перехватываются и записываются в консоль.</p>
  
  <p>4. <b>DELETE</b>: метод запроса, используемый для удаления существующих данных на сервере. В React вы можете использовать метод <b>axios.delete</b>:</p>

  <code>
    <p>{" axios.delete('/api/data/1') "}</p>

    <p>{'.then(response => { '}</p>

    <p>{'console.log(response.data); '}</p>

    <p>{'}) '}</p>

    <p>{'.catch(error => { '}</p>

    <p>{'console.log(error);'}</p>

    <p>{'});'}</p>
    
    </code> 

    <p>В этом примере мы удаляем данные по адресу <b>/api/data/1</b>. Если запрос выполнен успешно, то ответные данные будут зарегистрированы в консоли, а любые ошибки будут перехвачены и зарегистрированы в консоли.</p>
    
    <p>Для получения дополнительной информации о библиотеке Axios, пожалуйста, посетите их официальный веб-сайт: <a href="https://axios-http.com" target='_blank'>👉🏼 https://axios-http.com</a></p>


    </div>
  )
}

export default RuReact_4;