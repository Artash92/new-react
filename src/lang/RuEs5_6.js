import React from 'react'

 function RuEs5_6() {

  return (

<div>

    <h3>Глобальный объект в JavaScript</h3>

<p>
Глобальный объект в JavaScript - это встроенный объект, который доступен везде в коде. Он предоставляет свойства и методы, используемые различными частями языка, и может также быть расширен с помощью пользовательских функций.
</p>

<div>

    <p>Некоторые из свойств и методов глобального объекта в JavaScript:</p>

    <p>1. Infinity - представляет математическое значение бесконечности</p>

    <p>Пример: console.log(Infinity);</p>

    <p>2. NaN - представляет значение "не число".</p>

    <p>Пример: console.log(NaN);</p>

    <p>3. console - предоставляет методы для записи информации в консоль.</p>

    <p>Пример: console.log('Привет, мир!');</p>

    <p>4. parseInt() - преобразует строку в целое число.</p>

    <p>Пример: console.log(parseInt('10'));</p>

    <p>5. parseFloat() - преобразует строку в число с плавающей точкой.</p>

    <p>Пример: console.log(parseFloat('3.14'));</p>

    <p>6. encodeURIComponent() - кодирует компонент URI.</p>

    <p>7. Date - предоставляет методы для работы с датами и временем.</p>

    <p>Пример: console.log(new Date());</p>

    <p>8. Math - предоставляет математические функции и константы.</p>

    <p>Пример: console.log(Math.PI);</p>

</div>

<p>
Методы глобального объекта могут быть вызваны откуда угодно в коде, без необходимости создавать экземпляр объекта. Однако необходимо быть осторожным при расширении глобального объекта с помощью пользовательских методов, так как они могут потенциально конфликтовать с встроенными методами или другими пользовательскими методами. 
</p>

<p>
Важно отметить, что в современных средах JavaScript глобальный объект не всегда доступен во всех контекстах, таких как код на основе модулей или в строгом режиме.
</p>

<h3>Работа со строками в JavaScript ES5</h3>

<p>
В JavaScript ES5 строка представляет собой последовательность символов и может быть обработана с помощью различных методов. Два метода для извлечения подстрок из строки - это slice() и substring().
</p>

<p>
Метод slice() извлекает секцию строки и возвращает ее в виде новой строки, не изменяя исходную строку. Он принимает два параметра: начальный индекс и конечный индекс (необязательный). Если конечный индекс не предоставлен, метод извлечет до конца строки. Если начальный индекс отрицательный, он считает с конца строки.
</p>

<p>
Метод substring() похож на slice(), но не принимает отрицательные индексы. Если начальный индекс больше конечного индекса, два индекса меняются местами, чтобы избежать ошибки.
</p>

<p>Вот несколько примеров</p>

<p>{'// Получение подстроки "is"'}</p>

<p>{'str.slice(5, 7); //"is"'}</p>

<p>{'str.substring(5, 7); //"is"'}</p>

<hr/>

<p>{'// Получение подстроки "is"'}</p>

<p>{'console.log(str.slice(5, 7)); //"is"'}</p>

<p>{'console.log(str.substring(5, 7)); //"is"'}</p>

<p>{'// Получение подстроки "is my text"'}</p>

<p>{'console.log(str.slice(5)); //"is my text"'}</p>

<p>{'console.log(str.substring(5)); //"is my text"'}</p>

<hr/>

<p>{'// Получить подстроку " "'}</p>

<p>{'console.log(str.slice(7, 5)); //" "'}</p>

<p>{'console.log(str.substring(7, 5)); //"is"'}</p>

<hr/>

<p>{' // Получить подстроку "my"'}</p>

<p>{'console.log(str.slice(-7, -5)); //"my"'}</p>

<p>{'console.log(str.substring(7, 5)); //" "'}</p>

<p>В приведенных выше примерах функции slice() и substring() используются для извлечения подстрок из переменной str. В первом примере извлекается подстрока "is", а во втором примере - "is my text". Третий и четвертый примеры показывают, как функции slice() и substring() обрабатывают случаи, когда индексы выходят за границы строки. Наконец, пятый пример показывает, как функция slice() может использоваться с отрицательными индексами для извлечения подстроки с конца строки.</p>

<h3>Тема: "Поиск подстроки" в JavaScript ES5.</h3>

<p>В JavaScript можно искать определенную подстроку в строке с помощью различных методов. Вот некоторые из наиболее распространенных:</p>

<p>1. Тема: "Поиск подстроки" в JavaScript ES5.
В JavaScript можно искать определенную подстроку в строке с помощью различных методов. Вот некоторые из наиболее распространенных:</p>

<p>indexOf(substring, start): Этот метод ищет подстроку в строке и возвращает индекс первого вхождения подстроки. Вы также можете указать начальную позицию поиска, передав необязательный параметр start. Если подстрока не найдена, возвращается -1.</p>

<b>Пример</b>

 
  <code>
    {'var message = "Привет, мир";\nvar index = message.indexOf("мир");\nconsole.log(index); // 8'}
  </code>
 

<p>
 2. lastIndexOf(substring, end): Этот метод работает так же, как и indexOf, но ищет последнее вхождение подстроки в строку, ища задом наперед от конца строки. Вы также можете указать конечную позицию поиска, передав необязательный параметр end.
</p>

<b>Пример</b>

<p>{'var message = "Привет, мир, привет!";'}</p>

<p>{'var index = message.lastIndexOf("привет");'}</p>

<p>{'console.log(index); // 13'}</p>
<p>
  Обратите внимание, что регистр подстроки имеет значение при использовании этих методов. Например, поиск "мир" в строке "Привет, мир" не найдет подстроку, так как она написана с заглавной буквы.
</p>

<p>3.includes(substring): Этот метод проверяет, присутствует ли заданная подстрока в строке, и возвращает логическое значение, указывающее на результат.</p>

    <b>Пример</b>

     
  <code>
    {'var found = message.includes("мир");\nconsole.log(found); // true'}
  </code>
 
<p>4. search(regex): Этот метод ищет регулярное выражение в строке и возвращает индекс первого совпадения. Если совпадение не найдено, он возвращает -1.</p>
   
<b>Пример</b>

<p>{'var message = "Привет мир, привет!";'}</p>

<p>{'var index = message.search(/привет/i);//флаг "i" делает поиск без учета регистра'}</p>

<p>{'console.log(index);// 0'}</p>

<p>В вашем примере переменная str содержит строку "This is my text". Следующие строки кода демонстрируют использование методов поиска строк, описанных выше:</p>

<p>{'var str = "This is my text";'}</p>

<p>{'console.log(str.indexOf("is")); //2'}</p>

<p>{'console.log(str.indexOf("is", 3)); //5'}</p>

<p>{'console.log(str.lastIndexOf("is")); //5'}</p>

<p>{'console.log(str.lastIndexOf("is", 4)); //2'}</p>

<p>{'console.log(str.indexOf("some")); //-1'}</p>

<p>Эти строки кода ищут подстроки "is" и "some" в строке str и возвращают их индексы, используя методы indexOf и lastIndexOf. Второй параметр indexOf указывает начальную позицию поиска, а второй параметр lastIndexOf указывает конечную позицию поиска.</p>

<h3>RegEx</h3>  

<p>RegExp - это встроенный объект, который предоставляет способ создания регулярных выражений. Регулярные выражения - это шаблоны, используемые для сопоставления комбинаций символов в строках.</p>

<b>Вот пример создания объекта регулярного выражения с использованием конструктора:</b>

 
  <code>
    {'var regex = new RegExp("some", "long");'}
  </code>
 

<p>Здесь some является флагом регулярного выражения, а long - необязательным флагом, который изменяет поведение регулярного выражения.</p>

<p>Вот пример использования метода test() объекта RegExp для проверки, соответствует ли строка регулярному выражению:</p>

<p>{'var str = "The quick brown fox jumps over the lazy dog";'}</p>

<p>{'var regex = /fox/i;'}</p>

<p>{'var result = regex.test(str);'}</p>

<p>{'console.log(result); // true '}</p>

<p>В этом примере /fox/i - это шаблон регулярного выражения, который соответствует слову "fox" без учета регистра. Метод test() возвращает логическое значение, указывающее, соответствует ли шаблон регулярного выражения строке str.</p>

<p>Вот еще один пример использования метода match() объекта String с регулярным выражением для извлечения соответствующих значений:</p>

<p>{'var str = " The quick brown fox jumps over the lazy dog ";'}</p>

<p>{'var regex = /fox/i;'}</p>

<p>{'var result = str.match(regex);'}</p>

<p>{'console.log(result); // ["fox"]'}</p>

<hr/>

<p>В этом примере метод match() возвращает массив, содержащий найденную подстроку(и), если шаблон регулярного выражения найден в строке.</p>

<b>А вот некоторые часто используемые специальные символы в регулярных выражениях:</b>

<p>.- Соответствует любому символу, кроме перевода строки \n</p>

<p>\w - Соответствует любому ASCII-символу слова [a-zA-Z0-9_]</p>

<p>\W - Соответствует любому не-ASCII-символу слова [^a-zA-Z0-9_]</p>

<p>\d - Соответствует любой ASCII-цифре [0-9]</p>

<p>\D - Соответствует любому не-цифровому символу [^0-9]</p>

<p>\s - Соответствует любому символу Unicode пробела</p>

<p>\S - Соответствует любому не-пробельному символу</p>

 
  <code>
    {'var myStr = "awesome Text";\nvar myRegExp = /[a-zA-Z0-9]/;\nvar result = myRegExp.test(myStr);\nconsole.log(result); //true'}
  </code>
 

<b>^ - Соответствует началу строки</b><br/>

<b>$ - Соответствует концу строки</b>

<p>Флаги:</p>

<b>i - ignoreCase</b>

<p>{'var exp = /a/i // ищет буквы в верхнем и нижнем регистре'}</p>  

<b>g - global</b><br/>

<b>Ищет все вхождения шаблона в строке</b>

<p>{'var str = "Borobudur";'}</p>

<p>{'var pattern = /[ou]/g;'}</p>

<p>{'console.log(str.replace(pattern, "a")); //"Barabadar"";'}</p>

<b>m - multiline</b><br/>

<b>Ищет все вхождения шаблона во всех строках строки</b>

<p>{'var str = "Some text And some more\r\nAnd yet\rThis is the end";'}</p>

<p>{'var pattern = /(\w+)\s/g;'}</p>

<p>{'console.log(str.match(pattern)); // ["Some ", "text\n", "And ", "some ", "more\r\n", "And ", "yet\r", "This ", "is ", "the ", "end"]'}</p>

   <p>
   Здесь мы определяем строку str со значением "это мой текст". Затем мы определяем шаблон регулярного выражения, 
   который соответствует началу строки (^), за которым следует одна или несколько строчных букв ([a-z]+), 
   разделенных пробелами, и конец строки ($). Мы используем скобки для захвата каждой группы букв в качестве отдельного подшаблона.
   </p>

   <p>
   Наконец, мы используем метод replace() на строке, передавая шаблон и строку замены, которая использует символ $ для ссылки на захваченные подшаблоны в порядке их определения. В этом случае мы меняем местами первую и вторую группы букв, оставляя третью и четвертую группы на месте.
   </p>

   <p>Вот код:</p>

<p>{'var str = "this is my text";'}</p>

<p>{'var pattern = /^([a-z]+) ([a-z]+) ([a-z]+) ([a-z]+)$/;'}</p>

<p>{'var res = str.replace(pattern, "$2 $1 $3 $4");'}</p>

<p>{'console.log(res); // "is this my text"'}</p>   

    </div>
  )
}



export default RuEs5_6;



