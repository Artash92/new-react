import React from 'react'

 function RuEs5_5() {
  return (
    <div>
  
  <h1>Массив (Array)</h1>
      
      <p>
        В JavaScript массив (array) - это структура данных, которая позволяет хранить несколько значений в одной переменной. Массив объявляется с помощью квадратных скобок, 
        и его элементы разделяются запятыми.
      </p>
      
      <b>Пример</b>
     
  <code>
    {' // Массив чисел\nvar numbers = [1, 2, 3, 4, 5];\n\n// Массив строк\nvar fruits = ["apple", "banana", "orange"];'}
  </code>
 

<b>Длина массива (Array Length)</b>

<p>Свойство length массива возвращает количество элементов в массиве.</p>

<b>Пример</b>
 
  <code>
    {'var numbers = [1, 2, 3, 4, 5];\nconsole.log(numbers.length); // Output: 5'}
  </code>
 

<b>Методы массива (Array Methods)</b>

<p>В JavaScript массивы имеют встроенные методы, которые могут использоваться для манипулирования данными в массиве. Некоторые часто используемые методы массивов:</p>

<div>

<b>push(): добавляет один или несколько элементов в конец массива</b><br/>

<b>pop(): удаляет последний элемент из массива</b><br/>

<b>shift(): удаляет первый элемент из массива</b><br/>

<b>unshift(): добавляет один или несколько элементов в начало массива</b><br/>

<b>splice(): добавляет или удаляет элементы из массива по указанному индексу</b><br/>

<b>slice(): возвращает новый массив, который содержит часть существующего массива</b><br/>

<b>join(): объединяет все элементы массива в строку</b><br/>

<b>concat(): объединяет два или более массивов</b> 

</div>

<b>Пример:</b>

<p>{'var numbers = [1, 2, 3, 4, 5];'}</p>

<p>{'numbers.push(6); // добавляет 6 в конец массива'}</p>

<p>{'console.log(numbers); // Вывод: [1, 2, 3, 4, 5, 6]'}</p>

<p>{'var fruits = ["apple", "banana", "orange"];'}</p>

<p>{'fruits.pop(); // удаляет последний элемент массива'}</p>

<p>{'console.log(fruits); // Вывод: ["apple", "banana"]'}</p>

<p>{'var colors = ["red", "green", "blue"];'}</p>

<p>{'colors.shift(); // удаляет первый элемент массива'}</p>

<p>{'console.log(colors); // Вывод: ["green", "blue"]'}</p>

<p>{'var cars = ["BMW", "Audi", "Mercedes"];'}</p>

<p>{'cars.unshift("Toyota", "Honda"); // добавляет два элемента в начало массива'}</p>

<p>{'console.log(cars); // Вывод: ["Toyota", "Honda", "BMW", "Audi", "Mercedes"]'}</p>

<p>{'var animals = ["dog", "cat", "elephant", "lion"];'}</p>

<p>{'animals.splice(2, 0, "bear", "zebra"); // добавляет "bear" и "zebra" в индекс 2'}</p>

<p>{'console.log(animals); // Вывод: ["dog", "cat", "bear", "zebra", "elephant", "lion"]'}</p>

<p>{'var letters = ["a", "b", "c", "d", "e"];'}</p>

<p>{'var slice1 = letters.slice(0, 2); // возвращает ["a", "b"]'}</p>

<p>{'var slice2 = letters.slice(2); // возвращает ["c", "d", "e"]'}</p>

<p>{'console.log(slice1);'}</p>

<p>{'console.log(slice2);'}</p>

<hr/>

<p>{'var fruits = ["apple", "banana", "orange"];'}</p>

<p>{'var fruitString = fruits.join(","); // объединяет элементы массива с запятой'}</p>

<p>{'console.log(fruitString); // Вывод: "apple,banana,orange"'}</p>

<hr />

<p>{'var nums1 = [1, 2, 3];'}</p>

<p>{'var nums2 = [4, 5, 6];'}</p>

<p>{'var nums3 = nums1.concat(nums2); // объединяет nums1 и nums2'}</p>

<p>{'console.log(nums3); // Вывод: [1, 2, 3, 4, 5, 6]'}</p>

<b>Методы массивов | Объединение массивов</b>

<p>
Вы можете объединять два или более массивов в JavaScript, используя метод concat(). Этот метод возвращает новый массив, содержащий все элементы из исходных массивов.

</p>

<h3>forEach и map </h3>

<b>
forEach используется для итерации каждого элемента массива и выполнения функции для каждого элемента. Он принимает функцию в качестве аргумента и передает каждый элемент массива как аргумент этой функции.
</b>

<p>Вот пример использования forEach для печати каждого элемента массива:</p>

 
  <code>
    {'var arr = [1, 2, 3, 4, 5];\n\narr.forEach(function(element) {\n  console.log(element);\n});'}
  </code>
 
<p>Это выведет:</p>

<p>1<br/> 2 <br/>3<br/>4<br/> 5</p>

<p>
map, с другой стороны, используется для создания нового массива с результатами вызова функции для каждого элемента в исходном массиве. Он также принимает функцию в качестве аргумента и передает каждый элемент массива в эту функцию в качестве аргумента. Функция должна возвращать новое значение для добавления в новый массив.
</p>
<p>
Вот пример использования map для создания нового массива с удвоенным каждым элементом исходного массива:
</p>
<code>
 <p>{'var arr = [1, 2, 3, 4, 5];'}</p>

 <p>{'var doubledArr = arr.map(function(element) {'}</p>

  <p>{' return element * 2;'}</p>

  <p>{'});'}</p>

  <p>{'console.log(doubledArr);'}</p>
  </code>
<p>Это выведет:</p>

<p>[2, 4, 6, 8, 10 ]</p>

<p>
В итоге, forEach используется для выполнения операции над каждым элементом массива, тогда как map используется для создания нового массива с результатами вызова функции для каждого элемента исходного массива. 
</p>
<h3>Метод apply</h3>
<p>
В JavaScript метод apply() используется для вызова функции с заданным значением this и аргументами, предоставленными в виде массива (или похожего на массив объекта).
</p>
<p>Синтаксис использования метода apply() выглядит следующим образом:</p>
  <p>{'functionName.apply(thisValue, [argumentsArray]) '}</p>
<b>Где</b>

<p>functionName - это имя функции, которую вы хотите вызвать.</p>
<p>thisValue - это значение, которое вы хотите использовать в качестве значения this внутри функции. Этот параметр является необязательным. Если вы его опустите, будет использован глобальный объект.</p>
   <p>argumentsArray - это массив или похожий на массив объект, который содержит аргументы, которые вы хотите передать в функцию. Этот параметр также является необязательным. Если вам не нужно передавать аргументы, вы можете его опустить.</p>
    <p>Вот пример использования метода apply() с массивом:</p>
    
  <code>
    {'var numbers = [1, 2, 3, 4, 5];\n\nfunction sumArray() {\n  var sum = 0;\n  for (var i = 0; i < this.length; i++) {\n    sum += this[i];\n  }\n  return sum;\n}\n\nvar result = sumArray.apply(numbers);\nconsole.log(result); // Output: 15'}
  </code>
 
<p>В этом примере у нас есть массив чисел и функция sumArray(), которая вычисляет сумму всех элементов в массиве. Мы вызываем метод apply() на функции sumArray() с массивом numbers в качестве значения this. Метод apply() передает массив как значение this, и функция sumArray() вычисляет сумму всех элементов массива и возвращает ее.</p>
  <p>
  Обратите внимание, что метод apply() похож на метод call(). Единственное отличие заключается в том, что метод call() принимает аргументы в виде списка, разделенного запятыми, в то время как метод apply() принимает аргументы в виде массива.
  </p>
  <h3>Самовызывающаяся функция</h3>
  <p>
  Самовызывающаяся функция - это функция JavaScript, которая автоматически запускается при ее определении. Она также известна как немедленно вызываемое функциональное выражение (IIFE). Эта функция обернута в скобки, а затем немедленно вызывается, используя открывающие и закрывающие скобки.
  </p>
  <p>Вот пример самовызывающейся функции:</p>
   
  <code>
    {'(function() {\n  console.log("Привет, мир!");\n})();'}
  </code>
 
<p>
В этом примере функция определена и немедленно вызвана с помощью открывающих и закрывающих скобок. Это выведет "Привет, мир!" в консоль.
</p>
<p>
Самовызывающиеся функции обычно используются для создания частного области видимости, в которой можно определять переменные и функции, не засоряя глобальное пространство имен. Вот пример:
</p>
 
  <code>
    {'(function() {\n  var x = 10;\n  \n  function foo() {\n    console.log(x);\n  }\n  \n  foo(); // Выводит 10\n})();'}
  </code>
 
<p>
В этом примере переменная x и функция foo определены внутри самовызывающейся функции. Они не доступны извне функции, что помогает предотвратить конфликты именования с другим кодом.
</p>
<p>
Самовызывающиеся функции также могут принимать аргументы, как обычные функции. Вот пример:
</p>
 
  <code>
    {'(function(x, y) {\n  console.log(x + y);\n})(10, 20); // Вывод: 30'}
  </code>

<p>
В этом примере самовызывающаяся функция принимает два аргумента (x и y) и выводит их сумму в консоль.
</p>
<p>
Самовызывающиеся функции - это мощный инструмент в JavaScript для создания частных областей видимости, предотвращения конфликтов имен и управления глобальными переменными.
</p>

    </div>
  )
}



export default RuEs5_5;



