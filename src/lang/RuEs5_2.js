import React from 'react'

 function RuEs5_2() {
  return (
    <div>
    <h3>Циклы и условные конструкции в JavaScript</h3>
  <b>1. Цикл while</b>
  <p>Цикл while используется для многократного выполнения блока кода, пока указанное условие истинно.</p>
<p>Вот пример:</p>
   <p>{'var i = 0; // инициализация переменной-счетчика'}</p> 
   <p>{'while (i < 5) { // задание условия'}</p>
   <p>{'console.log(i); // выполнение блока кода'}</p>
   <p>{'i++; // обновление переменной-счетчика'}</p>
   <p>{'}'}</p>
  <p>
  В этом примере цикл будет работать, пока значение i будет меньше 5. Блок кода будет выполняться каждый раз, когда цикл запускается, и значение i будет увеличиваться на 1 до тех пор, пока не достигнет 5.
Результат выполнения этого кода будет:
<br/>0<br/>1<br/>2<br/>3<br/>4
  </p>
  <b>2. Цикл for</b>
  <p>Цикл for используется для многократного выполнения блока кода определенное число раз.
Вот пример:</p>
<pre>
    <code>
      {'for (var i = 0; i < 5; i++) {\n  console.log(i);\n}'}
    </code>
  </pre>
  <p>
  В этом примере цикл будет выполняться 5 раз, так как условие определяет, что i должно быть меньше 5. Блок кода будет выполняться каждый раз, когда цикл запускается, и значение i будет увеличиваться на 1 каждый раз.
Результат выполнения этого кода будет таким же, как в предыдущем примере:
<br/>0<br/>1<br/>2<br/>3<br/>4

  </p>
  <b>3. Цикл do-while</b>
  <p>
  Цикл do-while похож на цикл while, но выполняет блок кода по крайней мере один раз, даже если условие изначально ложно.
Вот пример:
  </p>
  <p>{'var i = 0; // инициализируем переменную-счетчик'}</p>
  <p>{'do {'}</p>
  <p>{'console.log(i); // выполняем блок кода'}</p>
  <p>{'i++; // обновляем переменную-счетчик'}</p>
  <p>{'}'}</p>
  <p>{'while (i < 5); // устанавливаем условие'}</p>
  <p>
  В этом примере цикл выполнится хотя бы один раз, так как условие проверяется после выполнения блока кода. Блок кода будет выполняться каждый раз, когда цикл выполняется, а значение i будет увеличиваться на 1 каждый раз, пока не достигнет 5.
  Результат выполнения этого кода будет таким же, как и в предыдущих примерах:
<br/>0<br/>1<br/>2<br/>3<br/>4
  </p>
  <b>4. Операторы ++ и --</b>
  <p>
  Операторы ++ и -- используются для увеличения или уменьшения переменной на 1.
  Вот несколько примеров:
  </p>
  <pre>
    <code>
      {'var i = 0; // инициализируем переменную\ni++; // увеличиваем переменную на 1\nconsole.log(i); // вывод: 1\n\nvar j = 2; // инициализируем другую переменную\nj--; // уменьшаем переменную на 1\nconsole.log(j); // вывод: 1'}
    </code>
  </pre>
  <p>Эти операторы часто используются в циклах для отслеживания текущей итерации.</p>
  <b>5. Операторы if, else и else if</b>
  <p>
  Оператор if используется для выполнения блока кода, если заданное условие истинно. Оператор else используется для выполнения блока кода, если условие ложно. Оператор else if используется для проверки нескольких условий.
  Вот пример:
  </p>
  <pre>
    <code>
      {'var x = 10; // инициализируем переменную\nif (x > 10) { // проверяем условие\n  console.log("x больше 10")'}
    </code>
  </pre>
  <h3>Оператор условного (тернарный) оператор</h3>

  <p>
Условный (тернарный) оператор - это сокращенный способ написания оператора if-else в JavaScript. Он принимает три операнда: условие, значение, которое будет возвращено, если условие истинно, и значение, которое будет возвращено, если условие ложно.
Синтаксис условного оператора: (условие) ? значение-истина : значение-ложь

Вот несколько примеров использования условного оператора в JavaScript:

</p>
<b>Пример 1:</b>

<p>{'var a = 5;'}</p>
<p>{'var result = (a == 5) ? "true" : "false";'}</p>
<p>{'document.getElementById("example1"). innerHTML = result;'}</p>
<p>
Вывод: true
Пояснение: В этом примере мы задаем значение переменной a равным 5, а затем используем условный оператор для проверки, равняется ли a 5. Поскольку это верно, возвращается значение "true", которое присваивается переменной result, которая затем выводится в элементе div HTML.

</p>
<b>Пример 2:</b>

<p>{'var a = 10;'}</p>
<p>{'var result = (a == 5) ? "true" : "false";'}</p>
<p>{'document.getElementById("example2"). innerHTML = result;'}</p>
<p>
Вывод: false
Пояснение: В этом примере мы задаем значение переменной a равным 10, а затем используем условный оператор для проверки, равняется ли a 5. Поскольку это ложно, возвращается значение "false", которое присваивается переменной result, которая затем выводится в элементе div HTML.

</p>
<b>Пример 3:</b>

<p>{'var a = 7;'}</p>
<p>{'var result = ( a > 10) ? "greater than10":(a < 5) ? "less than 5":"between5and10";'}</p>
<p>{'document.getElementById("example3"). innerHTML = result;'}</p>
<p>
Вывод: between 5 and 10
Пояснение: В этом примере мы задаем значение переменной a равным 7, а затем используем условный оператор для проверки, больше ли a 10. Поскольку это ложно, мы переходим ко второму условию, которое проверяет, меньше ли a 5. Поскольку это также ложно, мы переходим к третьему условию, которое возвращает значение "between 5 and 10", поскольку оно является единственным возможным вариантом. Результат затем выводится в элементе div HTML.

</p>

    </div>
  )
}



export default RuEs5_2;



