import React from 'react'

function RuReact_2() {
  return (
    <div>
      
      <h1>JSX</h1>
  
  <p>JSX - это расширение синтаксиса для JavaScript, которое позволяет писать код, похожий на HTML, в файлах JavaScript. Оно широко используется в React для определения структуры и макета компонентов пользовательского интерфейса (UI).</p>    
   
  <p>Вот пример того, как работает JSX:</p>
  
  <code>
   
   <p><b>{" import React from 'react'; "}</b></p>

   <p>{'function MyComponent() {'}</p>
   
   <p>{' return ( '}</p>
   
   <p>{'<div> '}</p>

  <p>{'<h1>Hello, world!</h1> '}</p>
  
  <p>{'<p>This is a simple JSX example.</p> '}</p>
  
  <p>{' </div> '}</p>
  
  <p>{'); '}</p>
  
  <p>{'}'}</p>
  
  <p> <b>{'export default MyComponent;'}</b> </p> 
   
   </code>

  <p>В этом примере мы определяем простой компонент React, используя JSX. Компонент отображает элемент <b>div</b>, содержащий элементы <b>h1 и p</b>. Обратите внимание, что HTML-подобный код заключен в скобки и определяется с использованием синтаксиса JSX.</p>

  <p>JSX позволяет легко объединять HTML-подобный код с логикой JavaScript. Например, вы можете использовать переменные и выражения JavaScript внутри своего JSX-кода:</p>
  
  <code>

  <p><b>{" import React from 'react'; "}</b></p>
  
  <p>{'function MyComponent() {'}</p>
  
  <p>{"const name = 'John Doe'; "}</p>
  
  <p>{' return ( '}</p>
  
  <p>{'<div> '}</p>
  
  <p>{" <h1>Hello, {name}!</h1> "}</p>
  
  <p>{'<p>This is a simple JSX example.</p> '}</p>
  
  <p>{' </div> '}</p>
  
  <p>{');'}</p>
  
  <p>{'}'}</p>

  <p><b>{'export default MyComponent;'}</b></p> 
   
   </code>
    
   <p>В этом примере мы используем переменную JavaScript <b>(name)</b> внутри нашего JSX-кода, чтобы динамически отображать персонализированное приветствие.</p>

   <p>JSX не является обязательным для разработки в React, но рекомендуется, так как он значительно упрощает написание и управление сложными компонентами пользовательского интерфейса. Когда вы пишете код на JSX, он транспилируется в обычный код JavaScript, который может быть выполнен браузером.</p>

<p>Существуют два основных типа компонентов в React: функциональные компоненты и компоненты классов.</p>

<p>Функциональные компоненты определяются как функции JavaScript, которые возвращают JSX-элемент. Они обычно используются для простых, представительных компонентов пользовательского интерфейса, которые не имеют состояния или методов жизненного цикла.</p>

<p>Вот пример простой функциональной компоненты:</p>

<code>

<p><b>{"import React from 'react'; "}</b></p>

<p>{'function MyComponent(props) {'}</p>

<p>{'return ('}</p>

<p>{'<div> '}</p>

<p>{' <h1>Привет, {props.name}!</h1> '}</p>

<p>{'<p>Это функциональный компонент.</p> '}</p>

<p>{'</div> '}</p>

<p>{' );'}</p>

<p>{'}'}</p>

<p>{'export default MyComponent;'}</p>  

</code>
 
<p>В этом примере мы определяем функциональный компонент с именем <b>MyComponent</b>, который принимает объект <b>props</b> в качестве аргумента. Компонент возвращает элемент JSX, который включает элемент h1 с персонализированным приветствием и элемент <b>p</b> с сообщением.</p>    

<p>Классовые компоненты, с другой стороны, определяются как классы JavaScript, которые расширяют класс <b>React.Component</b>. Они используются для более сложных компонентов пользовательского интерфейса, которые должны управлять состоянием и иметь методы жизненного цикла.</p>

<p>Вот пример простого классового компонента:</p>

<code>

<p><b>{" import React from 'react'; "}</b></p>

<p>{' class MyComponent extends React.Component {' }</p>

<p>{'constructor(props) {'}</p>

<p>{'super(props);'}</p>

<p>{'this.state = {'}</p>

<p>{'count: 0'}</p>

<p>{'};'}</p>

<p>{'}'}</p>

<p>{'render() {'}</p>

<p>{' return ('}</p>

<p>{' <div>'}</p>

<p>{'<h1>Count: {this.state.count}</h1>'}</p>

<p>{'<button onClick={() => this.setState({ count: this.state.count + 1 })}>Increment</button>'}</p>

<p>{' </div> '}</p>

<p>{' );'}</p>

<p>{' }'}</p>

<p>{'}'}</p>

<p><b>{'export default MyComponent;'}</b></p>  

</code>

<p>В этом примере мы определяем классовый компонент с именем MyComponent, который имеет свойство состояния с именем <b>count и метод render</b>, который возвращает элемент JSX с элементом h1, который отображает текущее значение счетчика, и элементом <b>button</b>, который увеличивает значение счетчика при нажатии.</p>

<p>Компоненты могут быть скомпонованы и вложены друг в друга, чтобы создавать сложные элементы пользовательского интерфейса. Они также могут принимать свойства как входные данные, что позволяет им настраиваться и переиспользоваться во всем приложении.</p>

<p><b>{'<Component />'}</b> - это синтаксис, используемый в React для рендеринга компонента. Это называется самозакрывающимся тегом или пустым тегом, и он эквивалентен вызову компонента в виде функции без аргументов.</p>

<p>Например, предположим, у нас есть простой компонент с именем MyComponent:</p>

   <code>

<p>{'function MyComponent() {'}</p>

<p>{'return ( '}</p>

<p>{'<div>  '}</p>

<p>{'<h1>Hello, world!</h1> '}</p>

<p>{'</div> '}</p>

<p>{');'}</p>

<p>{'}'}</p>

   </code>

<p>Для рендеринга этого компонента мы бы использовали синтаксис <b>{'<MyComponent /> '}</b>:</p>

 <code>

 <p>{'ReactDOM.render( '}</p>

<p>{'<MyComponent />, '}</p>

<p>{" document.getElementById('root')"}</p> 

 </code>

<p>Синтаксис <b>{'<MyComponent /> '}</b> создает экземпляр компонента MyComponent и рендерит его в DOM.</p>

    </div>
  )
}

export default RuReact_2;