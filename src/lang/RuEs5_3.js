import React from 'react'

 function RuEs5_3() {
  return (
    <div>
    <h3>Концепция функции</h3>
      <p>
      Функция - это блок кода, который может быть определен и выполнен позднее. Она используется для выполнения определенной задачи и может быть вызвана из любой части программы, где она доступна. Функции делают код более организованным, переиспользуемым и понятным.
      </p>
      <h3>Создание функции</h3>
      <p>
      В JavaScript ES5 функцию можно создать с помощью ключевого слова "function", за которым следует имя функции и набор скобок. Внутри скобок мы можем определить один или несколько параметров, а внутри фигурных скобок мы определяем код, который будет выполнен при вызове функции.
      </p>
      <b>Пример:</b>
      <pre>
  <code>
    {'   function sum(a, b) {\n    return a + b;\n  }'}
  </code>
</pre>
<b>Аргументы функции:</b>
<p>
Аргументы функции - это значения, которые передаются в функцию при ее вызове. Мы можем определить один или несколько параметров внутри скобок при создании функции. При вызове функции мы передаем фактические значения в качестве аргументов.
</p>
<b>Пример:</b>
<pre>
  <code>
    {'  function sum(a, b) {\n    return a + b;\n  }\n  var result = sum(5, 10);\n  // Вывод: 15'}
  </code>
</pre>
<b>Области видимости переменных:</b>

<p>Переменные могут иметь различные области видимости в зависимости от того, где они объявлены. Вот пример переменной, объявленной внутри функции, которая недоступна вне этой функции:</p>
<b>Пример:</b>
 
  <code>
    {'function showMessage() {\n  var message = \'Hello, World!\';\n  console.log(message);\n}\n\nshowMessage(); // Вывод: Hello, World!\nconsole.log(message); // Вывод: Uncaught ReferenceError: message is not defined'}
  </code>
 
<b>Выражения функций:</b>

<p>Выражение функции - это функция, которая присваивается переменной. Вот пример:</p>
 
  <code>
    {'var multiply = function(a, b) {\n  return a * b;\n};\n\nvar result = multiply(3, 4);\nconsole.log(result); // Вывод: 12'}
  </code>
 
<b>Анонимные функции:</b>

<p>Анонимная функция - это функция без имени. Вот пример анонимной функции, которая сразу же вызывается:</p>
 
  <code>
    {'(function() {\n  console.log(\'Hello, World!\');\n})();'}
  </code>
 
<b>Замыкания</b>

<p>Замыкания - это возможность JavaScript, позволяющая функции получать доступ и изменять переменные, находящиеся за пределами ее собственной области видимости. Другими словами, замыкание формируется, когда функция определена внутри другой функции и имеет доступ к переменным родительской функции.
Вот пример замыкания в JavaScript ES5:</p>
 
  <code>
    {'function outerFunction() {\n  var outerVariable = "I am outside!";\n\n  function innerFunction() {\n    console.log(outerVariable);\n  }\n\n  return innerFunction;\n}\n\nvar closureExample = outerFunction();\nclosureExample(); // Вывод: "I am outside!"'}
  </code>
 
<p>В этом примере функция outerFunction определяет переменную outerVariable и функцию innerFunction, которая выводит значение переменной outerVariable в консоль. Функция innerFunction возвращается из функции outerFunction и присваивается переменной closureExample.
Когда вызывается closureExample(), выводится значение переменной outerVariable, которое равно "I am outside!". Это возможно благодаря замыканию, которое позволяет функции innerFunction получить доступ к переменной outerVariable через замыкание, несмотря на то, что outerVariable не определена внутри функции innerFunction.

Это всего лишь простой пример замыканий в JavaScript ES5, но он демонстрирует, насколько они мощны и полезны. Замыкания часто используются для создания закрытых переменных и методов в JavaScript, а также для других целей. </p>

    </div>
  )
}



export default RuEs5_3;



