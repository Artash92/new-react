import React from 'react'

function RuReact_7() {
  return (
    <div>
      <h1>Redux</h1>
   
   <p>Redux - это библиотека управления состоянием для приложений на JavaScript. Она помогает управлять состоянием вашего приложения предсказуемым образом, упрощая анализ потока данных в вашем приложении. С помощью Redux вы храните состояние вашего приложения в единственном объекте, называемом хранилищем, и используете действия и редьюсеры для изменения этого состояния.</p>
   
   <p>Вот как это работает: когда вы хотите изменить состояние вашего приложения, вы отправляете действие (action). Действие - это простой объект JavaScript, который описывает то, что произошло в вашем приложении. Например, вы можете отправить действие, чтобы добавить новый элемент в список или обновить информацию профиля пользователя.</p>
   
   <p>Редьюсеры (reducers) - это функции, которые принимают текущее состояние вашего приложения и действие, и возвращают новое состояние. Редьюсеры - это чистые функции, что означает, что они не имеют побочных эффектов и всегда возвращают одинаковый вывод для заданного ввода.</p>
   
   <p>React-Redux - это библиотека, которая интегрирует Redux с React. Она предоставляет способ связать ваши компоненты React с хранилищем Redux, чтобы вы могли получать доступ к состоянию вашего приложения из ваших компонентов и изменять его. React-Redux предоставляет два ключевых компонента: Provider и connect.</p>
   
   <p>Компонент Provider используется для обертывания всего вашего приложения на React. Он принимает объект хранилища в качестве свойства и делает это хранилище доступным для всех компонентов вашего приложения.</p>
   
   <p>1. Установите необходимые пакеты:</p>

  <b>npm install redux react-redux</b>

   <p>2. Создайте хранилище Redux:</p>
    
   <code>
     
     <p>{"import { createStore } from 'redux';"}</p>
     
     <p>{"import rootReducer from './reducers';"}</p>

     <p>{" const store = createStore(rootReducer); "}</p>
   
   </code>

   <p>3. Создайте действия (actions) Redux:</p>

   <code>
     
     <p>{"export const increment = () => {"}</p>
     
     <p>{" return { "}</p>

     <p>{" type: 'INCREMENT' "}</p>

     <p>{" } "}</p>

     <p>{" } "}</p>

     <p>{" export const decrement = () => { "}</p>

     <p>{"  return { "}</p>

     <p>{" type: 'DECREMENT' "}</p>

     <p>{" } "}</p>

     <p>{" } "}</p>

   </code>

   <p>4. Создайте редьюсеры (reducers) Redux:</p>

   <code>
    
    <p>{"const counterReducer = (state = 0, action) => { "}</p>

    <p>{"switch (action.type) { "}</p>

    <p>{"case 'INCREMENT': "}</p>

    <p>{" return state + 1; "}</p>

    <p>{"case 'DECREMENT': "}</p>

    <p>{"return state - 1; "}</p>

    <p>{"default: "}</p>

    <p>{"return state; "}</p>

    <p>{" }"}</p>

    <p>{"} "}</p>

    <p>{"export default counterReducer;"}</p>
   
   </code>

   <p>5. Подключите Redux к компоненту React, используя функцию <b>connect</b> библиотеки React-Redux:</p>    

   <code>
    
    <p>{"import { connect } from 'react-redux'; "}</p>

    <p>{" import { increment, decrement } from './actions'; "}</p>

    <p>{"const Counter = (props) => { "}</p>

    <p>{"return ( "}</p>

    <p>{"<div> "}</p>

    <p>{" <h1>{props.count}</h1> "}</p>

    <p>{"<button onClick={props.increment}>+</button> "}</p>

    <p>{"<button onClick={props.decrement}>-</button> "}</p>

    <p>{"</div> "}</p>

    <p>{"); "}</p>

    <p>{"} "}</p>

    <p>{"const mapStateToProps = (state) => {"}</p>

    <p>{"return { "}</p>

    <p>{" count: state.counter "}</p>

    <p>{"} "}</p>

    <p>{"} "}</p>

    <p>{"const mapDispatchToProps = (dispatch) => { "}</p>

    <p>{"return { "}</p>

    <p>{"increment: () => dispatch(increment()), "}</p>

    <p>{"decrement: () => dispatch(decrement()) "}</p>

    <p>{" } "}</p>

    <p>{"}"}</p>

    <p>{"export default connect(mapStateToProps, mapDispatchToProps)(Counter); "}</p>
   
   </code>

   <p>6. Оберните свое приложение компонентом <b>Provider</b>, чтобы сделать хранилище Redux доступным для всех компонентов:</p> 
    
   <code>
      
      <p>{"import { Provider } from 'react-redux'; "}</p>

      <p>{"import store from './store'; "}</p>

      <p>{"import Counter from './Counter'; "}</p>

      <p>{"const App = () => { "}</p>

      <p>{"return ("}</p>

      <p>{" <Provider store={store}> "}</p>

      <p>{"<Counter /> "}</p>

      <p>{"</Provider> "}</p>

      <p>{"); "}</p>

      <p>{"}"}</p>

      <p>{"export default App;"}</p>
    
    </code>
    
    <p>Это базовый пример того, как использовать Redux и React-Redux в приложении React. Имейте в виду, что это только вершина айсберга, и есть намного больше, что нужно узнать о Redux и его экосистеме.</p>
    
    <p>Есть несколько дополнительных вещей, на которые нужно обратить внимание при использовании Redux в приложении React:</p>
    
    <p>1. Промежуточное ПО Redux: Промежуточное ПО - это способ изменять или перехватывать действия Redux до их обработки редьюсерами. Промежуточное ПО может использоваться для задач, таких как журналирование, асинхронные запросы и многое другое. Некоторые популярные варианты промежуточного ПО для Redux включают <b>redux-thunk, redux-saga и redux-observable</b>.</p>
    
    <p>2. Инструменты разработчика Redux: Инструменты разработчика Redux - это расширение браузера, которое предоставляет полезный пользовательский интерфейс для отладки и проверки хранилища Redux. Он позволяет просматривать действия и изменения состояния, а также обеспечивает возможность отладки с перемоткой во времени.</p>
    
    <p>3. Селекторы Redux: Селекторы - это функции, которые извлекают определенные части данных из хранилища Redux. Они могут использоваться для вычисления производных данных, фильтрации и преобразования данных и многое другое. Селекторы могут помочь упростить ваши компоненты, предоставляя им только необходимые данные, не беспокоясь о структуре хранилища.</p>
    
    <p>4. Redux ducks: Ducks - это предложение по организации кода Redux в модули, которые содержат все связанные типы действий, создатели действий и редьюсеры для определенной функции или области. Этот подход может помочь упростить ваш код и облегчить его поддержку.</p>
    
    <p>Это только несколько из дополнительных тем, которые вы можете изучить при работе с Redux. В экосистеме Redux доступно множество других библиотек и инструментов, поэтому важно потратить время на их изучение и решить, какие из них наилучшим образом подходят для вашего проекта.</p> 
    
    
    
    
    
    
    
    </div>
  )
}

export default RuReact_7;